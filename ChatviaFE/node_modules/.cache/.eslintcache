[{"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\index.js":"1","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\serviceWorker.js":"2","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\App.js":"3","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\store.js":"4","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\helpers\\fake-backend.js":"5","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\sagas.js":"6","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\reducers.js":"7","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\routes\\SignalRContext.js":"8","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\routes\\index.js":"9","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\auth\\reducers.js":"10","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\auth\\saga.js":"11","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\contact\\reducer.js":"12","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\conversation\\saga.js":"13","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\contact\\saga.js":"14","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\conversation\\reducer.js":"15","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\message\\reducers.js":"16","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\profile\\sagas.js":"17","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\message\\sagas.js":"18","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\profile\\reducers.js":"19","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\routes\\routes.js":"20","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\chat\\reducers.js":"21","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\control\\reducers.js":"22","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\layout\\reducer.js":"23","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\layouts\\NonAuth.js":"24","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\layouts\\AuthLayout\\index.js":"25","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\actionTypes.js":"26","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\auth\\constants.js":"27","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\conversation\\action.js":"28","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\conversation\\actionType.js":"29","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\contact\\action.js":"30","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\auth\\actions.js":"31","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\profile\\actions.js":"32","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\message\\actions.js":"33","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\layout\\constants.js":"34","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\chat\\constants.js":"35","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\Admin\\Groups.js":"36","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\Admin\\Messages.js":"37","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\Auth\\Admin.js":"38","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\Auth\\LockScreen.js":"39","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\Auth\\Register.js":"40","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\Auth\\Logout.js":"41","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\Auth\\ForgetPassword.js":"42","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\Auth\\Login.js":"43","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\Call\\VideoCallStream.js":"44","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\Call\\CallPending.js":"45","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\actions.js":"46","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\Call\\VoiceCall.js":"47","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\Call\\VideoCall.js":"48","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\Admin\\AdminDashboard.js":"49","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\Admin\\Users.js":"50","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\StarterPage\\index.js":"51","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\layouts\\AuthLayout\\LeftSidebarMenu.js":"52","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\components\\withRouter.js":"53","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\dashboard\\index.js":"54","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\components\\Sidebar.js":"55","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\components\\Header.js":"56","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\i18n.js":"57","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\chat\\actions.js":"58","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\layout\\actions.js":"59","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\dashboard\\ChatLeftSidebar.js":"60","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\variables\\general.js":"61","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\control\\actions.js":"62","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\dashboard\\UserChat\\index.js":"63","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\components\\UserProfileSidebar.js":"64","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\components\\SelectContact.js":"65","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\dashboard\\UserChat\\UserHead.js":"66","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\dashboard\\Tabs\\Profile.js":"67","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\dashboard\\UserChat\\ChatInput.js":"68","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\dashboard\\Tabs\\Groups.js":"69","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\dashboard\\Tabs\\Chats.js":"70","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\dashboard\\UserChat\\FileList.js":"71","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\dashboard\\Tabs\\Settings.js":"72","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\dashboard\\Tabs\\Contacts.js":"73","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\dashboard\\UserChat\\ImageList.js":"74","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\components\\CustomCollapse.js":"75","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\components\\AttachedFiles.js":"76","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\dashboard\\Tabs\\OnlineUsers.js":"77","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\admin\\actions.js":"78","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\admin\\types.js":"79","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\layouts\\AdminLayout\\AdminLayout.js":"80","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\routes\\adminRoutes\\AdminRoutes.js":"81"},{"size":756,"mtime":1731821340032,"results":"82","hashOfConfig":"83"},{"size":5227,"mtime":1731821340075,"results":"84","hashOfConfig":"83"},{"size":1468,"mtime":1731821339819,"results":"85","hashOfConfig":"83"},{"size":665,"mtime":1731821340072,"results":"86","hashOfConfig":"83"},{"size":2103,"mtime":1731821340029,"results":"87","hashOfConfig":"83"},{"size":881,"mtime":1731821340072,"results":"88","hashOfConfig":"83"},{"size":669,"mtime":1731821340072,"results":"89","hashOfConfig":"83"},{"size":1564,"mtime":1731821340073,"results":"90","hashOfConfig":"83"},{"size":3870,"mtime":1732746916321,"results":"91","hashOfConfig":"83"},{"size":1008,"mtime":1731821340059,"results":"92","hashOfConfig":"83"},{"size":3609,"mtime":1731821340059,"results":"93","hashOfConfig":"83"},{"size":1402,"mtime":1731821340062,"results":"94","hashOfConfig":"83"},{"size":1014,"mtime":1731821340066,"results":"95","hashOfConfig":"83"},{"size":5127,"mtime":1731821340063,"results":"96","hashOfConfig":"83"},{"size":923,"mtime":1731821340066,"results":"97","hashOfConfig":"83"},{"size":2204,"mtime":1731821340069,"results":"98","hashOfConfig":"83"},{"size":4443,"mtime":1731821340071,"results":"99","hashOfConfig":"83"},{"size":4423,"mtime":1731821340070,"results":"100","hashOfConfig":"83"},{"size":2063,"mtime":1731821340071,"results":"101","hashOfConfig":"83"},{"size":2555,"mtime":1732746641549,"results":"102","hashOfConfig":"83"},{"size":18524,"mtime":1731821340061,"results":"103","hashOfConfig":"83"},{"size":1056,"mtime":1731821340064,"results":"104","hashOfConfig":"83"},{"size":940,"mtime":1731821340068,"results":"105","hashOfConfig":"83"},{"size":1324,"mtime":1731821340034,"results":"106","hashOfConfig":"83"},{"size":1900,"mtime":1731821340034,"results":"107","hashOfConfig":"83"},{"size":4876,"mtime":1731821340057,"results":"108","hashOfConfig":"83"},{"size":480,"mtime":1731821340058,"results":"109","hashOfConfig":"83"},{"size":592,"mtime":1731821340065,"results":"110","hashOfConfig":"83"},{"size":472,"mtime":1731821340065,"results":"111","hashOfConfig":"83"},{"size":1775,"mtime":1731821340062,"results":"112","hashOfConfig":"83"},{"size":1926,"mtime":1731821340058,"results":"113","hashOfConfig":"83"},{"size":2912,"mtime":1731821340070,"results":"114","hashOfConfig":"83"},{"size":4359,"mtime":1731821340069,"results":"115","hashOfConfig":"83"},{"size":331,"mtime":1731821340067,"results":"116","hashOfConfig":"83"},{"size":215,"mtime":1731821340060,"results":"117","hashOfConfig":"83"},{"size":5696,"mtime":1732737619259,"results":"118","hashOfConfig":"83"},{"size":3454,"mtime":1731821340042,"results":"119","hashOfConfig":"83"},{"size":6745,"mtime":1731821340043,"results":"120","hashOfConfig":"83"},{"size":5387,"mtime":1731821340044,"results":"121","hashOfConfig":"83"},{"size":6835,"mtime":1731821340046,"results":"122","hashOfConfig":"83"},{"size":448,"mtime":1731821340045,"results":"123","hashOfConfig":"83"},{"size":5679,"mtime":1731821340044,"results":"124","hashOfConfig":"83"},{"size":7698,"mtime":1731821340044,"results":"125","hashOfConfig":"83"},{"size":4973,"mtime":1731821340048,"results":"126","hashOfConfig":"83"},{"size":3989,"mtime":1731821340047,"results":"127","hashOfConfig":"83"},{"size":99,"mtime":1731821340057,"results":"128","hashOfConfig":"83"},{"size":143,"mtime":1731821340048,"results":"129","hashOfConfig":"83"},{"size":5065,"mtime":1731821340048,"results":"130","hashOfConfig":"83"},{"size":4980,"mtime":1732748734762,"results":"131","hashOfConfig":"83"},{"size":11346,"mtime":1732744035831,"results":"132","hashOfConfig":"83"},{"size":261,"mtime":1731821340049,"results":"133","hashOfConfig":"83"},{"size":11438,"mtime":1732747252921,"results":"134","hashOfConfig":"83"},{"size":517,"mtime":1731821340027,"results":"135","hashOfConfig":"83"},{"size":7888,"mtime":1731821340056,"results":"136","hashOfConfig":"83"},{"size":1226,"mtime":1732744836372,"results":"137","hashOfConfig":"83"},{"size":428,"mtime":1731821340024,"results":"138","hashOfConfig":"83"},{"size":1188,"mtime":1731821340031,"results":"139","hashOfConfig":"83"},{"size":569,"mtime":1731821340060,"results":"140","hashOfConfig":"83"},{"size":680,"mtime":1731821340067,"results":"141","hashOfConfig":"83"},{"size":2375,"mtime":1731821340050,"results":"142","hashOfConfig":"83"},{"size":2747,"mtime":1732489309914,"results":"143","hashOfConfig":"83"},{"size":530,"mtime":1731821340064,"results":"144","hashOfConfig":"83"},{"size":18888,"mtime":1731821340056,"results":"145","hashOfConfig":"83"},{"size":13074,"mtime":1731821340026,"results":"146","hashOfConfig":"83"},{"size":3320,"mtime":1731821340025,"results":"147","hashOfConfig":"83"},{"size":15761,"mtime":1731821340055,"results":"148","hashOfConfig":"83"},{"size":5411,"mtime":1731821340053,"results":"149","hashOfConfig":"83"},{"size":7892,"mtime":1731821340054,"results":"150","hashOfConfig":"83"},{"size":11904,"mtime":1731821340052,"results":"151","hashOfConfig":"83"},{"size":11486,"mtime":1731821340051,"results":"152","hashOfConfig":"83"},{"size":2480,"mtime":1731821340054,"results":"153","hashOfConfig":"83"},{"size":19462,"mtime":1731821340053,"results":"154","hashOfConfig":"83"},{"size":16472,"mtime":1731821340051,"results":"155","hashOfConfig":"83"},{"size":3451,"mtime":1731821340055,"results":"156","hashOfConfig":"83"},{"size":1290,"mtime":1731821340023,"results":"157","hashOfConfig":"83"},{"size":2932,"mtime":1731821340023,"results":"158","hashOfConfig":"83"},{"size":4173,"mtime":1731821340052,"results":"159","hashOfConfig":"83"},{"size":2133,"mtime":1732743551673,"results":"160","hashOfConfig":"83"},{"size":893,"mtime":1732743551644,"results":"161","hashOfConfig":"83"},{"size":912,"mtime":1731388274175,"results":"162","hashOfConfig":"83"},{"size":1100,"mtime":1732746797139,"results":"163","hashOfConfig":"83"},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},"1uos3vn",{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"171","messages":"172","suppressedMessages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"174","messages":"175","suppressedMessages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"177","messages":"178","suppressedMessages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"180","messages":"181","suppressedMessages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"183","messages":"184","suppressedMessages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"186","messages":"187","suppressedMessages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"189","messages":"190","suppressedMessages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","suppressedMessages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"195","messages":"196","suppressedMessages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"167"},{"filePath":"199","messages":"200","suppressedMessages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"202","messages":"203","suppressedMessages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"205","messages":"206","suppressedMessages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"167"},{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"212","messages":"213","suppressedMessages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"215","messages":"216","suppressedMessages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"167"},{"filePath":"219","messages":"220","suppressedMessages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"167"},{"filePath":"223","messages":"224","suppressedMessages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"226","messages":"227","suppressedMessages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"229","messages":"230","suppressedMessages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"232","messages":"233","suppressedMessages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"167"},{"filePath":"236","messages":"237","suppressedMessages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"239","messages":"240","suppressedMessages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"242","messages":"243","suppressedMessages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"245","messages":"246","suppressedMessages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"248","messages":"249","suppressedMessages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"251","messages":"252","suppressedMessages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"254","messages":"255","suppressedMessages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"257","messages":"258","suppressedMessages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"260","messages":"261","suppressedMessages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"167"},{"filePath":"264","messages":"265","suppressedMessages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"167"},{"filePath":"268","messages":"269","suppressedMessages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"271","messages":"272","suppressedMessages":"273","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"274","messages":"275","suppressedMessages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"277","messages":"278","suppressedMessages":"279","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"281"},{"filePath":"282","messages":"283","suppressedMessages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"285","messages":"286","suppressedMessages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"167"},{"filePath":"289","messages":"290","suppressedMessages":"291","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"292","messages":"293","suppressedMessages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"167"},{"filePath":"296","messages":"297","suppressedMessages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"299","messages":"300","suppressedMessages":"301","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"302","usedDeprecatedRules":"167"},{"filePath":"303","messages":"304","suppressedMessages":"305","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"167"},{"filePath":"307","messages":"308","suppressedMessages":"309","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"310","usedDeprecatedRules":"167"},{"filePath":"311","messages":"312","suppressedMessages":"313","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"314","usedDeprecatedRules":"167"},{"filePath":"315","messages":"316","suppressedMessages":"317","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"318","messages":"319","suppressedMessages":"320","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"321","messages":"322","suppressedMessages":"323","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324","usedDeprecatedRules":"167"},{"filePath":"325","messages":"326","suppressedMessages":"327","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"328","messages":"329","suppressedMessages":"330","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"331","messages":"332","suppressedMessages":"333","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"334","messages":"335","suppressedMessages":"336","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"337","messages":"338","suppressedMessages":"339","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"340","messages":"341","suppressedMessages":"342","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"343","usedDeprecatedRules":"167"},{"filePath":"344","messages":"345","suppressedMessages":"346","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"347","messages":"348","suppressedMessages":"349","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"350","messages":"351","suppressedMessages":"352","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"353","messages":"354","suppressedMessages":"355","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"356","messages":"357","suppressedMessages":"358","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"359","messages":"360","suppressedMessages":"361","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"362","usedDeprecatedRules":"167"},{"filePath":"363","messages":"364","suppressedMessages":"365","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"366","messages":"367","suppressedMessages":"368","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"369","usedDeprecatedRules":"167"},{"filePath":"370","messages":"371","suppressedMessages":"372","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"373","usedDeprecatedRules":"167"},{"filePath":"374","messages":"375","suppressedMessages":"376","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"377","messages":"378","suppressedMessages":"379","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"380","messages":"381","suppressedMessages":"382","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"383","usedDeprecatedRules":"167"},{"filePath":"384","messages":"385","suppressedMessages":"386","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"387","usedDeprecatedRules":"167"},{"filePath":"388","messages":"389","suppressedMessages":"390","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"391","usedDeprecatedRules":"167"},{"filePath":"392","messages":"393","suppressedMessages":"394","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"395","messages":"396","suppressedMessages":"397","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"398","usedDeprecatedRules":"167"},{"filePath":"399","messages":"400","suppressedMessages":"401","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"402","messages":"403","suppressedMessages":"404","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":1,"source":"405","usedDeprecatedRules":"167"},{"filePath":"406","messages":"407","suppressedMessages":"408","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"409","usedDeprecatedRules":"167"},{"filePath":"410","messages":"411","suppressedMessages":"412","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"413","messages":"414","suppressedMessages":"415","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"416","messages":"417","suppressedMessages":"418","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"419","messages":"420","suppressedMessages":"421","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"422","messages":"423","suppressedMessages":"424","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"425","messages":"426","suppressedMessages":"427","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"428","messages":"429","suppressedMessages":"430","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"431","messages":"432","suppressedMessages":"433","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\index.js",[],[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\serviceWorker.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\App.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\store.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\helpers\\fake-backend.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\sagas.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\reducers.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\routes\\SignalRContext.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\routes\\index.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\auth\\reducers.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\auth\\saga.js",["434","435"],[],"// src/redux/auth/saga.js\r\nimport { all, call, fork, put, takeEvery } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport { loginUserSuccess, apiError, logoutUserSuccess } from './actions';\r\nimport { LOGIN_USER, LOGOUT_USER, REGISTER_USER } from './constants';\r\n\r\n\r\n\r\n// API login\r\nfunction* login({ payload: { userName, passwordHash, navigate } }) {\r\n    \r\n    try {\r\n        const response = yield call(fetch, 'https://localhost:7266/api/User/test', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ userName, passwordHash }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        const data = yield response.json();\r\n        console.log(\"Token nhận được:\", data); // In token nhận được\r\n\r\n        // Lưu token vào cookie với thời gian hết hạn 29 phút (29 * 60 giây)\r\n        document.cookie = `token=${data.token}; path=/; max-age=${29 * 60}`;\r\n        // Dispatch action thành công nếu cần\r\n        yield put(loginUserSuccess(data.token));\r\n\r\n        navigate('/dashboard');\r\n    } catch (error) {\r\n        console.error(\"Lỗi khi đăng nhập:\", error.message);\r\n        \r\n    }\r\n}\r\n\r\n\r\nfunction* register({ payload: { userName, passwordHash, email, navigate } }) {\r\n    \r\n    try {\r\n\r\n        const response = yield call(fetch, 'https://localhost:7266/api/User/register', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ userName, passwordHash, email }),\r\n        });\r\n\r\n        let data;\r\n        if (!response.ok) {\r\n            // Nếu có lỗi, lấy JSON và hiển thị message\r\n            const errorData = yield response.json();\r\n            console.error(\"Lỗi khi đăng ký:\", errorData.message); // In ra thông điệp lỗi từ backend\r\n            // throw new Error(errorData.message); // Ném lỗi để xử lý trong catch (nếu có)\r\n        } else {\r\n            // Nếu phản hồi thành công, lấy dữ liệu JSON\r\n            data = yield response.json();\r\n            console.log(\"Message nhận được:\", data); // In ra token nhận được nếu thành công\r\n\r\n\r\n            // THỰC HIỆN ĐĂNG NHẬP\r\n\r\n            yield call(login, { payload: { userName, passwordHash, navigate } });\r\n        }\r\n\r\n    \r\n\r\n\r\n    }catch(error){\r\n\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction* logout({ payload: { navigate } }) {\r\n    try {\r\n        // Xóa token trong cookie\r\n        document.cookie = \"token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;\"; // Xóa cookie token\r\n        localStorage.removeItem(\"authUser\"); // Xóa thông tin người dùng trong localStorage\r\n\r\n        // Dispatch action logout thành công\r\n        yield put(logoutUserSuccess(true));\r\n        \r\n        // Điều hướng đến trang login\r\n        navigate('/login');\r\n    } catch (error) {\r\n        console.error(\"Lỗi khi logout:\", error);\r\n    }\r\n}\r\n\r\n\r\n// src/sagas/authSaga.js\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport function* watchLogoutUser() {\r\n    yield takeEvery(LOGOUT_USER, logout);\r\n}\r\n\r\nexport function* watchLoginUser() {\r\n    yield takeEvery(LOGIN_USER, login);\r\n}\r\nexport function* watchRegisterUser() {\r\n    yield takeEvery(REGISTER_USER, register);\r\n}\r\n\r\nexport default function* authSaga() {\r\n    yield all([\r\n        fork(watchLoginUser),\r\n        fork(watchLogoutUser),\r\n        fork(watchRegisterUser)\r\n    ]);\r\n}","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\contact\\reducer.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\conversation\\saga.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\contact\\saga.js",["436","437"],[],"// src/redux/contact/saga.js\r\n\r\nimport { call, put, takeLatest, all, take } from \"redux-saga/effects\";\r\n// import { fetchContactSuccess, fetchContactFailure } from '../contact/action';\r\nimport { fetchContactSuccess, fetchContactFailure, fetchContactRequest, acceptContactSuccess } from \"../contact/action\";\r\n// import { FETCH_CONTACT_REQUEST } from './actionTypes';\r\nimport { ACCEPT_CONTACT_REQUEST, CANCEL_CONTACT_REQUEST, DELETE_CONTACT_REQUEST, FETCH_CONTACT_REQUEST, FETCH_CONTACT_SUCCESS, INVITE_CONTACT_REQUEST, REFUSE_CONTACT_REQUEST } from \"../actionTypes\";\r\nimport { Alert } from \"reactstrap\";\r\n\r\nconst getCookie = (name) => {\r\n  const cookieValue = document.cookie\r\n    .split(\"; \")\r\n    .find((row) => row.startsWith(name + \"=\"))\r\n    ?.split(\"=\")[1];\r\n\r\n  return cookieValue ? decodeURIComponent(cookieValue) : null;\r\n};\r\n// Hàm gọi API lấy danh sách contact\r\nfunction* fetchContacts() {\r\n  try {\r\n    const response = yield call(fetch, 'https://localhost:7098/api/Contact/', {\r\n        method: 'GET',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${getCookie(\"token\")}`,\r\n        },\r\n    });\r\n    const data = yield response.json();\r\n    yield put(fetchContactSuccess(data));\r\n  }catch(e){\r\n    yield put(fetchContactFailure(e.message));\r\n  }\r\n}\r\n\r\n\r\n\r\nfunction* inviteContacts({payload: {userName}}) {\r\n  try {\r\n    const response = yield call(fetch, 'https://localhost:7098/api/Contact/invite', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${getCookie(\"token\")}`,\r\n            'userName': userName\r\n        },\r\n        body: JSON.stringify(),\r\n    });\r\n    const data = yield response.json();\r\n    yield alert(data.message);\r\n    // yield put(fetchContactSuccess(data));\r\n    yield put(fetchContactRequest());\r\n\r\n  }catch(e){\r\n    // yield put(fetchContactFailure(e.message));\r\n    yield alert(e.message);\r\n  }\r\n}\r\n\r\n\r\nfunction* acceptContacts({payload: {userId}}) {\r\n\r\n\r\n yield console.log(userId,\"saga\")\r\n  try {\r\n    const response = yield call(fetch, 'https://localhost:7098/api/Contact/accept', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${getCookie(\"token\")}`,\r\n            'userId': userId\r\n        },\r\n        body: JSON.stringify(),\r\n    });\r\n\r\n\r\n    const data = yield response.json();\r\n    yield put(fetchContactRequest());\r\n    yield take(FETCH_CONTACT_SUCCESS);\r\n    // yield alert(data.message);\r\n    yield console.log(data.message);\r\n  }catch(e){\r\n    // yield put(fetchContactFailure(e.message));\r\n    yield alert(e.message);\r\n  }\r\n}\r\n\r\nfunction* cancelContacts({payload: {userId}}) {\r\n   try {\r\n     const response = yield call(fetch, 'https://localhost:7098/api/Contact/cancel', {\r\n         method: 'POST',\r\n         headers: {\r\n             'Content-Type': 'application/json',\r\n             Authorization: `Bearer ${getCookie(\"token\")}`,\r\n             'userId': userId\r\n         },\r\n         body: JSON.stringify(),\r\n     });\r\n     \r\n \r\n     const data = yield response.json();\r\n     yield put(fetchContactRequest());\r\n     yield take(FETCH_CONTACT_SUCCESS);\r\n     yield console.log(data.message);\r\n   }catch(e){\r\n     // yield put(fetchContactFailure(e.message));\r\n     yield console.log(e.message)\r\n   }\r\n }\r\n\r\n\r\n function* refuseContacts({payload: {userId}}) {\r\n  try {\r\n    const response = yield call(fetch, 'https://localhost:7098/api/Contact/refuse', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${getCookie(\"token\")}`,\r\n            'userId': userId\r\n        },\r\n        body: JSON.stringify(),\r\n    });\r\n    \r\n\r\n    const data = yield response.json();\r\n    yield put(fetchContactRequest());\r\n    yield take(FETCH_CONTACT_SUCCESS);\r\n    yield console.log(data.message);\r\n  }catch(e){\r\n    // yield put(fetchContactFailure(e.message));\r\n    yield console.log(e.message)\r\n  }\r\n}\r\n\r\nfunction* deleteContacts({payload: {userId}}) {\r\n  try {\r\n    const response = yield call(fetch, 'https://localhost:7098/api/Contact/delete', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${getCookie(\"token\")}`,\r\n            'userId': userId\r\n        },\r\n        body: JSON.stringify(),\r\n    });\r\n    \r\n\r\n    const data = yield response.json();\r\n    yield put(fetchContactRequest());\r\n    yield take(FETCH_CONTACT_SUCCESS);\r\n    yield console.log(data.message);\r\n  }catch(e){\r\n    // yield put(fetchContactFailure(e.message));\r\n    yield console.log(e.message)\r\n  }\r\n}\r\n\r\n\r\n\r\n// Watcher Saga\r\nexport function* watchFetchContacts() {\r\n  yield all([\r\n   takeLatest(FETCH_CONTACT_REQUEST, fetchContacts),\r\n  takeLatest(INVITE_CONTACT_REQUEST, inviteContacts),\r\n  takeLatest(ACCEPT_CONTACT_REQUEST, acceptContacts),\r\n  takeLatest(CANCEL_CONTACT_REQUEST, cancelContacts),\r\n  takeLatest(REFUSE_CONTACT_REQUEST, refuseContacts),\r\n  takeLatest(DELETE_CONTACT_REQUEST, deleteContacts)\r\n  ])\r\n}\r\n\r\n\r\n\r\n","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\conversation\\reducer.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\message\\reducers.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\profile\\sagas.js",["438","439"],[],"import { call, put, takeLatest, all } from \"redux-saga/effects\";\r\nimport {\r\n  fetchProfileSuccess,\r\n  fetchProfileFailure,\r\n  loginProfileSuccess,\r\n  loginProfileFailure,\r\n  logoutProfileFailure,\r\n  logoutProfileSuccess,\r\n  fetchOtherProfileSuccess\r\n} from \"./actions\";\r\nimport {\r\n  FETCH_PROFILE_REQUEST,\r\n  LOGIN_PROFILE_REQUEST,\r\n  REGISTER_PROFILE_REQUEST,\r\n  LOGOUT_PROFILE_REQUEST,\r\n  FETCH_OTHER_PROFILE_REQUEST,\r\n  getCookie,\r\n  FORGET_PASSWORD_REQUEST,\r\n} from \"../actionTypes\";\r\n\r\nimport axios from \"axios\";\r\n\r\n// FETCH PROFILE\r\n\r\nfunction* fetchProfile() {\r\n  try {\r\n    const response = yield call(fetch, \"https://localhost:7098/api/User\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${getCookie(\"token\")}`,\r\n      },\r\n      body: JSON.stringify(),\r\n    });\r\n    const data = yield response.json();\r\n    yield put(fetchProfileSuccess(data));\r\n  } catch (e) {\r\n    yield put(fetchProfileFailure(e.message));\r\n  }\r\n}\r\n\r\n// FETCH OTHER PROFILE\r\n\r\n\r\nfunction* fetchOtherProfile({payload:{id}}) {\r\n  yield console.log(\"Sagaa id: \", id)\r\n  try {\r\n    const response = yield call(fetch, \"https://localhost:7098/api/User/profile\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ id: id }),\r\n    });\r\n    const data = yield response.json();\r\n\r\n    yield console.log(data)\r\n    yield put(fetchOtherProfileSuccess(data))\r\n  } catch (e) {\r\n    // yield put(fetchProfileFailure(e.message));\r\n    yield console.log(\"fail\")\r\n  }\r\n}\r\n\r\n// LOGIN PROFILE\r\n\r\nfunction* loginProfile({ payload: { userName, passwordHash } }) {\r\n\r\n  \r\n  try {\r\n   \r\n    const response = yield call(fetch, \"https://localhost:7098/api/User/login\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ userName, passwordHash }),\r\n    });\r\n    if (!response.ok) {\r\n      \r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n\r\n\r\n    const data = yield response.json();\r\n    document.cookie = `token=${data.token}; path=/; max-age=${4320 * 60}`;\r\n    yield put(loginProfileSuccess(data.token));\r\n    window.location.href = \"/dashboard\";\r\n  } catch (e) {\r\n    console.log(e.message)\r\n    yield put(loginProfileFailure(e.message));\r\n  }\r\n}\r\n\r\n// REGISTER PROFILE\r\n\r\nfunction* registerProfile({ payload: { userName, passwordHash, email } }) {\r\n  try {\r\n    const response = yield call(\r\n      fetch,\r\n      \"https://localhost:7098/api/User/register\",\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ userName, passwordHash, email }),\r\n      }\r\n    );\r\n    \r\n    if(!response.ok){\r\n      const error = yield response.json();\r\n      alert(error.message); \r\n    }else {\r\n      const notification = yield response.json();\r\n      alert(notification.message);\r\n      \r\n      if(notification.message === \"USER REGISTERED SUCCESSFULLY!\" )\r\n      yield call(loginProfile, { payload: { userName, passwordHash} })\r\n    }\r\n  } catch (error) {}\r\n}\r\n\r\n\r\n// LOGOUT PROFILE\r\n\r\nfunction* logoutProfile() {\r\n  try {\r\n    document.cookie = \"token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;\"; // DELETE TOKEN\r\n    yield put(logoutProfileSuccess(true));\r\n    window.location.href = \"/\";\r\n  } catch (e) {\r\n    yield put(logoutProfileFailure(e.message));\r\n  }\r\n}\r\n\r\n\r\n\r\nfunction* forgetPassword({ payload: { email } }) {\r\n\r\n  yield console.log(email)\r\n\r\n  try {\r\n    const response = yield call(\r\n          fetch,\r\n          \"https://localhost:7098/api/User/forget\",\r\n          {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({ email }),\r\n          }\r\n        );\r\n        const data = yield response.json();\r\n        alert(\"PLEASE VISIT EMAIL FORGET\")\r\n        window.location.href = \"/login\";\r\n  }catch(e){\r\n\r\n  }\r\n  \r\n}\r\n\r\n\r\nexport function* watchFetchProfile() {\r\n  yield all([\r\n    takeLatest(FETCH_PROFILE_REQUEST, fetchProfile),\r\n    takeLatest(LOGIN_PROFILE_REQUEST, loginProfile),\r\n    takeLatest(REGISTER_PROFILE_REQUEST, registerProfile),\r\n    takeLatest(LOGOUT_PROFILE_REQUEST, logoutProfile),\r\n    takeLatest(FETCH_OTHER_PROFILE_REQUEST, fetchOtherProfile),\r\n    takeLatest(FORGET_PASSWORD_REQUEST, forgetPassword)\r\n  ]);\r\n}\r\n","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\message\\sagas.js",["440","441","442","443","444"],[],"// src/redux/message/saga.js\r\n\r\nimport { call, put, takeLatest } from 'redux-saga/effects';\r\nimport {\r\n    FETCH_MESSAGE_REQUEST,\r\n    COPY_MESSAGE_REQUEST,\r\n    SAVE_MESSAGE_REQUEST,\r\n    FORWARD_MESSAGE_REQUEST,\r\n    DELETE_MESSAGE_REQUEST,\r\n    SEND_MESSAGE_REQUEST,\r\n    SEEN_MESSAGE_REQUEST,\r\n    SEND_FILE_REQUEST,\r\n} from '../actionTypes';\r\nimport {\r\n    fetchMessageSuccess,\r\n    fetchMessageFailure,\r\n    copyMessageSuccess,\r\n    copyMessageFailure,\r\n    saveMessageSuccess,\r\n    saveMessageFailure,\r\n    forwardMessageSuccess,\r\n    forwardMessageFailure,\r\n    deleteMessageSuccess,\r\n    deleteMessageFailure,\r\n    fetchMessageRequest,\r\n    sendFileFailure,\r\n    sendFileSuccess\r\n} from './actions';\r\n\r\nimport { getCookie } from '../actionTypes';\r\n\r\nfunction* fetchMessages() {\r\n    try {\r\n    const response = yield call(fetch, 'https://localhost:7098/api/Message/', {\r\n        method: 'GET',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${getCookie(\"token\")}`,\r\n        },\r\n        body: JSON.stringify(),\r\n    });\r\n\r\n    const data = yield response.json();\r\n\r\n   yield console.log(\"Mesage data: \",data)\r\n    yield put(fetchMessageSuccess(data));\r\n  }catch(e){\r\n    yield put(fetchMessageFailure(e.message));\r\n  }\r\n}\r\n\r\nfunction* copyMessage(action) {\r\n    try {\r\n        // Giả sử API trả về thành công\r\n        yield put(copyMessageSuccess(action.payload));\r\n    } catch (error) {\r\n        yield put(copyMessageFailure(error.message));\r\n    }\r\n}\r\n\r\nfunction* saveMessage(action) {\r\n    try {\r\n        yield put(saveMessageSuccess(action.payload));\r\n    } catch (error) {\r\n        yield put(saveMessageFailure(error.message));\r\n    }\r\n}\r\n\r\nfunction* forwardMessage(action) {\r\n    try {\r\n        yield put(forwardMessageSuccess(action.payload));\r\n    } catch (error) {\r\n        yield put(forwardMessageFailure(error.message));\r\n    }\r\n}\r\n\r\nfunction* deleteMessage(action) {\r\n    try {\r\n        yield put(deleteMessageSuccess(action.payload));\r\n    } catch (error) {\r\n        yield put(deleteMessageFailure(error.message));\r\n    }\r\n}\r\n\r\nfunction* sendMessage({payload: { receiverId, messageType, content, mediaUrl, isGroupMessage}}){\r\n    \r\n    const token = getCookie(\"token\");\r\n\r\n    try {\r\n        if(messageType === \"text\"){\r\n            const response = yield call(\r\n                fetch,\r\n                \"https://localhost:7098/api/Message/sendtext\",\r\n                {\r\n                  method: \"POST\",\r\n                  headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                  },\r\n                  body: JSON.stringify({token,  receiverId, isGroupMessage,content }),\r\n                }\r\n              );\r\n\r\n              if(!response.ok){\r\n                console.log(\"NOT OF\")\r\n              }\r\n              yield put({ type: \"FETCH_MESSAGE_REQUEST\" });\r\n        }else if(messageType === \"file\"){\r\n\r\n\r\n            yield console.log(mediaUrl)\r\n        }else {\r\n\r\n        }\r\n    }catch(e){\r\n\r\n    }\r\n    \r\n}\r\n\r\n\r\nfunction* sendFileSaga(action) {\r\n\r\n    console.log(\"send fiel sagea\")\r\n    try {\r\n\r\n        const {  receiver, file, isgroup } = action.payload;\r\n        yield console.log(\"token: \", receiver)\r\n        // const response = yield call(fetch, 'YOUR_API_ENDPOINT/sendfile', {\r\n        //     method: 'POST',\r\n        //     body: action.payload, // Sử dụng FormData\r\n        // });\r\n\r\n        // const data = yield response.json();\r\n\r\n        // if (response.ok) {\r\n        //     yield put({ type: SEND_FILE_SUCCESS, payload: data });\r\n        // } else {\r\n        //     yield put({ type: SEND_FILE_FAILURE, payload: data });\r\n        // }\r\n    } catch (error) {\r\n        // yield put({ type: SEND_FILE_FAILURE, payload: error.message });\r\n    }\r\n}\r\n\r\nfunction* seenMessage({payload: {otherId}}){\r\n    yield console.log(\"Seen Message: \", otherId)\r\n}\r\n\r\n\r\n\r\n\r\nexport function* watchMessageActions() {\r\n    yield takeLatest(FETCH_MESSAGE_REQUEST, fetchMessages);\r\n    yield takeLatest(COPY_MESSAGE_REQUEST, copyMessage);\r\n    yield takeLatest(SAVE_MESSAGE_REQUEST, saveMessage);\r\n    yield takeLatest(FORWARD_MESSAGE_REQUEST, forwardMessage);\r\n    yield takeLatest(DELETE_MESSAGE_REQUEST, deleteMessage);\r\n    yield takeLatest(SEND_MESSAGE_REQUEST, sendMessage);\r\n    yield takeLatest(SEEN_MESSAGE_REQUEST, seenMessage);\r\n    yield takeLatest(SEND_FILE_REQUEST,sendFileSaga);\r\n}\r\n\r\n\r\n\r\n","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\profile\\reducers.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\routes\\routes.js",["445"],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\chat\\reducers.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\control\\reducers.js",["446","447"],[],"import { act } from \"react\";\r\nimport { SELECTED_MESSAGE, SEND_STREAM_VIDEO_CALL, SEND_VALUE_VIDEO_CALL } from \"../actionTypes\";\r\n\r\n\r\n\r\nconst initialState = {\r\n    otherId: \"\",\r\n    loading: false,\r\n    error: null,\r\n    videoCallData: null,\r\n}\r\n\r\n\r\nconst controlReducer = (state = initialState, action) => {\r\n\r\n    console.log(\"Reducer nhận action:\", action); // Thêm log ở đây\r\n    switch(action.type){\r\n        case SELECTED_MESSAGE:\r\n            return { ...state, loading: false, otherId: action.payload };\r\n        case SEND_VALUE_VIDEO_CALL:\r\n            return { ...state, loading: false, videocall: action.payload, error: null }; // Thêm error: null nếu cần\r\n\r\n        case \"SEND_STREAM_VIDEO_CALL\":\r\n            console.log(\"Cập nhật videoCallData:\", action.payload);\r\n            return {\r\n                ...state, \r\n                loading: false,\r\n                videoCallData: action.payload,\r\n                error: null\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default controlReducer;","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\layout\\reducer.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\layouts\\NonAuth.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\layouts\\AuthLayout\\index.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\actionTypes.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\auth\\constants.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\conversation\\action.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\conversation\\actionType.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\contact\\action.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\auth\\actions.js",["448","449","450"],[],"import {\r\n    LOGIN_USER,\r\n    LOGIN_USER_SUCCESS,\r\n    LOGOUT_USER,\r\n    LOGOUT_USER_SUCCESS,\r\n    REGISTER_USER,\r\n    REGISTER_USER_SUCCESS,\r\n    FORGET_PASSWORD,\r\n    FORGET_PASSWORD_SUCCESS,\r\n    API_FAILED\r\n} from './constants';\r\n\r\n// Cấu hình mới\r\nexport const loginUser = (userName, passwordHash,navigate) => ({\r\n    type: 'LOGIN_USER',\r\n    payload: { userName, passwordHash, navigate }, // Đảm bảo userName và passwordHash được truyền vào payload\r\n});\r\n\r\nexport const registerUser = (userName, passwordHash, email, navigate) => ({\r\n    type: 'REGISTER_USER',\r\n    payload: { userName, passwordHash, email, navigate  }\r\n});\r\n\r\nexport const loginUserSuccess = (token) => ({\r\n    type: LOGIN_USER_SUCCESS,\r\n    payload: token\r\n});\r\n\r\nexport const apiError = (error) => ({\r\n    type: API_FAILED,\r\n    payload: error\r\n});\r\n\r\n\r\n\r\n// src/redux/actions.js\r\n// export const logoutUser = () => ({\r\n//     type: LOGOUT_USER,\r\n// });\r\n\r\n\r\nexport const logoutUser = (navigate) => ({\r\n    type: LOGOUT_USER,\r\n    payload: { navigate }\r\n});\r\n\r\n\r\n\r\nexport const logoutUserSuccess = (isUserLogout) => ({\r\n    type: 'LOGOUT_USER_SUCCESS',\r\n    payload: isUserLogout,\r\n});\r\n\r\n// export const logoutUserSuccess = () => {\r\n//     return {\r\n//       type: LOGOUT_USER_SUCCESS,\r\n//       payload: {},\r\n//     };\r\n//   };\r\n\r\n\r\n\r\n// export const loginUserSuccess = (user) => ({\r\n//     type: LOGIN_USER_SUCCESS,\r\n//     payload: user\r\n// });\r\n\r\n\r\n\r\n\r\n\r\nexport const registerUserSuccess = (user) => ({\r\n    type: REGISTER_USER_SUCCESS,\r\n    payload: user\r\n});\r\n\r\n\r\n\r\n\r\nexport const forgetPassword = (email) => ({\r\n    type: FORGET_PASSWORD,\r\n    payload: { email }\r\n});\r\n\r\nexport const forgetPasswordSuccess = (passwordResetStatus) => ({\r\n    type: FORGET_PASSWORD_SUCCESS,\r\n    payload: passwordResetStatus\r\n});\r\n\r\n// export const apiError = (error) => ({\r\n//     type: API_FAILED,\r\n//     payload: error\r\n// });\r\n\r\n\r\n\r\n\r\n\r\n","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\profile\\actions.js",["451","452"],[],"import {\r\n    FETCH_PROFILE_REQUEST,\r\n    FETCH_PROFILE_SUCCESS,\r\n    FETCH_PROFILE_FAILURE,\r\n    LOGIN_PROFILE_REQUEST,\r\n    LOGIN_PROFILE_SUCCESS,\r\n    LOGIN_PROFILE_FAILURE,\r\n    REGISTER_PROFILE_REQUEST,\r\n    REGISTER_PROFILE_SUCCESS,\r\n    REGISTER_PROFILE_FAILURE,\r\n    LOGOUT_PROFILE_REQUEST,\r\n    LOGOUT_PROFILE_SUCCESS,\r\n    LOGOUT_PROFILE_FAILURE,\r\n    FORGET_PASSWORD_REQUEST,\r\n    FORGET_PASSWORD_SUCCESS,\r\n    FORGET_PASSWORD_FAILURE,\r\n    FETCH_OTHER_PROFILE_REQUEST,\r\n    FETCH_OTHER_PROFILE_SUCCESS,\r\n    FETCH_OTHER_PROFILE_FAILURE,\r\n} from \"../actionTypes\";\r\n\r\n// ACTION FETCH PROFILE INFOMATION\r\nexport const fetchProfileRequest = () => (\r\n    {\r\n        type: FETCH_PROFILE_REQUEST\r\n    }\r\n);\r\n\r\nexport const fetchProfileSuccess = (data) => (\r\n    {\r\n        type: FETCH_PROFILE_SUCCESS,\r\n        payload: data\r\n    }\r\n);\r\n\r\nexport const fetchProfileFailure = (error) => (\r\n    {\r\n        type: FETCH_PROFILE_FAILURE,\r\n        payload: error\r\n    }\r\n);\r\n\r\nexport const fetchOtherProfileRequest = (id) => (\r\n    {\r\n        type: FETCH_OTHER_PROFILE_REQUEST,\r\n        payload: {id}\r\n    }\r\n)\r\n\r\n\r\nexport const fetchOtherProfileSuccess = (data) => (\r\n    {\r\n        type: FETCH_OTHER_PROFILE_SUCCESS,\r\n        payload: data\r\n    }\r\n);\r\n\r\nexport const fetchOtherProfileFailure = (error) => (\r\n    {\r\n        type: FETCH_OTHER_PROFILE_FAILURE,\r\n        payload: error\r\n    }\r\n);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// ACTION LOGIN PROFILE\r\n\r\nexport const loginProfileRequest = (userName, passwordHash) => (\r\n    {\r\n        type: LOGIN_PROFILE_REQUEST,\r\n        payload: { userName, passwordHash}\r\n    }\r\n);\r\n\r\nexport const loginProfileSuccess = (token) => (\r\n    {\r\n    type: LOGIN_PROFILE_SUCCESS,\r\n    payload: token,\r\n}\r\n);\r\n\r\nexport const loginProfileFailure = (error) => (\r\n    {\r\n        type: LOGIN_PROFILE_FAILURE,\r\n        payload: error\r\n    }\r\n);\r\n\r\n// ACTION REGISTER PROFILE\r\n\r\nexport const registerProfileRequest = (userName, passwordHash, email) => (\r\n    {\r\n        type: REGISTER_PROFILE_REQUEST,\r\n        payload: {userName, passwordHash, email}\r\n    }\r\n);\r\n\r\nexport const registerProfileSuccess = (data) => (\r\n    {\r\n        type: REGISTER_PROFILE_SUCCESS,\r\n        payload: data\r\n    }\r\n);\r\n\r\nexport const registerProfileFailure = (error) => (\r\n    {\r\n        type: REGISTER_PROFILE_FAILURE,\r\n        payload: error\r\n    }\r\n);\r\n\r\n// ACTION LOGOUT PROFILE\r\n\r\nexport const logoutProfileRequest = () => (\r\n    {\r\n        type: LOGOUT_PROFILE_REQUEST\r\n    }\r\n);\r\n\r\nexport const logoutProfileSuccess = (data) => (\r\n    {\r\n        type: LOGOUT_PROFILE_SUCCESS,\r\n        payload: data\r\n    }\r\n);\r\n\r\nexport const logoutProfileFailure = (error) => (\r\n    {\r\n        type: LOGOUT_PROFILE_FAILURE,\r\n        payload: error\r\n    }\r\n);\r\n\r\n\r\n\r\n// ACTION FORGET PASSWORD\r\n\r\n\r\nexport const forgetPasswordRequest = (email) => (\r\n    {\r\n        type: FORGET_PASSWORD_REQUEST,\r\n        payload: {email}\r\n    }\r\n);\r\n\r\n\r\n","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\message\\actions.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\layout\\constants.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\chat\\constants.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\Admin\\Groups.js",["453"],[],"import React, { useState, useEffect } from 'react';\r\nimport Header from '../../components/Header';\r\nimport Sidebar from '../../components/Sidebar';\r\nimport { Table, Modal, ModalHeader, ModalBody, ModalFooter, Input, Button } from 'reactstrap';\r\nimport { dbGroup, Group } from \"../../variables/general\";\r\n\r\nconst Groups = () => {\r\n  const [groups, setGroups] = useState([]);\r\n  const [filteredGroups, setFilteredGroups] = useState(dbGroup);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [filterDate, setFilterDate] = useState('');\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n  const [selectedGroup, setSelectedGroup] = useState(null);\r\n  \r\n  // Fetch groups when component mounts or when filtering criteria changes\r\n  useEffect(() => {\r\n    const fetchGroups = async () => {\r\n      try {\r\n        const response = await fetch('https://localhost:7098/api/Group', {\r\n          method: 'GET',\r\n          headers: {\r\n            'Authorization': `Bearer ${localStorage.getItem('token')}`,\r\n          }\r\n        });\r\n        const data = await response.json();\r\n        if (response.ok) {\r\n          setGroups(data);\r\n          setFilteredGroups(data);\r\n        } else {\r\n          console.error('Error fetching groups:', data);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error:', error);\r\n      }\r\n    };\r\n\r\n    fetchGroups();\r\n  }, []);\r\n  \r\n  // Handle search term change\r\n  const handleSearchChange = (e) => {\r\n    const term = e.target.value.toLowerCase();\r\n    setSearchTerm(term);\r\n    filterGroups(term, filterDate);\r\n  };\r\n\r\n  // Handle date filter change\r\n  const handleDateChange = (e) => {\r\n    const selectedDate = e.target.value;\r\n    setFilterDate(selectedDate);\r\n    filterGroups(searchTerm, selectedDate);\r\n  };\r\n\r\n  // Filter groups based on search term and date\r\n  const filterGroups = (term, date) => {\r\n    const filtered = groups.filter((group) => {\r\n      const matchTerm = group.name.toLowerCase().includes(term);  // Assuming 'name' is the group name field\r\n      const matchDate = !date || (new Date(group.createdAt).toISOString().slice(0, 10) === date);\r\n      return matchTerm && matchDate;\r\n    });\r\n    setFilteredGroups(filtered);\r\n  };\r\n\r\n  // Open modal to delete group\r\n  const openDeleteModal = (group) => {\r\n    setSelectedGroup(group);\r\n    setModalOpen(true);\r\n  };\r\n\r\n  // Handle group deletion\r\n  const deleteGroupHandler = async () => {\r\n    try {\r\n      const response = await fetch(`https://localhost:7098/api/Group/delete-group`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ groupId: selectedGroup.groupId }),\r\n      });\r\n      const data = await response.json();\r\n      if (response.ok) {\r\n        alert(data.message);\r\n        setGroups(groups.filter(group => group.groupId !== selectedGroup.groupId));\r\n        setModalOpen(false);\r\n      } else {\r\n        console.error('Error deleting group:', data);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <div className=\"row\">\r\n        <div className=\"col-md-3 p-0\">\r\n          <Sidebar />\r\n        </div>\r\n\r\n        <div className=\"col-md-9\" style={{ marginLeft: '250px', width: '81%' }}>\r\n          <Header title=\"Group Management\" />\r\n          <div className=\"container-fluid\">\r\n            <h4 style={{ margin: '10px' }}>Groups Table</h4>\r\n\r\n            {/* Search input field */}\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Search Groups\"\r\n              value={searchTerm}\r\n              onChange={handleSearchChange}\r\n              className=\"form-control mb-3\"\r\n            />\r\n\r\n            {/* Date filter */}\r\n            <input\r\n              type=\"date\"\r\n              value={filterDate}\r\n              onChange={handleDateChange}\r\n              className=\"form-control mb-3\"\r\n            />\r\n\r\n            {/* Groups Table */}\r\n            <Table responsive>\r\n              <thead className=\"text-primary\">\r\n                <tr>\r\n                  {Group.map((prop, key) => (\r\n                    <th key={key} className=\"text-center\">{prop}</th>\r\n                  ))}\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {filteredGroups.map((group, key) => (\r\n                  <tr key={key}>\r\n                    {group.data.map((field, key) => (\r\n                      <td key={key} className=\"text-center\">{field}</td>\r\n                    ))}\r\n                    <td className=\"text-center\">\r\n                      <button\r\n                        className=\"ri ri-delete-bin-5-line\"\r\n                        style={{ color: 'red' }}\r\n                        onClick={() => openDeleteModal(group)}\r\n                      />\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </Table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Delete Group Modal */}\r\n      <Modal isOpen={modalOpen} toggle={() => setModalOpen(false)}>\r\n        <ModalHeader toggle={() => setModalOpen(false)}>Delete Group</ModalHeader>\r\n        <ModalBody>\r\n          Are you sure you want to delete the group: <strong>{selectedGroup ? selectedGroup.name : ''}</strong>?\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"danger\" onClick={deleteGroupHandler}>Delete</Button>\r\n          <Button color=\"secondary\" onClick={() => setModalOpen(false)}>Cancel</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Groups;\r\n",[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\Admin\\Messages.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\Auth\\Admin.js",["454","455","456","457","458","459","460","461"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\r\nimport { fetchProfileRequest } from \"../../redux/profile/actions\";\r\nimport { Col, Container, Row, List, Label, Input, Button, Dropdown, DropdownItem, DropdownMenu } from \"reactstrap\";\r\nimport \"../../assets/scss/admin.css\";\r\n\r\nconst Admin = () => {\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [isProfileChecked, setIsProfileChecked] = useState(false);\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchProfileRequest());\r\n  }, [dispatch]);\r\n\r\n  const profileState = useSelector((state) => state.Profile);\r\n  const profile = profileState.profile;\r\n  const loading = profileState.loading;\r\n\r\n\r\n\r\n\r\n\r\n\r\n  // Kiểm tra sau khi loading kết thúc và profile đã được xác nhận\r\n  useEffect(() => {\r\n    if (loading) {\r\n      setIsLoading(true); // Đang tải dữ liệu\r\n    } else if (!isProfileChecked) {\r\n      const timer = setTimeout(() => {\r\n        if (!profile || Object.keys(profile).length === 0) {\r\n          console.log(\"Không có profile, chuyển hướng...\");\r\n          navigate(\"/login\"); // Chuyển hướng nếu không có dữ liệu\r\n        } else {\r\n          console.log(\"Dữ liệu profile sẵn sàng:\", profile);\r\n        }\r\n        setIsLoading(false); // Đặt isLoading thành false sau khi hết thời gian\r\n        setIsProfileChecked(true); // Đánh dấu đã kiểm tra\r\n      }, 500); // Đợi 500ms sau khi loading kết thúc\r\n\r\n      return () => clearTimeout(timer); // Dọn dẹp bộ đếm thời gian\r\n    }\r\n  }, [loading, profile, isProfileChecked, navigate]);\r\n\r\n  // Trong khi đang tải dữ liệu (setTimeout chưa kết thúc)\r\n  if (isLoading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  // Kiểm tra sau khi hết thời gian setTimeout\r\n  if (!profile || Object.keys(profile).length === 0) {\r\n    return null; // Không hiển thị gì khi không có profile\r\n  }\r\n\r\n  // set style\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div\r\n        className=\"admin-container\"\r\n        style={{ display: \"flex\", flexDirection: \"column\", height: \"100vh\" }}\r\n      >\r\n        <header>\r\n          <h3>ADMIN CHAT APP</h3>\r\n        </header>\r\n        <div className=\"content\" style={{ flex: 1 }}>\r\n          <Row style={{ height: \"100%\" }}>\r\n            <Col className=\"bg-light border\" xs=\"3\">\r\n              <List type=\"unstyled\">\r\n                <li className=\"admin-tab\">\r\n                  <a href=\"/admin-profile\">My Profile</a>\r\n                </li>\r\n                <li className=\"admin-tab\">\r\n                  <a href=\"/admin-profile\">Users</a>\r\n                </li>\r\n                <li className=\"admin-tab\">\r\n                  <a href=\"/admin-profile\">Conversations</a>\r\n                </li>\r\n                <li className=\"admin-tab\">\r\n                  <a href=\"/admin-profile\">Chat</a>\r\n                </li>\r\n                <li className=\"admin-tab\">\r\n                  <a href=\"/admin-profile\">Statistical</a>\r\n                </li>\r\n              </List>\r\n            </Col>\r\n            <Col className=\"bg-light border\" xs=\"9\">\r\n              {/* Profile */}\r\n              {/* <div className=\"admin-profile-content\">\r\n                <h4>My Profile</h4>\r\n                <div className=\"admin-avt\">\r\n                <img src=\"https://scontent.fsgn5-5.fna.fbcdn.net/v/t39.30808-6/279708688_782037032782855_3808300635601242927_n.jpg?_nc_cat=100&ccb=1-7&_nc_sid=94e2a3&_nc_eui2=AeFmEZLWHmYlR_DDKmg3r0ieBiWfBNUUOKQGJZ8E1RQ4pKBizsZFJHTVBK2gAeW1oRDLAFCFU3EAbzO-72UYhYkN&_nc_ohc=t2C9a_PZ_SAQ7kNvgGbbx_y&_nc_zt=23&_nc_ht=scontent.fsgn5-5.fna&_nc_gid=AO_Ei8Fsj0kBn4d1k22-X-N&oh=00_AYDjvq_9-NXZQV_QlsxJWmNseizJ-qjbwYlTMT-MSvENyg&oe=67388C42\" alt=\"Description\" width=\"150\" height=\"150\" />\r\n\r\n                </div>\r\n                <Label>\r\n                  UserId\r\n                  <Input\r\n                    placeholder=\"Enter User Name\"\r\n                  ></Input>\r\n                </Label>\r\n\r\n\r\n\r\n\r\n                <div>\r\n                <Label>\r\n                  Bio\r\n                  <Input\r\n                    placeholder=\"Enter User Name\"\r\n                  ></Input>\r\n                </Label>\r\n                <Button>Edit Bio</Button>\r\n                </div>\r\n\r\n              \r\n\r\n                <div>\r\n                <Label>\r\n                  UserName\r\n                  <Input\r\n                    placeholder=\"Enter User Name\"\r\n                  ></Input>\r\n                </Label>\r\n\r\n                <Button>Edit UserName</Button>\r\n\r\n                </div>\r\n\r\n                <div>\r\n                <Label>\r\n                  Email\r\n                  <Input\r\n                    placeholder=\"Enter User Name\"\r\n                  ></Input>\r\n                </Label>\r\n                <Button>Edit Email</Button>\r\n                </div>\r\n\r\n                <div>\r\n                <Label>\r\n                  Password\r\n                  <Input\r\n                    placeholder=\"Enter User Name\"\r\n                  ></Input>\r\n                </Label>\r\n                <Label>\r\n                  New Password\r\n                  <Input\r\n                    placeholder=\"Enter User Name\"\r\n                  ></Input>\r\n                </Label>\r\n                <Label>\r\n                  Re - New Password\r\n                  <Input\r\n                    placeholder=\"Enter User Name\"\r\n                  ></Input>\r\n                </Label>\r\n\r\n                <Button>Edit Password</Button>\r\n                </div>\r\n              </div> */}\r\n\r\n              {/* User */}\r\n\r\n              {/* <div className=\"admin-profile-users\">\r\n                  <h4> Users</h4>\r\n\r\n                  <div>\r\n                    <List>\r\n                      <li>\r\n                        <Row>\r\n                          <Col>1</Col>\r\n                          <Col>UserName</Col>\r\n                          <Col>\r\n                            <select>\r\n                            <option>\r\n                              Edit\r\n                            </option>\r\n                            <option>\r\n                              Delete\r\n                            </option>\r\n                            </select>\r\n                          </Col>\r\n                        </Row>\r\n\r\n                      </li>\r\n                    </List>\r\n                  </div>\r\n              </div> */}\r\n\r\n              {/* Conversation */}\r\n\r\n              {/* Statistical */}\r\n                \r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Admin;\r\n","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\Auth\\LockScreen.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\Auth\\Register.js",["462","463","464","465","466","467","468","469","470"],[],"import React, { useEffect, useState } from \"react\";\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport withRouter from \"../../components/withRouter\";\r\n\r\nimport { useFormik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport {\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  FormGroup,\r\n  Form,\r\n  Input,\r\n  Button,\r\n  Label,\r\n  InputGroup,\r\n} from \"reactstrap\";\r\n\r\n//Import action\r\nimport { registerUser, apiError } from \"../../redux/actions\";\r\n\r\n//i18n\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\n//Import Images\r\nimport logodark from \"../../assets/images/logo-dark.png\";\r\nimport logolight from \"../../assets/images/logo-light.png\";\r\n\r\n\r\nimport { registerProfileRequest } from \"../../redux/profile/actions\";\r\n\r\n/**\r\n * Register component\r\n * @param {*} props\r\n */\r\nconst Register = () => {\r\n  const [userName, setUserName] = useState(\"username\");\r\n  const [email, setEmail] = useState(\"email@gmail.com\");\r\n  const [passwordHash, setPasswordHash] = useState(\"password\");\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n  const { t } = useTranslation();\r\n\r\n  document.title = \"Register | Chatvia React - Responsive Bootstrap 5 Chat App\";\r\n    const handleSubmit = (e)=> {\r\n        e.preventDefault();\r\n        // dispatch(registerUser(userName, passwordHash, email, navigate));\r\n        dispatch(registerProfileRequest(userName, passwordHash, email));\r\n\r\n    }\r\n\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"account-pages my-5 pt-sm-5\">\r\n        <Container>\r\n          <Row className=\"justify-content-center\">\r\n            <Col md={8} lg={6} xl={5}>\r\n              <div className=\"text-center mb-4\">\r\n                <Link to=\"/\" className=\"auth-logo mb-5 d-block\">\r\n                  <img\r\n                    src={logodark}\r\n                    alt=\"\"\r\n                    height=\"30\"\r\n                    className=\"logo logo-dark\"\r\n                  />\r\n                  <img\r\n                    src={logolight}\r\n                    alt=\"\"\r\n                    height=\"30\"\r\n                    className=\"logo logo-light\"\r\n                  />\r\n                </Link>\r\n\r\n                <h4>{t(\"Register\")}</h4>\r\n                <p className=\"text-muted mb-4\">\r\n                  {t(\"Get your Chatvia account now\")}.\r\n                </p>\r\n              </div>\r\n\r\n              <Card>\r\n                <CardBody className=\"p-4\">\r\n                  <Form onSubmit={handleSubmit}>\r\n                    <div className=\"mb-3\">\r\n                      <Label className=\"form-label\">{t(\"Email\")}</Label>\r\n                      <InputGroup className=\"input-group bg-soft-light rounded-3 mb-3\">\r\n                        <span className=\"input-group-text text-muted\">\r\n                          <i className=\"ri-mail-line\"></i>\r\n                        </span>\r\n                        <Input\r\n                          type=\"text\"\r\n                          id=\"email\"\r\n                          name=\"email\"\r\n                          className=\"form-control form-control-lg bg-soft-light border-light\"\r\n                          placeholder=\"Enter Email\"\r\n                          onChange={(e)=> setEmail(e.target.value)}\r\n                          value={email}\r\n                        />\r\n                      </InputGroup>\r\n                    </div>\r\n\r\n                    <div className=\"mb-3\">\r\n                      <Label className=\"form-label\">{t(\"Username\")}</Label>\r\n                      <InputGroup className=\"mb-3 bg-soft-light input-group-lg rounded-lg\">\r\n                        <span className=\"input-group-text border-light text-muted\">\r\n                          <i className=\"ri-user-2-line\"></i>\r\n                        </span>\r\n                        <Input\r\n                          type=\"text\"\r\n                          id=\"username\"\r\n                          name=\"username\"\r\n                          className=\"form-control form-control-lg bg-soft-light border-light\"\r\n                          placeholder=\"Enter Username\"\r\n                          onChange={(e) => setUserName(e.target.value)}\r\n                          value={userName}\r\n                        />\r\n                      </InputGroup>\r\n                    </div>\r\n\r\n                    <FormGroup className=\"mb-4\">\r\n                      <Label className=\"form-label\">{t(\"Password\")}</Label>\r\n                      <InputGroup className=\"mb-3 bg-soft-light input-group-lg rounded-lg\">\r\n                        <span className=\"input-group-text border-light text-muted\">\r\n                          <i className=\"ri-lock-2-line\"></i>\r\n                        </span>\r\n                        <Input\r\n                          type=\"password\"\r\n                          id=\"password\"\r\n                          name=\"password\"\r\n                          className=\"form-control form-control-lg bg-soft-light border-light\"\r\n                          placeholder=\"Enter Password\"\r\n                          onChange={(e)=> setPasswordHash(e.target.value)}\r\n                          value={passwordHash}\r\n                        />\r\n                      </InputGroup>\r\n                    </FormGroup>\r\n\r\n                    <div className=\"d-grid\">\r\n                      <Button\r\n                        color=\"primary\"\r\n                        block\r\n                        className=\" waves-effect waves-light\"\r\n                        type=\"submit\"\r\n                      >\r\n                        Register\r\n                      </Button>\r\n                    </div>\r\n\r\n                    <div className=\"mt-4 text-center\">\r\n                      <p className=\"text-muted mb-0\">\r\n                        {t(\"By registering you agree to the Chatvia\")}{\" \"}\r\n                        <Link to=\"#\" className=\"text-primary\">\r\n                          {t(\"Terms of Use\")}\r\n                        </Link>\r\n                      </p>\r\n                    </div>\r\n                  </Form>\r\n                </CardBody>\r\n              </Card>\r\n\r\n              <div className=\"mt-5 text-center\">\r\n                <p>\r\n                  {t(\"Already have an account\")} ?{\" \"}\r\n                  <Link to=\"login\" className=\"font-weight-medium text-primary\">\r\n                    {\" \"}\r\n                    {t(\"Signin\")}{\" \"}\r\n                  </Link>{\" \"}\r\n                </p>\r\n                <p>\r\n                  © {new Date().getFullYear()} {t(\"Chatvia\")}.{\" \"}\r\n                  {t(\"Crafted with\")}{\" \"}\r\n                  <i className=\"mdi mdi-heart text-danger\"></i>{\" \"}\r\n                  {t(\"by Themesbrand\")}\r\n                </p>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Register","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\Auth\\Logout.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\Auth\\ForgetPassword.js",["471","472","473","474","475"],[],"import React, { useEffect, useState } from 'react';\r\nimport { connect, useDispatch } from 'react-redux';\r\nimport { Link, Navigate } from 'react-router-dom';\r\n\r\n//Import formik validation\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Container, Row, Col, Card, CardBody, FormGroup, Alert, Form, Input, Button, FormFeedback, Label, InputGroup } from 'reactstrap';\r\n\r\n//Import actions and helpers\r\nimport { forgetPassword, apiError } from '../../redux/actions';\r\n\r\n//i18n\r\nimport { useTranslation } from 'react-i18next';\r\n\r\n//Import Images\r\nimport logodark from \"../../assets/images/logo-dark.png\";\r\nimport logolight from \"../../assets/images/logo-light.png\";\r\nimport { forgetPasswordRequest } from '../../redux/profile/actions';\r\n\r\n/**\r\n * Forget Password component\r\n * @param {*} props \r\n */\r\nconst ForgetPassword = (props) => {\r\n\r\n    const [email, setEmail] = useState(\"\");\r\n    const [isAlertVisible, setIsAlertVisible] = useState(false);\r\n    const { t } = useTranslation();\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    function validateEmail(email) {\r\n        // Regular expression for validating an email\r\n        const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n        return emailPattern.test(email);\r\n    }\r\n    document.title = \"Forgot Password | Chatvia React - Responsive Bootstrap 5 Chat App\"\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(email !== \"\" && validateEmail(email)){\r\n            setIsAlertVisible(false)\r\n            dispatch(forgetPasswordRequest(email));\r\n            setEmail(\"\");\r\n        }else { \r\n            console.log(\"error\")\r\n            setIsAlertVisible(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"account-pages my-5 pt-sm-5\">\r\n                <Container>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Col md={8} lg={6} xl={5}>\r\n                            <div className=\"text-center mb-4\">\r\n                                <Link to=\"/\" className=\"auth-logo mb-5 d-block\">\r\n                                    <img src={logodark} alt=\"\" height=\"30\" className=\"logo logo-dark\" />\r\n                                    <img src={logolight} alt=\"\" height=\"30\" className=\"logo logo-light\" />\r\n                                </Link>\r\n\r\n                                <h4>{t('Reset Password')}</h4>\r\n                                <p className=\"text-muted mb-4\">{t('Reset Password With Chatvia.')}</p>\r\n\r\n                            </div>\r\n\r\n                            <Card>\r\n                                <CardBody className=\"p-4\">\r\n                                \r\n                                    <div className=\"p-3\">\r\n    \r\n                                      {isAlertVisible &&  <Alert color=\"danger\" variant=\"wanning\" className=\"text-center mb-4\">{t('Email is Require')}!</Alert>}\r\n                                        <Form >\r\n\r\n                                            <FormGroup className=\"mb-4\">\r\n                                                <Label className=\"form-label\">{t('Email')}</Label>\r\n                                                <InputGroup className=\"mb-3 bg-soft-light rounded-3\">\r\n                                                    <span className=\"input-group-text border-light text-muted\">\r\n                                                        <i className=\"ri-mail-line\"></i>\r\n                                                    </span>\r\n                                                    <Input\r\n                                                        type=\"text\"\r\n                                                        id=\"email\"\r\n                                                        name=\"email\"\r\n                                                        className=\"form-control form-control-lg border-light bg-soft-light\"\r\n                                                        placeholder=\"Enter Email\"\r\n                                                        onChange={e => setEmail(e.target.value)}\r\n                                                        value={email}\r\n                                                       \r\n                                                    />\r\n                                                </InputGroup>\r\n                                            </FormGroup>\r\n\r\n                                            <div className=\"d-grid\">\r\n                                                <Button onClick={e => handleSubmit(e)} color=\"primary\" block className=\"waves-effect waves-light\" type=\"submit\">{t('Reset')}</Button>\r\n                                            </div>\r\n\r\n                                        </Form>\r\n                                    </div>\r\n                                </CardBody>\r\n                            </Card>\r\n\r\n                            <div className=\"mt-5 text-center\">\r\n                                <p>{t('Remember It')} ? <Link to=\"login\" className=\"font-weight-medium text-primary\"> {t('Signin')} </Link> </p>\r\n                                <p>© {new Date().getFullYear()} {t('Chatvia')}. {t('Crafted with')} <i className=\"mdi mdi-heart text-danger\"></i> {t('by Themesbrand')}</p>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    const { user, loading, error, passwordResetStatus } = state.Auth;\r\n    return { user, loading, error, passwordResetStatus };\r\n};\r\n\r\nexport default connect(mapStateToProps, { forgetPassword, apiError })(ForgetPassword);","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\Auth\\Login.js",["476"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { loginUser } from \"../../redux/auth/actions\";\r\nimport { loginProfileRequest } from \"../../redux/profile/actions\";\r\nimport {\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  FormGroup,\r\n  Form,\r\n  Input,\r\n  Button,\r\n  Label,\r\n  InputGroup,\r\n} from \"reactstrap\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\n//Import Images\r\nimport logodark from \"../../assets/images/logo-dark.png\";\r\nimport logolight from \"../../assets/images/logo-light.png\";\r\n//i18n\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst Login = () => {\r\n  const { t } = useTranslation();\r\n\r\n  const [userName, setUserName] = useState(\"\");\r\n  const [passwordHash, setPassword] = useState(\"\");\r\n  const [checkbox, setCheckbox] = useState(false)\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    const token = document.cookie\r\n      .split(\"; \")\r\n      .find((row) => row.startsWith(\"token=\"))\r\n      ?.split(\"=\")[1];\r\n\r\n    if (token) {\r\n      navigate('/dashboard')\r\n      console.log(\"Người dùng đang đăng nhập\");\r\n    } else {\r\n      console.log(\"Chua có token\");\r\n    }\r\n  }, [navigate]);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault(); \r\n\r\n    if (checkbox) {\r\n      localStorage.setItem(\"userName\", userName);\r\n      localStorage.setItem(\"passwordHash\", passwordHash);\r\n      localStorage.setItem(\"checkbox\", JSON.stringify(checkbox));\r\n    }\r\n    dispatch(loginProfileRequest(userName, passwordHash));\r\n\r\n\r\n    console.log(\"click\");\r\n  };\r\n\r\n  document.title = \"Chat App | Login\"\r\n\r\n  useEffect(() => {\r\n    const savedUserName = localStorage.getItem(\"userName\");\r\n    const savedPasswordHash = localStorage.getItem(\"passwordHash\");\r\n    const savedCheckbox = JSON.parse(localStorage.getItem(\"checkbox\"));\r\n\r\n    if (savedUserName && savedPasswordHash && savedCheckbox) {\r\n      setUserName(savedUserName);\r\n      setPassword(savedPasswordHash);\r\n      setCheckbox(savedCheckbox);\r\n    }\r\n  }, []);\r\n\r\n  const handleCheckboxChange = (e) => {\r\n    setCheckbox(e.target.checked);\r\n\r\n    if (!e.target.checked) {\r\n      localStorage.removeItem(\"userName\");\r\n      localStorage.removeItem(\"passwordHash\");\r\n      localStorage.removeItem(\"checkbox\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"account-pages my-5 pt-sm-5\">\r\n        <Container>\r\n          <Row className=\"justify-content-center\">\r\n            <Col md={8} lg={6} xl={5}>\r\n              <div className=\"text-center mb-4\">\r\n                <Link to=\"/\" className=\"auth-logo mb-5 d-block\">\r\n                  <img\r\n                    src={logodark}\r\n                    alt=\"\"\r\n                    height=\"30\"\r\n                    className=\"logo logo-dark\"\r\n                  />\r\n                  <img\r\n                    src={logolight}\r\n                    alt=\"\"\r\n                    height=\"30\"\r\n                    className=\"logo logo-light\"\r\n                  />\r\n                </Link>\r\n\r\n                <h4>{t(\"Sign in\")}</h4>\r\n                <p className=\"text-muted mb-4\">\r\n                  {t(\"Sign in to continue to Chatvia\")}.\r\n                </p>\r\n              </div>\r\n\r\n              <Card>\r\n                <CardBody className=\"p-4\">\r\n                  <div className=\"p-3\">\r\n                    <Form onSubmit={handleSubmit}>\r\n                      <div className=\"mb-3\">\r\n                        <Label className=\"form-label\">{t(\"Username\")}</Label>\r\n                        <InputGroup className=\"mb-3 bg-soft-light rounded-3\">\r\n                          <span\r\n                            className=\"input-group-text text-muted\"\r\n                            id=\"basic-addon3\"\r\n                          >\r\n                            <i className=\"ri-user-2-line\"></i>\r\n                          </span>\r\n                          <Input\r\n                            type=\"text\"\r\n                            id=\"email\"\r\n                            name=\"email\"\r\n                            className=\"form-control form-control-lg border-light bg-soft-light\"\r\n                            placeholder=\"Enter User Name\"\r\n                            onChange={(e) => setUserName(e.target.value)}\r\n                            value={userName}\r\n                          />\r\n                        </InputGroup>\r\n                      </div>\r\n                      <FormGroup className=\"mb-4\">\r\n                        <div className=\"float-end\">\r\n                          <Link\r\n                            to=\"/forget-password\"\r\n                            className=\"text-muted font-size-13\"\r\n                          >\r\n                            {t(\"Forgot password\")}?\r\n                          </Link>\r\n                        </div>\r\n                        <Label className=\"form-label\">{t(\"Password\")}</Label>\r\n                        <InputGroup className=\"mb-3 bg-soft-light rounded-3\">\r\n                          <span className=\"input-group-text text-muted\">\r\n                            <i className=\"ri-lock-2-line\"></i>\r\n                          </span>\r\n                          <Input\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            name=\"password\"\r\n                            className=\"form-control form-control-lg border-light bg-soft-light\"\r\n                            placeholder=\"Enter Password\"\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                            value={passwordHash}\r\n                          />\r\n                        </InputGroup>\r\n                      </FormGroup>\r\n                      <div className=\"form-check mb-4\">\r\n                        <Input\r\n                          type=\"checkbox\"\r\n                          className=\"form-check-input\"\r\n                          id=\"remember-check\"\r\n                          checked={checkbox}\r\n                          onChange={(e) => handleCheckboxChange(e)}\r\n                        />\r\n                        <Label\r\n                          className=\"form-check-label\"\r\n                          htmlFor=\"remember-check\"\r\n                        >\r\n                          {t(\"Remember me\")}\r\n                        </Label>\r\n                      </div>\r\n\r\n                      <div className=\"d-grid\">\r\n                        <Button\r\n                          color=\"primary\"\r\n                          block\r\n                          className=\" waves-effect waves-light\"\r\n                          type=\"submit\"\r\n                        >\r\n                          {t(\"Sign in\")}\r\n                        </Button>\r\n                      </div>\r\n                    </Form>\r\n                  </div>\r\n                </CardBody>\r\n              </Card>\r\n              <div className=\"mt-5 text-center\">\r\n                <p>\r\n                  {t(\"Don't have an account\")} ?{\" \"}\r\n                  <Link\r\n                    to=\"/register\"\r\n                    className=\"font-weight-medium text-primary\"\r\n                  >\r\n                    {\" \"}\r\n                    {t(\"Register now\")}{\" \"}\r\n                  </Link>{\" \"}\r\n                </p>\r\n                <p>\r\n                  © {new Date().getFullYear()} {t(\"Chatvia\")}.{\" \"}\r\n                  {t(\"Crafted with\")}{\" \"}\r\n                  <i className=\"mdi mdi-heart text-danger\"></i>{\" \"}\r\n                  {t(\"by Dinh Duong Ky\")}\r\n                </p>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\Call\\VideoCallStream.js",["477"],[],"import React, { useRef, useState, useEffect } from \"react\";\r\nimport \"../../assets/scss/room.css\";\r\nimport {  useLocation, useNavigate } from \"react-router-dom\";\r\nimport { ZegoUIKitPrebuilt } from \"@zegocloud/zego-uikit-prebuilt\";\r\nimport { useSignalR } from \"../../routes/SignalRContext\";\r\n\r\n// http://localhost:3000/room/z3xilx71731490868120?type=one-on-one\r\n\r\nconst VideoCallStream = () => {\r\n  const { onEvent } = useSignalR();\r\n\r\n  const stream = JSON.parse(localStorage.getItem(\"stream\"));\r\n  const type = localStorage.getItem(\"type\");\r\n\r\n  if (!stream || stream === null) {\r\n    window.location.href = \"/\";\r\n  }\r\n\r\n  let myName = \"\";\r\n\r\n  if(type !== \"\"){\r\n     myName =  type === \"caller\" ? stream.caller.userName : stream.receiver.userName; \r\n  }\r\n\r\n  const userId = type === \"caller\"? stream.caller.userId : stream.receiver.userId;\r\n\r\n  useEffect(() => {\r\n    onEvent(\"EndVideoCall\", (message) => {\r\n        if (userId && message && (message.caller.userId === userId || message.receiver.userId === userId)) {\r\n            localStorage.setItem(\"stream\", \"\");\r\n            window.location.href = \"/\";    \r\n        }\r\n    });\r\n  }, [onEvent,  userId]);\r\n\r\n\r\n\r\n  const handleRoomIdGenerate = () => {\r\n    const randomId = Math.random().toString(36).substring(2, 9);\r\n    const timestamp = Date.now().toString().substring(-4);\r\n    return randomId + timestamp;\r\n  };\r\n\r\n  console.log(handleRoomIdGenerate());\r\n\r\n  const APP_ID = 1264699143;\r\n  const SECRET = \"2721caae74d7e2ea073917dbb24c4deb\";\r\n\r\n  const roomId = stream.roomId;\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const zpRef = useRef(null);\r\n  const videoContainerRef = useRef(null);\r\n  const [joined, setJoined] = useState(false);\r\n  const [callType, setCallType] = useState(\"\"); // State to store the call type\r\n\r\n  // Initialize ZegoUIKit and join room on component mount\r\n  const myMeeting = (type) => {\r\n    const appID = APP_ID;\r\n    const serverSecret = SECRET;\r\n    const kitToken = ZegoUIKitPrebuilt.generateKitTokenForTest(\r\n      appID,\r\n      serverSecret,\r\n      roomId,\r\n      Date.now().toString(),\r\n      myName\r\n    );\r\n\r\n    const zp = ZegoUIKitPrebuilt.create(kitToken);\r\n    zpRef.current = zp;\r\n\r\n    zp.joinRoom({\r\n      container: videoContainerRef.current,\r\n      sharedLinks: [\r\n        {\r\n          name: \"Video Call Link\",\r\n          url:\r\n            window.location.protocol +\r\n            \"//\" +\r\n            window.location.host +\r\n            window.location.pathname +\r\n            \"?type=\" +\r\n            encodeURIComponent(type),\r\n        },\r\n      ],\r\n      scenario: {\r\n        mode:\r\n          type === \"one-on-one\"\r\n            ? ZegoUIKitPrebuilt.OneONoneCall\r\n            : ZegoUIKitPrebuilt.GroupCall,\r\n      },\r\n      maxUsers: type === \"one-on-one\" ? 2 : 10,\r\n      onJoinRoom: () => {\r\n        setJoined(true);\r\n      },\r\n      onLeaveRoom: () => {\r\n        \r\n\r\n        fetch(\"https://localhost:7098/api/Stream/endvideocall\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            roomId: roomId,\r\n            caller: stream.caller.userId,\r\n            receiver: stream.receiver.userId,\r\n          }),\r\n        })\r\n          .then((response) => {\r\n            if (!response.ok) {\r\n              throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n            return response.json();\r\n          })\r\n          .then((data) => {\r\n            console.log(\"Success:\", data);\r\n          })\r\n          .catch((error) => {\r\n            console.error(\"Error:\", error);\r\n          });\r\n        navigate(\"/\");\r\n\r\n      },\r\n    });\r\n  };\r\n\r\n  // Handle exit from the room\r\n  const handleExit = () => {\r\n    if (zpRef.current) {\r\n      zpRef.current.destroy();\r\n    }\r\n    navigate(\"/\");\r\n  };\r\n\r\n  // On component mount, extract call type from location and initialize meeting\r\n  useEffect(() => {\r\n    const query = new URLSearchParams(location.search);\r\n    const type = query.get(\"type\");\r\n\r\n    setCallType(type); // Update state with call type\r\n  }, [location.search]);\r\n\r\n  // Initialize meeting after callType state is set\r\n  useEffect(() => {\r\n    if (callType) {\r\n      myMeeting(callType);\r\n    }\r\n\r\n    // Cleanup function for component unmount\r\n    return () => {\r\n      if (zpRef.current) {\r\n        zpRef.current.destroy();\r\n      }\r\n    };\r\n  }, [callType, roomId, navigate]);\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"room-container\">\r\n      {!joined && (\r\n        <>\r\n          <header className=\"room-header\">\r\n            {callType === \"one-on-one\"\r\n              ? \"One-on-One Video Call\"\r\n              : \"Group Video Call\"}\r\n          </header>\r\n          <button className=\"exit-button\" onClick={handleExit}>\r\n            Exit\r\n          </button>\r\n        </>\r\n      )}\r\n      <div ref={videoContainerRef} className=\"video-container\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VideoCallStream;\r\n","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\Call\\CallPending.js",["478","479"],[],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Button } from \"reactstrap\";\r\nimport { useSignalR } from \"../../routes/SignalRContext\";\r\n\r\nconst CallPending = () => {\r\n\r\n    const {onEvent } = useSignalR();\r\n\r\n    const [isCall, setIsCall] = useState(false);\r\n\r\n    const stream = JSON.parse(localStorage.getItem('stream'));\r\n\r\n    if(!stream){\r\n        window.location.href = '/';\r\n    }\r\n      \r\n    const userId = localStorage.getItem(\"userId\");\r\n\r\n\r\n    useEffect(() => {\r\n        onEvent(\"CancelVideoCall\", (message) => {\r\n            if (userId && message && message.receiver.userId === userId) {\r\n                localStorage.setItem(\"stream\", \"\");\r\n                window.location.href = \"/\";    \r\n            }\r\n        });\r\n      }, [onEvent, userId]);\r\n    const handleAccept = ()=> {\r\n\r\n\r\n        // fetch SERVER\r\n\r\n        fetch(\"https://localhost:7098/api/Stream/acceptvideocall\", {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n              roomId: stream.roomId,\r\n              caller: stream.caller.userId,\r\n              receiver: stream.caller.userId,\r\n            }),\r\n          })\r\n            .then((response) => {\r\n              if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n              }\r\n              return response.json();\r\n            })\r\n            .then((data) => {\r\n              console.log(\"Success:\", data);\r\n            })\r\n            .catch((error) => {\r\n              console.error(\"Error:\", error);\r\n            });\r\n        // //Navigate\r\n        window.location.href = '/video-call-stream?type=one-on-one'\r\n    }\r\n\r\n    const handleCancel = ()=> {\r\n        fetch(\"https://localhost:7098/api/Stream/refusevideocall\", {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n              roomId: stream.roomId,\r\n              caller: stream.caller.userId,\r\n              receiver: stream.caller.userId,\r\n            }),\r\n          })\r\n            .then((response) => {\r\n              if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n              }\r\n              return response.json();\r\n            })\r\n            .then((data) => {\r\n              console.log(\"Success:\", data);\r\n            })\r\n            .catch((error) => {\r\n              console.error(\"Error:\", error);\r\n            });\r\n\r\n        localStorage.setItem(\"stream\", \"\");\r\n        window.location.href = '/'\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"call-pending\" style={\r\n            {display: \"flex\",\r\n             justifyContent: 'center',\r\n              alignItems: 'center',\r\n              width: \"100%\",\r\n               height: \"100vh\",\r\n                background: \"#C0C0C0\",\r\n                \r\n                }}>\r\n            <div \r\n            className=\"pending-container\"\r\n            style={\r\n                {background: \"white\",\r\n                     padding: \"40px\",\r\n                      display: \"flex\",\r\n                       flexDirection: \"column\",\r\n                        alignItems: 'center',\r\n                        borderRadius: \"20px\"\r\n                    }}\r\n            >\r\n                    <h2 className=\"pending Name\">\r\n                        {/* {callValue.caller.fullName} */}\r\n                    </h2>\r\n                    <p>Calling...</p>\r\n\r\n\r\n                    <div className=\"pending-controls\"\r\n                        style={{display: \"flex\", gap: \"10px\"}}  \r\n                    >\r\n                      {!isCall &&   <Button onClick={handleAccept}>Nghe Máy</Button> }\r\n                        <Button onClick={handleCancel}>Hủy</Button>\r\n                    </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CallPending;","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\actions.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\Call\\VoiceCall.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\Call\\VideoCall.js",["480"],[],"import React, { useRef, useState } from \"react\";\r\nimport AgoraRTC from \"agora-rtc-sdk-ng\";\r\nimport \"../../assets/scss/call.css\";\r\nimport { Button } from \"reactstrap\";\r\nimport \"../../assets/scss/custom/plugins/icons/_remixicon.scss\";\r\n\r\nconst VideoCall = () => {\r\n\r\n  const joinButtonRef = useRef(null);\r\n\r\n  const value = localStorage.getItem('call');\r\n  if(value === \"\"){\r\n    window.location.href = '/';\r\n  }\r\n\r\n  const callValue = JSON.parse(value);\r\n\r\n \r\n\r\n  const TOKEN = callValue?.call?.token;\r\n  const CHANNEL = callValue?.call?.channel;\r\n  const [APP_ID, setAPP_ID] = useState('6696c4ce70d44f1ca1730089a4f474da');\r\n\r\n  \r\n  const client = AgoraRTC.createClient({ mode: \"rtc\", codec: \"vp8\" });\r\n\r\n  let localTracks = [];\r\n  let remoteUsers = {};\r\n\r\n  let joinAndDisplayLocalStream = async () => {\r\n    try {\r\n      client.on('user-published', handleUserJoined);\r\n      client.on('user-left', handUserLeft);\r\n      let UID = await client.join(APP_ID, CHANNEL, TOKEN, null);\r\n      localTracks = await AgoraRTC.createMicrophoneAndCameraTracks();\r\n\r\n      // Create video container for local stream\r\n      const playerContainer = document.createElement(\"div\");\r\n      playerContainer.className = \"video-container\";\r\n      playerContainer.id = `user-container-${UID}`;\r\n\r\n      const player = document.createElement(\"div\");\r\n      player.className = \"video-player\";\r\n      player.id = `user-${UID}`;\r\n\r\n      playerContainer.appendChild(player);\r\n      document.getElementById(\"video-streams\").appendChild(playerContainer);\r\n\r\n      localTracks[1].play(`user-${UID}`);\r\n      await client.publish([localTracks[0], localTracks[1]]);\r\n    } catch (error) {\r\n      console.error(\"Error joining the stream:\", error);\r\n    }\r\n  };\r\n\r\n  let joinStream = async () => {\r\n    await joinAndDisplayLocalStream();\r\n    document.getElementById(\"join-btn\").style.display = \"none\";\r\n    document.getElementById(\"stream-controls\").style.display = \"flex\";\r\n  };\r\n\r\n  let handleUserJoined = async (user, mediaType) => {\r\n    remoteUsers[user.uid] = user;\r\n    await client.subscribe(user, mediaType);\r\n\r\n    if (mediaType === 'video') {\r\n      let playerContainer = document.getElementById(`user-container-${user.uid}`);\r\n      if (playerContainer) {\r\n        playerContainer.remove();\r\n      }\r\n\r\n      playerContainer = document.createElement(\"div\");\r\n      playerContainer.className = \"video-container\";\r\n      playerContainer.id = `user-container-${user.uid}`;\r\n\r\n      const player = document.createElement(\"div\");\r\n      player.className = \"video-player\";\r\n      player.id = `user-${user.uid}`;\r\n\r\n      playerContainer.appendChild(player);\r\n      document.getElementById(\"video-streams\").appendChild(playerContainer);\r\n\r\n      user.videoTrack.play(`user-${user.uid}`);\r\n    }\r\n\r\n    if (mediaType === 'audio') {\r\n      user.audioTrack.play();\r\n    }\r\n  };\r\n\r\n  let handUserLeft = async (user) => {\r\n    delete remoteUsers[user.uid];\r\n    document.getElementById(`user-container-${user.uid}`).remove();\r\n  };\r\n\r\n  let leaveAndRemoveLocalStream = async () => {\r\n\r\n    for (let i = 0; i < localTracks.length; i++) {\r\n      localTracks[i].stop();\r\n      localTracks[i].close();\r\n    }\r\n    await client.leave();\r\n    document.getElementById('join-btn').style.display = 'block';\r\n    document.getElementById('stream-controls').style.display = 'none';\r\n    document.getElementById('video-streams').innerHTML = '';\r\n\r\n    localStorage.setItem('call',\"\");\r\n    window.location.href   = '/';\r\n  };\r\n\r\n  let toggleMic = async (e) => {\r\n    if (localTracks[0] && localTracks[0].muted) {\r\n      await localTracks[0].setMuted(false);\r\n      e.target.style.backgroundColor = '#d82e2e';\r\n    } else {\r\n      await localTracks[0].setMuted(true);\r\n      e.target.style.backgroundColor = '#976a1c';\r\n    }\r\n  };\r\n\r\n  let toggleCamera = async (e) => {\r\n    if (localTracks[1]) {\r\n      if (localTracks[1].muted) {\r\n        await localTracks[1].setMuted(false);\r\n        e.target.style.background = '#976a1c';\r\n      } else {\r\n        await localTracks[1].setMuted(true);\r\n        e.target.style.background = '#d82e2e';\r\n      }\r\n    } else {\r\n      console.error(\"Camera track is not available.\");\r\n    }\r\n  };\r\n\r\n\r\n\r\n \r\n\r\n  \r\njoinStream()\r\n\r\n  return (\r\n    <div className=\"video-chat-app\">\r\n      <button id=\"join-btn\" onClick={joinStream} ref={joinButtonRef}>\r\n        Join Stream\r\n      </button>\r\n      <div id=\"stream-wrapper\" style={{ height: \"100vh\", padding: \"10px\", background: '#c9c9c9' }}>\r\n        <div id=\"video-streams\"></div>\r\n\r\n        <div id=\"stream-controls\" style={{ display: \"none\" }}>\r\n          <Button className=\"btn-controls\" onClick={toggleMic} id=\"mic-btn\">\r\n            Mic\r\n          </Button>\r\n          <Button className=\"btn-controls\" onClick={toggleCamera} id=\"camera-btn\">\r\n            Cam\r\n          </Button>\r\n          <Button className=\"btn-controls\" onClick={leaveAndRemoveLocalStream} id=\"leave-btn\">\r\n            <i className=\"ri-phone-line\"></i>\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VideoCall;\r\n","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\Admin\\AdminDashboard.js",["481","482"],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\Admin\\Users.js",["483","484","485","486"],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\StarterPage\\index.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\layouts\\AuthLayout\\LeftSidebarMenu.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\components\\withRouter.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\dashboard\\index.js",["487","488","489","490","491","492","493","494","495","496","497","498","499"],[],"import React, { useEffect } from \"react\";\r\n// Import Components\r\nimport ChatLeftSidebar from \"./ChatLeftSidebar\";\r\nimport UserChat from \"./UserChat/index\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { fetchContactRequest } from \"../../redux/contact/action\";\r\nimport { fetchConversationRequest } from \"../../redux/conversation/action\";\r\nimport { fetchMessageRequest } from \"../../redux/message/actions\";\r\nimport { fetchProfileRequest } from \"../../redux/profile/actions\";\r\nimport { loginProfileRequest } from \"../../redux/profile/actions\";\r\nimport { loginUser } from \"../../redux/actions\";\r\nimport { useState } from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nimport { HubConnectionBuilder } from \"@microsoft/signalr\";\r\nimport { selectedMessage, sendStreamVideoCall, sendValueVideoCall } from \"../../redux/control/actions\";\r\n\r\nimport { useSignalR } from \"../../routes/SignalRContext\";\r\nconst Index = () => {\r\n  const users = useSelector((state) => state.Chat.users);\r\n\r\n  useEffect(() => {\r\n    document.title = \"Dashboard | Chatvia\";\r\n  }, []);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const [connection, setConnection] = useState(null);\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchContactRequest());\r\n    dispatch(fetchMessageRequest());\r\n    dispatch(fetchProfileRequest());\r\n  }, [dispatch]);\r\n\r\n  const userId = useSelector((state) => state.Profile?.profile)?.userId;\r\n\r\n  const { sendUserId, onEvent } = useSignalR();\r\n\r\n\r\n  useEffect(()=> {\r\n      localStorage.setItem(\"userId\", userId)\r\n  },[userId])\r\n\r\n  useEffect(() => {\r\n    onEvent(\"ReceiveMessage\", (msg) => {\r\n      console.log(\"Message Received:\", msg);\r\n      dispatch(fetchMessageRequest());\r\n    });\r\n    return () => {\r\n      if (onEvent) onEvent(\"ReceiveMessage\", () => {});\r\n    };\r\n  }, [onEvent, dispatch]);\r\n\r\n  useEffect(() => {\r\n    onEvent(\"RequestCall\", (message) => {\r\n\r\n        console.log(\"Có cuộc gọi\")\r\n      if (message.call.receiver === userId) {\r\n        localStorage.setItem(\"call\", JSON.stringify(message));\r\n        window.location.href = \"/call-pending\";\r\n      }\r\n    });\r\n    return () => {\r\n      if (onEvent) onEvent(\"RequestCall\", () => {});\r\n    };\r\n  }, [onEvent]);\r\n\r\n  useEffect(() => {\r\n    onEvent(\"AcceptCall\", (message) => {\r\n      if (message.call.caller === userId) {\r\n        localStorage.setItem(\"call\", JSON.stringify(message));\r\n        window.location.href = \"/video-call\";\r\n      }\r\n    });\r\n    return () => {\r\n      if (onEvent) onEvent(\"AcceptCall\", () => {});\r\n    };\r\n  }, [onEvent]);\r\n\r\n  useEffect(() => {\r\n    onEvent(\"CancelCall\", (message) => {\r\n      if (message.call.caller === userId) {\r\n        console.log(\"Đã từ chối\");\r\n        localStorage.setItem(\"call\", \"\");\r\n        window.location.href = \"/\";\r\n      }\r\n    });\r\n    return () => {\r\n      if (onEvent) onEvent(\"CancelCall\", () => {});\r\n    };\r\n  }, [onEvent]);\r\n\r\nuseEffect(() => {\r\n  onEvent(\"StreamStartVideoCall\", (message) => {\r\n      console.log(\"Dữ liệu trước khi dispatch:\", message);  // Log dữ liệu gửi đi\r\n      if (userId && message && message.receiver.userId === userId) {\r\n          localStorage.setItem(\"stream\", JSON.stringify(message));\r\n          localStorage.setItem(\"type\",\"receiver\")\r\n          window.location.href = \"/call-pending\";\r\n          \r\n      }\r\n  });\r\n}, [onEvent, dispatch, userId]);\r\n\r\n\r\nuseEffect(() => {\r\n  onEvent(\"AcceptVideoCall\", (message) => {\r\n      console.log(\"Dữ liệu trước khi dispatch:\", message);  // Log dữ liệu gửi đi\r\n      if (userId && message && message.caller.userId === userId) {\r\n          localStorage.setItem(\"stream\", JSON.stringify(message));\r\n          localStorage.setItem(\"type\",\"caller\")\r\n          window.location.href = \"/video-call-stream?type=one-on-one\";    \r\n      }\r\n  });\r\n}, [onEvent, dispatch, userId]);\r\n\r\n\r\nuseEffect(() => {\r\n  onEvent(\"RefuseVideoCall\", (message) => {\r\n      if (userId && message && message.caller.userId === userId) {\r\n          localStorage.setItem(\"stream\", \"\");\r\n          localStorage.setItem(\"type\",\"caller\")\r\n          window.location.href = \"/\";    \r\n      }\r\n  });\r\n}, [onEvent, dispatch, userId]);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    if (userId) {\r\n      sendUserId(userId);\r\n      console.log(\"send \", userId);\r\n    }\r\n  }, [userId, sendUserId]);\r\n\r\n  // useEffect(() => {\r\n\r\n  //     const newConnection = new HubConnectionBuilder()\r\n  //         .withUrl(\"https://localhost:7098/chathub\") // Đảm bảo URL trùng với backend của bạn\r\n  //         .withAutomaticReconnect()\r\n  //         .build();\r\n\r\n  //     setConnection(newConnection);\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //     if (connection && userId) {\r\n  //         // Định nghĩa các sự kiện nhận tin nhắn từ server\r\n\r\n  //         // Bắt đầu kết nối và gửi userId khi kết nối thành công\r\n  //         connection.start()\r\n  //             .then(async () => {\r\n  //                 console.log(\"Kết nối SignalR thành công!\");\r\n\r\n  //                 // Lấy Connection ID từ server\r\n  //                 const connectionId = await connection.invoke(\"GetConnectionId\");\r\n  //                 console.log(\"Connection ID của tôi:\", connectionId);\r\n\r\n  //                 // Gửi userId đến server để lưu kèm Connection ID\r\n  //                 await connection.invoke(\"StoreUserId\", userId);\r\n\r\n  //                 // Lang nghe cac su kien\r\n\r\n  //                 connection.on(\"ReceiveMessage\", (message) => {\r\n  //                     console.log(\"Nhận tin nhắn từ server:\", message);\r\n  //                     // Xử lý tin nhắn nhận được (ví dụ: dispatch đến Redux hoặc cập nhật state)\r\n  //                     dispatch(fetchMessageRequest());\r\n  //                 });\r\n\r\n  //                 connection.on(\"AcceptCall\", (message) => {\r\n  //                     console.log(\"Nhận tin nhắn từ server:\", message);\r\n  //                     // Xử lý tin nhắn nhận được (ví dụ: dispatch đến Redux hoặc cập nhật state)\r\n  //                     // dispatch(fetchMessageRequest());\r\n  //                     if(message.call.caller === userId){\r\n\r\n  //                         console.log(\"đã chấp nhận\")\r\n  //                         localStorage.setItem('call',JSON.stringify(message));\r\n  //                         window.location.href = '/video-call';\r\n  //                     }\r\n  //                 });\r\n\r\n  //                 connection.on(\"CancelCall\", (message) => {\r\n  //                     console.log(\"Nhận tin nhắn từ server:\", message);\r\n  //                     if(message.call.caller === userId){\r\n\r\n  //                         console.log(\"Đã từ chối\")\r\n  //                         localStorage.setItem('call',\"\");\r\n  //                         window.location.href = '/';\r\n  //                     }\r\n  //                 });\r\n\r\n  //                 connection.on(\"RequestCall\", (message) => {\r\n  //                     if(message.call.receiver === userId){\r\n  //                         localStorage.setItem('call',JSON.stringify(message));\r\n  //                         window.location.href = '/call-pending';\r\n  //                     }\r\n  //                 });\r\n\r\n  //             })\r\n  //             .catch((err) => console.error(\"Kết nối SignalR thất bại:\", err));\r\n\r\n  //         // Xử lý ngắt kết nối khi component unmount\r\n  //         return () => {\r\n  //             connection.stop().then(() => console.log(\"Kết nối SignalR đã được ngắt.\"));\r\n  //         };\r\n  //     }\r\n  // }, [connection, dispatch, userId]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {/* chat left sidebar */}\r\n      <ChatLeftSidebar recentChatList={users} />\r\n\r\n      {/* user chat */}\r\n      <UserChat recentChatList={users} />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Index;\r\n","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\components\\Sidebar.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\components\\Header.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\i18n.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\chat\\actions.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\layout\\actions.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\dashboard\\ChatLeftSidebar.js",["500","501","502","503"],[],"import React, { useRef, useEffect, useState } from 'react';\r\nimport { connect, useSelector } from \"react-redux\";\r\n\r\nimport { TabContent, TabPane } from \"reactstrap\";\r\n\r\n//Import Components\r\nimport Profile from \"./Tabs/Profile\";\r\nimport Chats from \"./Tabs/Chats\";\r\nimport Groups from \"./Tabs/Groups\";\r\nimport Contacts from \"./Tabs/Contacts\";\r\nimport Settings from \"./Tabs/Settings\";\r\n\r\nfunction ChatLeftSidebar(props) {\r\n\r\n\r\n    const activeTab = props.activeTab;\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"chat-leftsidebar me-lg-1\">\r\n\r\n                <TabContent activeTab={activeTab}  >\r\n                    {/* Start Profile tab-pane */}\r\n                    <TabPane tabId=\"profile\" id=\"pills-user\"   >\r\n                        {/* profile content  */}\r\n                        <Profile />\r\n                    </TabPane>\r\n                    {/* End Profile tab-pane  */}\r\n\r\n                    {/* Start chats tab-pane  */}\r\n                    <TabPane tabId=\"chat\" id=\"pills-chat\" >\r\n                        {/* chats content */}\r\n                        <Chats recentChatList={props.recentChatList} />\r\n                    </TabPane>\r\n                    {/* End chats tab-pane */}\r\n\r\n                    {/* Start groups tab-pane */}\r\n                    <TabPane tabId=\"group\" id=\"pills-groups\">\r\n                        {/* Groups content */}\r\n                        <Groups />\r\n                    </TabPane>\r\n                    {/* End groups tab-pane */}\r\n\r\n                    {/* Start contacts tab-pane */}\r\n                    <TabPane tabId=\"contacts\" id=\"pills-contacts\">\r\n                        {/* Contact content */}\r\n                        <Contacts />\r\n                    </TabPane>\r\n                    {/* End contacts tab-pane */}\r\n\r\n                    {/* Start settings tab-pane */}\r\n                    <TabPane tabId=\"settings\" id=\"pills-setting\">\r\n                        {/* Settings content */}\r\n                        <Settings />\r\n                    </TabPane>\r\n                    {/* End settings tab-pane */}\r\n                </TabContent>\r\n                {/* end tab content */}\r\n\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nconst mapStatetoProps = state => {\r\n    return {\r\n        ...state.Layout\r\n    };\r\n};\r\n\r\nexport default connect(mapStatetoProps, null)(ChatLeftSidebar);","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\variables\\general.js",["504","505","506"],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\control\\actions.js",["507"],[],"import { SELECTED_MESSAGE, SEND_STREAM_VIDEO_CALL, SEND_VALUE_VIDEO_CALL } from \"../actionTypes\";\r\n\r\nexport const selectedMessage = (otherId) => (\r\n    {\r\n        type: SELECTED_MESSAGE,\r\n        payload: otherId\r\n    }\r\n)\r\nexport const sendValueVideoCall = (channelName, token, caller, receiver) => (\r\n    {\r\n        type: SEND_VALUE_VIDEO_CALL,\r\n        payload: {channelName, token,caller,receiver}\r\n    }\r\n)\r\n\r\nexport const sendStreamVideoCall = (message) => ({\r\n    type: \"SEND_STREAM_VIDEO_CALL\",\r\n    payload: message,\r\n});","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\dashboard\\UserChat\\index.js",["508","509","510","511","512","513","514","515","516","517"],[],"\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport {\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n  UncontrolledDropdown,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  CardBody,\r\n  Button,\r\n  ModalFooter,\r\n} from \"reactstrap\";\r\nimport { connect, useSelector } from \"react-redux\";\r\n\r\nimport SimpleBar from \"simplebar-react\";\r\n\r\nimport withRouter from \"../../../components/withRouter\";\r\n\r\n//Import Components\r\nimport UserProfileSidebar from \"../../../components/UserProfileSidebar\";\r\nimport SelectContact from \"../../../components/SelectContact\";\r\nimport UserHead from \"./UserHead\";\r\nimport ImageList from \"./ImageList\";\r\nimport ChatInput from \"./ChatInput\";\r\nimport FileList from \"./FileList\";\r\n\r\n//actions\r\nimport { openUserSidebar, setFullUser } from \"../../../redux/actions\";\r\n\r\n//Import Images\r\nimport avatar4 from \"../../../assets/images/users/avatar-4.jpg\";\r\nimport avatar1 from \"../../../assets/images/users/avatar-1.jpg\";\r\n\r\n//i18n\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport \"../../../assets/scss/test.css\";\r\n\r\nfunction UserChat(props) {\r\n  const ref = useRef();\r\n\r\n  const [modal, setModal] = useState(false);\r\n\r\n  /* intilize t variable for multi language implementation */\r\n  const { t } = useTranslation();\r\n\r\n  //demo conversation messages\r\n  //userType must be required\r\n  const [allUsers] = useState(props.recentChatList);\r\n  const [chatMessages, setchatMessages] = useState(\r\n    props.recentChatList[props.active_user].messages\r\n  );\r\n\r\n  useEffect(() => {\r\n    setchatMessages(props.recentChatList[props.active_user].messages);\r\n    // ref.current.recalculate();\r\n    // if (ref.current.el) {\r\n    //     ref.current.getScrollElement().scrollTop = ref.current.getScrollElement().scrollHeight;\r\n    // }\r\n  }, [props.active_user, props.recentChatList]);\r\n\r\n  const toggle = () => setModal(!modal);\r\n\r\n  const addMessage = (message, type) => {\r\n    var messageObj = null;\r\n\r\n    let d = new Date();\r\n    var n = d.getSeconds();\r\n\r\n    //matches the message type is text, file or image, and create object according to it\r\n    switch (type) {\r\n      case \"textMessage\":\r\n        messageObj = {\r\n          id: chatMessages.length + 1,\r\n          message: message,\r\n          time: \"00:\" + n,\r\n          userType: \"sender\",\r\n          image: avatar4,\r\n          isFileMessage: false,\r\n          isImageMessage: false,\r\n        };\r\n        break;\r\n\r\n      case \"fileMessage\":\r\n        messageObj = {\r\n          id: chatMessages.length + 1,\r\n          message: \"file\",\r\n          fileMessage: message.name,\r\n          size: message.size,\r\n          time: \"00:\" + n,\r\n          userType: \"sender\",\r\n          image: avatar4,\r\n          isFileMessage: true,\r\n          isImageMessage: false,\r\n        };\r\n        break;\r\n\r\n      case \"imageMessage\":\r\n        var imageMessage = [{ image: message }];\r\n\r\n        messageObj = {\r\n          id: chatMessages.length + 1,\r\n          message: \"image\",\r\n          imageMessage: imageMessage,\r\n          size: message.size,\r\n          time: \"00:\" + n,\r\n          userType: \"sender\",\r\n          image: avatar4,\r\n          isImageMessage: true,\r\n          isFileMessage: false,\r\n        };\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n\r\n    //add message object to chat\r\n    setchatMessages([...chatMessages, messageObj]);\r\n\r\n    let copyallUsers = [...allUsers];\r\n    copyallUsers[props.active_user].messages = [...chatMessages, messageObj];\r\n    copyallUsers[props.active_user].isTyping = false;\r\n    props.setFullUser(copyallUsers);\r\n\r\n    scrolltoBottom();\r\n  };\r\n\r\n  function scrolltoBottom() {\r\n    if (ref.current.el) {\r\n      ref.current.getScrollElement().scrollTop =\r\n        ref.current.getScrollElement().scrollHeight;\r\n    }\r\n  }\r\n\r\n  const deleteMessage = (id) => {\r\n    let conversation = chatMessages;\r\n\r\n    var filtered = conversation.filter(function (item) {\r\n      return item.id !== id;\r\n    });\r\n\r\n    setchatMessages(filtered);\r\n  };\r\n\r\n  const dataArray = [\r\n    {\r\n      conversation: {\r\n        userId: \"d41fc8b7-589b-4b43-8daf-6031e8d6d608\",\r\n        otherId: {\r\n          userId: \"2e6c7ba8-b5db-44dc-b0dc-8cec6f6a8165\",\r\n          userName: \"username13\",\r\n          email: \"email@gmail.com1\",\r\n          avatarUrl:\r\n            \"https://localhost:7266/uploads/ab69ecb7-9541-4562-8507-11995089cc9c_Screenshot%202024-08-06%20220146.png\",\r\n          bio: \"This is my bio\",\r\n          createdAt: \"2024-10-27T13:59:35.514Z\",\r\n          fullName: \"email@gmail.com1\",\r\n          permission: \"user\",\r\n        },\r\n      },\r\n      messages: [\r\n        {\r\n          id: {\r\n            timestamp: 1730117604,\r\n            creationTime: \"2024-10-28T12:13:24Z\",\r\n          },\r\n          senderId: \"d41fc8b7-589b-4b43-8daf-6031e8d6d608\",\r\n          receiverId: \"2e6c7ba8-b5db-44dc-b0dc-8cec6f6a8165\",\r\n          content: \"Hello, how are you?\",\r\n          messageType: \"text\",\r\n          mediaUrl: null,\r\n          sentAt: \"2024-10-22T10:30:00Z\",\r\n          readAt: \"2024-10-22T10:32:00Z\",\r\n          status: \"sent\",\r\n          isGroupMessage: false,\r\n        },\r\n        {\r\n          id: {\r\n            timestamp: 1730117604,\r\n            creationTime: \"2024-10-28T12:13:24Z\",\r\n          },\r\n          senderId: \"2e6c7ba8-b5db-44dc-b0dc-8cec6f6a8165\",\r\n          receiverId: \"d41fc8b7-589b-4b43-8daf-6031e8d6d608\",\r\n          content: \"I am fine, thank you!\",\r\n          messageType: \"text\",\r\n          mediaUrl: null,\r\n          sentAt: \"2024-10-22T10:35:00Z\",\r\n          readAt: \"2024-10-22T10:36:00Z\",\r\n          status: \"sent\",\r\n          isGroupMessage: false,\r\n        },\r\n        {\r\n          id: {\r\n            timestamp: 1730117604,\r\n            creationTime: \"2024-10-28T12:13:24Z\",\r\n          },\r\n          senderId: \"d41fc8b7-589b-4b43-8daf-6031e8d6d608\",\r\n          receiverId: \"2e6c7ba8-b5db-44dc-b0dc-8cec6f6a8165\",\r\n          content: \"What are you up to today?\",\r\n          messageType: \"text\",\r\n          mediaUrl: null,\r\n          sentAt: \"2024-10-22T10:40:00Z\",\r\n          readAt: null,\r\n          status: \"sent\",\r\n          isGroupMessage: false,\r\n        },\r\n        {\r\n          id: {\r\n            timestamp: 1730275698,\r\n            creationTime: \"2024-10-30T08:08:18Z\",\r\n          },\r\n          senderId: \"d41fc8b7-589b-4b43-8daf-6031e8d6d608\",\r\n          receiverId: \"2e6c7ba8-b5db-44dc-b0dc-8cec6f6a8165\",\r\n          content: \"Tôi Không khỏe bạn khỏe không không :v\",\r\n          messageType: \"text\",\r\n          mediaUrl: null,\r\n          sentAt: \"2024-10-30T08:08:18.228Z\",\r\n          readAt: null,\r\n          status: \"sent\",\r\n          isGroupMessage: false,\r\n        },\r\n        {\r\n          id: {\r\n            timestamp: 1730276140,\r\n            creationTime: \"2024-10-30T08:15:40Z\",\r\n          },\r\n          senderId: \"d41fc8b7-589b-4b43-8daf-6031e8d6d608\",\r\n          receiverId: \"2e6c7ba8-b5db-44dc-b0dc-8cec6f6a8165\",\r\n          content: \"Tôi Không khỏe bạn khỏe không không :v\",\r\n          messageType: \"text\",\r\n          mediaUrl: null,\r\n          sentAt: \"2024-10-30T08:15:40.2Z\",\r\n          readAt: null,\r\n          status: \"sent\",\r\n          isGroupMessage: false,\r\n        },\r\n        {\r\n          id: {\r\n            timestamp: 1730276395,\r\n            creationTime: \"2024-10-30T08:19:55Z\",\r\n          },\r\n          senderId: \"2e6c7ba8-b5db-44dc-b0dc-8cec6f6a8165\",\r\n          receiverId: \"d41fc8b7-589b-4b43-8daf-6031e8d6d608\",\r\n          content: \"Tôi đây\",\r\n          messageType: \"text\",\r\n          mediaUrl: null,\r\n          sentAt: \"2024-10-30T08:19:55.574Z\",\r\n          readAt: null,\r\n          status: \"sent\",\r\n          isGroupMessage: false,\r\n        },\r\n        {\r\n          id: {\r\n            timestamp: 1729757161,\r\n            creationTime: \"2024-10-24T08:06:01Z\",\r\n          },\r\n          senderId: \"2e6c7ba8-b5db-44dc-b0dc-8cec6f6a8165\",\r\n          receiverId: \"d41fc8b7-589b-4b43-8daf-6031e8d6d608\",\r\n          content:\r\n            \"5c063a69-de56-441a-a315-4759af37f1fb_Screenshot 2024-08-06 220146.png\",\r\n          messageType: \"image\",\r\n          mediaUrl:\r\n            \"https://scontent.fsgn5-15.fna.fbcdn.net/v/t39.30808-6/279730753_1674149106267314_2460136207078036044_n.jpg?_nc_cat=101&ccb=1-7&_nc_sid=94e2a3&_nc_eui2=AeF_y8iPX07KS55lq59v1iPJbylYTCXb3e1vKVhMJdvd7cPoaaUlGp0KVrSzdXMT-ir4go9OdXWqjETUmWCCRdT6&_nc_ohc=FQD8XpZ79XAQ7kNvgFic8PZ&_nc_zt=23&_nc_ht=scontent.fsgn5-15.fna&_nc_gid=A6z6vrg8rgwDi640XVGghzW&oh=00_AYCtHGctPpWxjcFLaCdS__uu1GMgVXtiRQqvKfSDQdKqSA&oe=672C01EB\",\r\n          sentAt: \"2024-10-24T08:06:01.068Z\",\r\n          readAt: null,\r\n          status: \"sent\",\r\n          isGroupMessage: false,\r\n        },\r\n      ],\r\n    },\r\n  ];\r\n\r\n  const selectedState = useSelector((state)=> state.Control?.otherId);\r\n  const messageState = useSelector((state)=> state.Message?.messages);\r\n  const profileState = useSelector((state)=> state.Profile?.profile)\r\n\r\n  console.log(profileState)\r\n  const otherProfileState = messageState.find(message => message?.conversation?.otherId?.userId === selectedState)?.conversation?.otherId;\r\n  console.log(otherProfileState)\r\n\r\n  var messageOtherUser = messageState.find(message => message?.conversation?.otherId?.userId === selectedState);\r\n\r\n\r\n  const mess = [messageOtherUser];\r\n  \r\n\r\n  const bottomRef = useRef(null);\r\n  useEffect(() => {\r\n      // Cuộn đến phần tử cuối cùng khi danh sách tin nhắn thay đổi\r\n      if (bottomRef.current) {\r\n        bottomRef.current.scrollIntoView({ behavior: 'auto' });\r\n      }\r\n    }, [messageState, selectedState]);\r\n    if(!selectedState){\r\n      return (\r\n        <div></div>\r\n      )\r\n    }\r\n\r\n    function getFileName(url) {\r\n      // Biểu thức chính quy để tìm GUID với phần tên file theo sau dấu gạch dưới\r\n      const regex = /.*[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}_(.+)$/;\r\n      const match = url.match(regex);\r\n      \r\n      // Nếu có GUID, lấy phần tên file sau GUID\r\n      // Nếu không có GUID, lấy phần cuối cùng của URL\r\n      return match ? match[1] : url.split('/').pop();\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"user-chat w-100 overflow-hidden\">\r\n        <div className=\"d-lg-flex\">\r\n          <div\r\n            className={\r\n              props.userSidebar\r\n                ? \"w-70 overflow-hidden position-relative\"\r\n                : \"w-100 overflow-hidden position-relative\"\r\n            }\r\n          >\r\n            {/* render user head */}\r\n            <UserHead />\r\n            <SimpleBar id=\"messages\" className=\"chat-conversation p-5 p-lg-4\" style={{background: \"#d4d4d4\"}}>\r\n              <div\r\n                className=\"chat-container\"\r\n                style={{\r\n                  maxHeight: \"100%\",\r\n                  overflowY: \"auto\",\r\n                  padding: \"1rem\",\r\n                }}\r\n              >\r\n                <ul className=\"chat-list\">\r\n                  {mess && mess.map((item, index) => (\r\n                    <li key={index} className=\"chat-item\">\r\n                      <div className=\"conversation-list\">\r\n                        <div className=\"user-chat-content\">\r\n                          {/* Hiển thị tin nhắn */}\r\n                          <ul className=\"message-list\">\r\n                            {item?.messages.map((message, msgIndex) => {\r\n                              // Sử dụng senderId hoặc receiverId làm tên người gửi\r\n                            \r\n\r\n                              return (\r\n                                <li\r\n                                  key={msgIndex}\r\n                                  className={`message-item ${\r\n                                    message.senderId ===\r\n                                    item.conversation.userId\r\n                                      ? \"sender\"\r\n                                      : \"receiver\"\r\n                                  }`}\r\n                                >\r\n                                  <div className=\"ctext-wrap\">\r\n                                    {message.senderId ===\r\n                                    item.conversation.userId ? (\r\n                                      \"\"\r\n                                    ) : (\r\n                                      <div className=\"message-avatar\">\r\n                                        {/* Avatar cố định cho mỗi tin nhắn, kích thước 80x80 */}\r\n                                        <img\r\n                                          src={otherProfileState?.avatarUrl}\r\n                                          alt=\"message-avatar\"\r\n                                          style={{\r\n                                            width: \"80px\",\r\n                                            height: \"80px\",\r\n                                            borderRadius: \"50%\",\r\n                                          }}\r\n                                        />\r\n                                      </div>\r\n                                    )}\r\n\r\n                                    <div\r\n                                      className={`ctext-wrap-content ${\r\n                                        message.senderId ===\r\n                                        item.conversation.userId\r\n                                          ? \"receiverh\"\r\n                                          : \"senderh\"\r\n                                      }`}\r\n                                    >\r\n                                      {/* Tên người gửi */}\r\n                                      <p className=\"sender-name\">\r\n                                        {message.senderId === profileState?.userId  ? profileState.userName : otherProfileState?.userName}\r\n                                      </p>\r\n\r\n                                      {/* Nội dung tin nhắn */}\r\n                                      {message.messageType === \"text\" && (\r\n                                        <p>{message.content}</p>\r\n                                      )}\r\n                                      {message.messageType === \"file\" && (\r\n                                        <div className=\"file-message\">\r\n                                          <a\r\n                                            href={message.mediaUrl}\r\n                                            target=\"_blank\"\r\n                                            rel=\"noopener noreferrer\"\r\n                                          >\r\n                                            {getFileName(message.mediaUrl)}\r\n                                            \r\n                                          </a>\r\n                                        </div>\r\n                                      )}\r\n\r\n                                      {message.messageType === \"image\" && (\r\n                                        <div className=\"image-message\">\r\n                                          <a\r\n                                           href={message.mediaUrl}\r\n                                           target=\"_blank\"\r\n                                           rel=\"noopener noreferrer\"\r\n                                          >\r\n\r\n                                          <img\r\n                                            style={{\r\n                                              maxWidth: \"500px\",\r\n                                              maxHeight: \"500px\",\r\n                                            }}\r\n                                            src={message.mediaUrl}\r\n                                            alt={message.content}\r\n                                            className=\"message-image\"\r\n                                          />\r\n                                          </a>\r\n                                        </div>\r\n                                      )}\r\n\r\n                                      {/* Thời gian gửi */}\r\n                                      <span className=\"chat-time\">\r\n                                        <i className=\"ri-time-line\"></i>{\" \"}\r\n                                        {new Date(\r\n                                          message.sentAt\r\n                                        ).toLocaleTimeString()}\r\n                                      </span>\r\n                                    </div>\r\n                                    {message.senderId ===\r\n                                    item.conversation.userId ? (\r\n                                      <div className=\"message-avatar\">\r\n                                        {/* Avatar cố định cho mỗi tin nhắn, kích thước 80x80 */}\r\n                                        <img\r\n                                          src={profileState?.avatarUrl}\r\n                                          alt=\"message-avatar\"\r\n                                          style={{\r\n                                            width: \"80px\",\r\n                                            height: \"80px\",\r\n                                            borderRadius: \"50%\",\r\n                                          }}\r\n                                        />\r\n                                      </div>\r\n                                    ) : (\r\n                                      \"\"\r\n                                    )}\r\n                                  </div>\r\n                                </li>\r\n                              );\r\n                            })}\r\n                          </ul>\r\n                        </div>\r\n                      </div>\r\n                    </li>\r\n                  ))}\r\n\r\n\r\n                  {/* Cuộn xuống tới đây */}\r\n\r\n                  <div ref={bottomRef} />\r\n                </ul>\r\n              </div>\r\n            </SimpleBar>\r\n\r\n            <Modal backdrop=\"static\" isOpen={modal} centered toggle={toggle}>\r\n              <ModalHeader toggle={toggle}>Forward to...</ModalHeader>\r\n              <ModalBody>\r\n                <CardBody className=\"p-2\">\r\n                  <SimpleBar style={{ maxHeight: \"200px\" }}>\r\n                    <SelectContact handleCheck={() => {}} />\r\n                  </SimpleBar>\r\n                  <ModalFooter className=\"border-0\">\r\n                    <Button color=\"primary\">Forward</Button>\r\n                  </ModalFooter>\r\n                </CardBody>\r\n              </ModalBody>\r\n            </Modal>\r\n\r\n            <ChatInput onaddMessage={addMessage} />\r\n          </div>\r\n\r\n          <UserProfileSidebar\r\n            activeUser={props.recentChatList[props.active_user]}\r\n          />\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { active_user } = state.Chat;\r\n  const { userSidebar } = state.Layout;\r\n  return { active_user, userSidebar };\r\n};\r\n\r\nexport default withRouter(\r\n  connect(mapStateToProps, { openUserSidebar, setFullUser })(UserChat)\r\n);\r\n","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\components\\UserProfileSidebar.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\components\\SelectContact.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\dashboard\\UserChat\\UserHead.js",["518","519","520","521"],[],"import React, { useState, useRef } from \"react\";\r\nimport {\r\n  Dropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n  Button,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Modal,\r\n  ModalBody,\r\n} from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { openUserSidebar, setFullUser } from \"../../../redux/actions\";\r\n\r\n//import images\r\nimport user from \"../../../assets/images/users/avatar-4.jpg\";\r\nimport { sendValueVideoCall } from \"../../../redux/control/actions\";\r\n\r\n\r\nconst UserHead = (props) => {\r\n  const [dropdownOpen, setDropdownOpen] = useState(false);\r\n  const [dropdownOpen1, setDropdownOpen1] = useState(false);\r\n  const [Callmodal, setCallModal] = useState(false);\r\n  const [Videomodal, setVideoModal] = useState(false);\r\n\r\n  const toggle = () => setDropdownOpen(!dropdownOpen);\r\n  const toggle1 = () => setDropdownOpen1(!dropdownOpen1);\r\n  const toggleCallModal = () => setCallModal(!Callmodal);\r\n  const toggleVideoModal = () => setVideoModal(!Videomodal);\r\n\r\n  const timeoutRef = useRef(null);\r\n\r\n  const [isCalling, setIsCalling] = useState(false)\r\n\r\n  const openUserSidebar = (e) => {\r\n    e.preventDefault();\r\n    props.openUserSidebar();\r\n  };\r\n\r\n  function closeUserChat(e) {\r\n    e.preventDefault();\r\n    var userChat = document.getElementsByClassName(\"user-chat\");\r\n    if (userChat) {\r\n      userChat[0].classList.remove(\"user-chat-show\");\r\n    }\r\n  }\r\n\r\n  function deleteMessage() {}\r\n\r\n  // const new code\r\n  const messageState = useSelector((state) => state.Message.messages);\r\n  const selectedMessage = useSelector((state) => state.Control.otherId);\r\n  const userId = useSelector((state) => state.Profile?.profile.userId);\r\n\r\n \r\n  \r\n\r\n  \r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const otherUser = messageState.find(\r\n    (message) => message.conversation.otherId.userId === selectedMessage\r\n  )?.conversation?.otherId;\r\n  console.log(otherUser);\r\n\r\n  function generateRandomChannelName() {\r\n    const characters = \"abcdefghijklmnopqrstuvwxyz\";\r\n    let result = \"\";\r\n    for (let i = 0; i < 6; i++) {\r\n      const randomIndex = Math.floor(Math.random() * characters.length);\r\n      result += characters[randomIndex];\r\n    }\r\n    return result;\r\n  }\r\n\r\n  async function getToken(channelName) {\r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:8080/access_token?channelName=${channelName}&role=publisher&expireTime=3600`\r\n      );\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      const data = await response.json();\r\n      const token = data.token; // Assign the token to a variable\r\n      console.log(\"Token:\", token); // Log the token to the console\r\n      return token; // Return the token from the function\r\n    } catch (error) {\r\n      console.error(\"Error fetching token:\", error);\r\n      return null; // Return null in case of error\r\n    }\r\n  }\r\n\r\n\r\n  const handleRoomIdGenerate = () => {\r\n    const randomId = Math.random().toString(36).substring(2, 9);\r\n    const timestamp = Date.now().toString().substring(-4);\r\n    return randomId + timestamp;\r\n  };\r\n\r\n  const roomId = handleRoomIdGenerate();\r\n\r\n  const startVideoCall = async () => {\r\n    setIsCalling(true)\r\n    if (otherUser) {\r\n      const channel = generateRandomChannelName();\r\n      const token = await getToken(channel) + \"\";\r\n      const caller = userId + \"\";\r\n      const receiver = otherUser.userId + \"\";\r\n      // Gửi yêu cầu POST\r\n\r\n\r\n      fetch(\"https://localhost:7098/api/Stream/startvideocall\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          roomId: roomId,\r\n          caller: caller,\r\n          receiver: receiver,\r\n        }),\r\n      })\r\n        .then((response) => {\r\n          if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n          }\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          console.log(\"Success:\", data);\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error:\", error);\r\n        });\r\n     timeoutRef.current =  setTimeout(() => {\r\n        \r\n        if(window.location.href !== 'http://localhost:3000/video-call'){\r\n            console.log(window.location.href);\r\n            window.location.href = \"/\";\r\n        }\r\n      }, 30 * 1000);\r\n    }\r\n  };\r\n\r\n  const handleCancelCall = async ()=> {\r\n    toggleVideoModal();\r\n\r\n    if(isCalling){\r\n\r\n      const caller = userId + \"\";\r\n      const receiver = otherUser.userId + \"\";\r\n\r\n      fetch(\"https://localhost:7098/api/Stream/cancelvideocall\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          roomId: roomId,\r\n          caller: caller,\r\n          receiver: receiver,\r\n        }),\r\n      })\r\n        .then((response) => {\r\n          if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n          }\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          console.log(\"Success:\", data);\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error:\", error);\r\n        });\r\n\r\n        if (timeoutRef.current) {\r\n          clearTimeout(timeoutRef.current); // Hủy setTimeout\r\n          timeoutRef.current = null; // Đặt về null để tránh gọi lại\r\n        }\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"p-3 p-lg-4 border-bottom user-chat-topbar\">\r\n        <Row className=\"align-items-center\">\r\n          <Col sm={4} xs={8}>\r\n            <div className=\"d-flex align-items-center\">\r\n              <div className=\"d-block d-lg-none me-2 ms-0\">\r\n                <Link\r\n                  to=\"#\"\r\n                  onClick={(e) => closeUserChat(e)}\r\n                  className=\"user-chat-remove text-muted font-size-16 p-2\"\r\n                >\r\n                  <i className=\"ri-arrow-left-s-line\"></i>\r\n                </Link>\r\n              </div>\r\n              {otherUser?.avatarUrl !== \"\" ? (\r\n                <div className=\"me-3 ms-0\">\r\n                  <img\r\n                    src={otherUser?.avatarUrl}\r\n                    className=\"rounded-circle avatar-xs\"\r\n                    alt=\"chatvia\"\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <div className=\"chat-user-img align-self-center me-3\">\r\n                  <div className=\"avatar-xs\">\r\n                    <span className=\"avatar-title rounded-circle bg-primary-subtle text-primary\">\r\n                      {otherUser?.userName.charAt(0)}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              <div className=\"flex-grow-1 overflow-hidden\">\r\n                <h5 className=\"font-size-16 mb-0 text-truncate\">\r\n                  {/* OPEN SIDEBAR HÊHÊ */}\r\n                  <Link\r\n                    to=\"#\"\r\n                    onClick={(e) => openUserSidebar(e)}\r\n                    className=\"text-reset user-profile-show\"\r\n                  >\r\n                    {otherUser?.fullName}\r\n                  </Link>\r\n\r\n                  {/* Status Online, */}\r\n                  {(() => {\r\n                    switch (\"online\") {\r\n                      case \"online\":\r\n                        return (\r\n                          <>\r\n                            <i className=\"ri-record-circle-fill font-size-10 text-success d-inline-block ms-2\"></i>\r\n                          </>\r\n                        );\r\n\r\n                      case \"away\":\r\n                        return (\r\n                          <>\r\n                            <i className=\"ri-record-circle-fill font-size-10 text-warning d-inline-block ms-1\"></i>\r\n                          </>\r\n                        );\r\n\r\n                      case \"offline\":\r\n                        return (\r\n                          <>\r\n                            <i className=\"ri-record-circle-fill font-size-10 text-secondary d-inline-block ms-1\"></i>\r\n                          </>\r\n                        );\r\n\r\n                      default:\r\n                        return;\r\n                    }\r\n                  })()}\r\n                </h5>\r\n              </div>\r\n            </div>\r\n          </Col>\r\n          <Col sm={8} xs={4}>\r\n            <ul className=\"list-inline user-chat-nav text-end mb-0\">\r\n              <li className=\"list-inline-item\">\r\n                <Dropdown isOpen={dropdownOpen} toggle={toggle}>\r\n                  <DropdownToggle\r\n                    color=\"none\"\r\n                    className=\"btn nav-btn \"\r\n                    type=\"button\"\r\n                  >\r\n                    <i className=\"ri-search-line\"></i>\r\n                  </DropdownToggle>\r\n                  <DropdownMenu className=\"p-0 dropdown-menu-end dropdown-menu-md\">\r\n                    <div className=\"search-box p-2\">\r\n                      <Input\r\n                        type=\"text\"\r\n                        className=\"form-control bg-light border-0\"\r\n                        placeholder=\"Search..\"\r\n                      />\r\n                    </div>\r\n                  </DropdownMenu>\r\n                </Dropdown>\r\n              </li>\r\n              <li className=\"list-inline-item d-none d-lg-inline-block me-2 ms-0\">\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={toggleCallModal}\r\n                  className=\"btn nav-btn\"\r\n                >\r\n                  <i className=\"ri-phone-line\"></i>\r\n                </button>\r\n              </li>\r\n              <li className=\"list-inline-item d-none d-lg-inline-block me-2 ms-0\">\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={toggleVideoModal}\r\n                  className=\"btn nav-btn\"\r\n                >\r\n                  <i className=\"ri-vidicon-line\"></i>\r\n                </button>\r\n              </li>\r\n\r\n              <li className=\"list-inline-item d-none d-lg-inline-block me-2 ms-0\">\r\n                <Button\r\n                  type=\"button\"\r\n                  color=\"none\"\r\n                  onClick={(e) => openUserSidebar(e)}\r\n                  className=\"nav-btn user-profile-show\"\r\n                >\r\n                  <i className=\"ri-user-2-line\"></i>\r\n                </Button>\r\n              </li>\r\n\r\n              <li className=\"list-inline-item\">\r\n                <Dropdown isOpen={dropdownOpen1} toggle={toggle1}>\r\n                  <DropdownToggle\r\n                    className=\"btn nav-btn \"\r\n                    color=\"none\"\r\n                    type=\"button\"\r\n                  >\r\n                    <i className=\"ri-more-fill\"></i>\r\n                  </DropdownToggle>\r\n                  <DropdownMenu className=\"dropdown-menu-end\">\r\n                    <DropdownItem\r\n                      className=\"d-block d-lg-none user-profile-show\"\r\n                      onClick={(e) => openUserSidebar(e)}\r\n                    >\r\n                      View profile{\" \"}\r\n                      <i className=\"ri-user-2-line float-end text-muted\"></i>\r\n                    </DropdownItem>\r\n                    <DropdownItem>\r\n                      Archive{\" \"}\r\n                      <i className=\"ri-archive-line float-end text-muted\"></i>\r\n                    </DropdownItem>\r\n                    <DropdownItem>\r\n                      Muted{\" \"}\r\n                      <i className=\"ri-volume-mute-line float-end text-muted\"></i>\r\n                    </DropdownItem>\r\n                    <DropdownItem onClick={(e) => deleteMessage(e)}>\r\n                      Delete{\" \"}\r\n                      <i className=\"ri-delete-bin-line float-end text-muted\"></i>\r\n                    </DropdownItem>\r\n                  </DropdownMenu>\r\n                </Dropdown>\r\n              </li>\r\n            </ul>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n\r\n      {/* Start Audiocall Modal */}\r\n      <Modal tabIndex=\"-1\" isOpen={Callmodal} toggle={toggleCallModal} centered>\r\n        <ModalBody>\r\n          <div className=\"text-center p-4\">\r\n            <div className=\"avatar-lg mx-auto mb-4\">\r\n              <img\r\n                src={otherUser?.avatarUrl}\r\n                alt=\"\"\r\n                className=\"img-thumbnail rounded-circle\"\r\n              />\r\n            </div>\r\n\r\n            <h5 className=\"text-truncate\">{otherUser?.fullName}</h5>\r\n            <p className=\"text-muted\">Start Audio Call</p>\r\n\r\n            <div className=\"mt-5\">\r\n              <ul className=\"list-inline mb-1\">\r\n                <li className=\"list-inline-item px-2 me-2 ms-0\">\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-danger avatar-sm rounded-circle\"\r\n                    onClick={toggleCallModal}\r\n                  >\r\n                    <span className=\"avatar-title bg-transparent font-size-20\">\r\n                      <i className=\"ri-close-fill\"></i>\r\n                    </span>\r\n                  </button>\r\n                </li>\r\n                <li className=\"list-inline-item px-2\">\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-success avatar-sm rounded-circle\"\r\n                  >\r\n                    <span className=\"avatar-title bg-transparent font-size-20\">\r\n                      <i className=\"ri-phone-fill\"></i>\r\n                    </span>\r\n                  </button>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </ModalBody>\r\n      </Modal>\r\n\r\n      {/* Start VideoCall Modal */}\r\n      <Modal\r\n        tabIndex=\"-1\"\r\n        isOpen={Videomodal}\r\n        toggle={toggleVideoModal}\r\n        centered\r\n      >\r\n        <ModalBody>\r\n          <div className=\"text-center p-4\">\r\n            <div className=\"avatar-lg mx-auto mb-4\">\r\n              <img\r\n                src={otherUser?.avatarUrl}\r\n                alt=\"\"\r\n                className=\"img-thumbnail rounded-circle\"\r\n              />\r\n            </div>\r\n\r\n            <h5 className=\"text-truncate\">{otherUser?.fullName}</h5>\r\n            <p className=\"text-muted\">{isCalling ? \"Calling...\" : \"Start Video Call\"}</p>\r\n\r\n            <div className=\"mt-5\">\r\n              <ul className=\"list-inline mb-1\">\r\n                <li className=\"list-inline-item px-2 me-2 ms-0\">\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-danger avatar-sm rounded-circle\"\r\n                    onClick={() => {\r\n                      handleCancelCall();\r\n                    }}\r\n                  >\r\n                    <span className=\"avatar-title bg-transparent font-size-20\">\r\n                      <i className=\"ri-close-fill\"></i>\r\n                    </span>\r\n                  </button>\r\n                </li>\r\n                <li className=\"list-inline-item px-2\">\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-success avatar-sm rounded-circle\"\r\n                    onClick={startVideoCall}\r\n                  >\r\n                    <span className=\"avatar-title bg-transparent font-size-20\">\r\n                      <i className=\"ri-vidicon-fill\"></i>\r\n                    </span>\r\n                  </button>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </ModalBody>\r\n      </Modal>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { users, active_user } = state.Chat;\r\n  return { ...state.Layout, users, active_user };\r\n};\r\n\r\nexport default connect(mapStateToProps, { openUserSidebar, setFullUser })(\r\n  UserHead\r\n);\r\n","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\dashboard\\Tabs\\Profile.js",["522"],[],"import React, { useState } from \"react\";\r\nimport {\r\n  Dropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n  Card,\r\n} from \"reactstrap\";\r\n\r\n//Import components\r\nimport CustomCollapse from \"../../../components/CustomCollapse\";\r\nimport AttachedFiles from \"../../../components/AttachedFiles\";\r\n\r\n//Import Images\r\nimport avatar1 from \"../../../assets/images/users/avatar-1.jpg\";\r\n\r\n//i18n\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useSelector } from \"react-redux\";\r\nfunction Profile(props) {\r\n  const [dropdownOpen, setDropdownOpen] = useState(false);\r\n  const [isOpen1, setIsOpen1] = useState(true);\r\n  const [isOpen2, setIsOpen2] = useState(false);\r\n  const [files] = useState([\r\n    { name: \"Admin-A.zip\", size: \"12.5 MB\", thumbnail: \"ri-file-text-fill\" },\r\n    { name: \"Image-1.jpg\", size: \"4.2 MB\", thumbnail: \"ri-image-fill\" },\r\n    { name: \"Image-2.jpg\", size: \"3.1 MB\", thumbnail: \"ri-image-fill\" },\r\n    { name: \"Landing-A.zip\", size: \"6.7 MB\", thumbnail: \"ri-file-text-fill\" },\r\n  ]);\r\n\r\n  /* intilize t variable for multi language implementation */\r\n  const { t } = useTranslation();\r\n\r\n  const toggleCollapse1 = () => {\r\n    setIsOpen1(!isOpen1);\r\n    setIsOpen2(false);\r\n  };\r\n\r\n  const toggleCollapse2 = () => {\r\n    setIsOpen2(!isOpen2);\r\n    setIsOpen1(false);\r\n  };\r\n\r\n  const toggle = () => setDropdownOpen(!dropdownOpen);\r\n  const profileState = useSelector((state)=> state.Profile);\r\n  return (\r\n    <React.Fragment>\r\n      <div>\r\n        <div className=\"px-4 pt-4\">\r\n          <div className=\"user-chat-nav float-end\">\r\n            <Dropdown isOpen={dropdownOpen} toggle={toggle}>\r\n              <DropdownToggle\r\n                tag=\"a\"\r\n                className=\"font-size-18 text-muted dropdown-toggle\"\r\n              >\r\n                <i className=\"ri-more-2-fill\"></i>\r\n              </DropdownToggle>\r\n              <DropdownMenu className=\"dropdown-menu-end\">\r\n                <DropdownItem>{t(\"Edit\")}</DropdownItem>\r\n                <DropdownItem>{t(\"Action\")}</DropdownItem>\r\n                <DropdownItem divider />\r\n                <DropdownItem>{t(\"Another action\")}</DropdownItem>\r\n              </DropdownMenu>\r\n            </Dropdown>\r\n          </div>\r\n          <h4 className=\"mb-0\">{t(\"My Profile\")}</h4>\r\n        </div>\r\n\r\n        <div className=\"text-center p-4 border-bottom\">\r\n          <div className=\"mb-4\">\r\n            <img\r\n              src={profileState.profile.avatarUrl}\r\n              className=\"rounded-circle avatar-lg img-thumbnail\"\r\n              alt=\"chatvia\"\r\n            />\r\n          </div>\r\n\r\n          <h5 className=\"font-size-16 mb-1 text-truncate\">\r\n            {t(profileState.profile.userName)}\r\n          </h5>\r\n          <p className=\"text-muted text-truncate mb-1\">\r\n            <i className=\"ri-record-circle-fill font-size-10 text-success me-1 d-inline-block\"></i>{\" \"}\r\n            {t(\"Active\")}\r\n          </p>\r\n        </div>\r\n        {/* End profile user  */}\r\n        \r\n        {/* Start user-profile-desc */}\r\n        <div className=\"p-4 user-profile-desc\">\r\n          <div className=\"text-muted\">\r\n            <p className=\"mb-4\">\r\n              {t(\r\n                \"If several languages coalesce, the grammar of the resulting language is more simple and regular than that of the individual.\"\r\n              )}\r\n            </p>\r\n          </div>\r\n\r\n          <div id=\"profile-user-accordion-1\" className=\"custom-accordion\">\r\n            <Card className=\"shadow-none border mb-2\">\r\n              {/* import collaps */}\r\n              <CustomCollapse\r\n                title=\"About\"\r\n                iconClass=\"ri-user-2-line\"\r\n                isOpen={isOpen1}\r\n                toggleCollapse={toggleCollapse1}\r\n              >\r\n                <div>\r\n                  <p className=\"text-muted mb-1\">{t(\"Name\")}</p>\r\n                  <h5 className=\"font-size-14\">{t(profileState.profile.userName)}</h5>\r\n                </div>\r\n\r\n                <div className=\"mt-4\">\r\n                  <p className=\"text-muted mb-1\">{t(\"Email\")}</p>\r\n                  <h5 className=\"font-size-14\">{t(profileState.profile.email)}</h5>\r\n                </div>\r\n\r\n                <div className=\"mt-4\">\r\n                  <p className=\"text-muted mb-1\">{t(\"Date of Joining\")}</p>\r\n                  <h5 className=\"font-size-14\">{t(new Date(profileState.profile.createdAt).toLocaleString())}</h5>\r\n                </div>\r\n\r\n                <div className=\"mt-4\">\r\n                  <p className=\"text-muted mb-1\">{t(\"Location\")}</p>\r\n                  <h5 className=\"font-size-14 mb-0\">{t(\"Viet Nam\")}</h5>\r\n                </div>\r\n              </CustomCollapse>\r\n            </Card>\r\n            {/* End About card  */}\r\n\r\n            <Card className=\"mb-1 shadow-none border\">\r\n              {/* import collaps */}\r\n              <CustomCollapse\r\n                title=\"Attached Files\"\r\n                iconClass=\"ri-attachment-line\"\r\n                isOpen={isOpen2}\r\n                toggleCollapse={toggleCollapse2}\r\n              >\r\n                {/* attached files */}\r\n                <AttachedFiles files={files} />\r\n              </CustomCollapse>\r\n            </Card>\r\n            {/* End Attached Files card  */}\r\n          </div>\r\n          {/* end profile-user-accordion  */}\r\n        </div>\r\n        {/* end user-profile-desc  */}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Profile;\r\n","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\dashboard\\UserChat\\ChatInput.js",["523","524","525","526","527","528","529"],[],"import React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  UncontrolledTooltip,\r\n  ButtonDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  Label,\r\n  Form,\r\n} from \"reactstrap\";\r\nimport EmojiPicker from \"emoji-picker-react\";\r\nimport {\r\n  sendMessageRequest,\r\n  sendFileRequest,\r\n  fetchMessageRequest,\r\n} from \"../../../redux/message/actions\";\r\nimport { getCookie } from \"../../../redux/actionTypes\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nfunction ChatInput(props) {\r\n  const [content, setContent] = useState(\"\");\r\n  const [messageType, setMessageType] = useState(\"text\");\r\n  const [mediaUrl, setMediaUrl] = useState(null);\r\n  const [isGroup, setIsGroup] = useState(false);\r\n  const [isOpen, setisOpen] = useState(false);\r\n  const [file, setFile] = useState(null);\r\n  const [receiver, setReceiver] = useState(\"\");\r\n  const [isVisible, setIsVisible] = useState(false);\r\n  const [fileNameInput, setFileNameInput] = useState('');\r\n\r\n  const [imgSrc, setImgSrc] = useState(null)\r\n  const toggle = () => setisOpen(!isOpen);\r\n\r\n  const onEmojiClick = (event) => {\r\n    // settextMessage(textMessage + event.emoji);\r\n    setContent(content + event.emoji);\r\n  };\r\n\r\n  const dispatch = useDispatch();\r\n  // senderId, receiverId, messageType, content, mediaUrl, isGroup\r\n\r\n  const senderId = useSelector((state) => state.Profile.profile.userId);\r\n  const receiverId = useSelector((state) => state.Control.otherId);\r\n\r\n  const sendMessage = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (file == null) {\r\n      if (content !== \"\") {\r\n        dispatch(\r\n          sendMessageRequest(\r\n            receiverId,\r\n            messageType,\r\n            content,\r\n            mediaUrl,\r\n            isGroup\r\n          )\r\n        );\r\n        setContent(\"\");\r\n      }\r\n    } else {\r\n      if (file) {\r\n        \r\n        const formData = new FormData();\r\n        formData.append(\"token\", getCookie(\"token\"));\r\n        formData.append(\"receiver\", receiverId);\r\n        formData.append(\"file\", file);\r\n        formData.append(\"isgroup\", isGroup);\r\n\r\n        try {\r\n          const response = fetch(\r\n            \"https://localhost:7098/api/Message/sendfile\",\r\n            {\r\n              method: \"POST\",\r\n              body: formData,\r\n            }\r\n          );\r\n          if (!response.ok) {\r\n            throw new Error(\"Failed to send file\");\r\n          }\r\n          const data = response.json();\r\n          console.log(\"File sent successfully:\", data);\r\n          dispatch(fetchMessageRequest());\r\n          \r\n        } catch (error) {}\r\n      }\r\n    }\r\n\r\n    setFile(null);\r\n    setIsVisible(false);\r\n  };\r\n  const handleFileChange = async (event) => {\r\n    setFile(event.target.files[0]);\r\n\r\n    const file = event.target.files[0]; // Lấy file đầu tiên từ input\r\n\r\n    if (file) {\r\n      setIsVisible(true)\r\n      setFileNameInput(file.name)\r\n        const reader = new FileReader(); // Tạo FileReader\r\n\r\n        reader.onload = (e) => {\r\n            setImgSrc(e.target.result); // Cập nhật state với URL hình ảnh\r\n        };\r\n\r\n        reader.readAsDataURL(file); // Đọc file và chuyển đổi thành URL hình ảnh\r\n    }else {\r\n      setFile(null);\r\n      setIsVisible(false)\r\n    }\r\n  };\r\n  const handleVisible = ()=> {\r\n    setFile(null);\r\n    setIsVisible(!isVisible);\r\n  }\r\n\r\n\r\n  function isImageFileByExtension(file) {\r\n    const validExtensions = ['jpg', 'jpeg', 'png', 'gif', 'webp', 'svg', 'bmp', 'tiff'];\r\n    // Kiểm tra nếu file không phải là null hoặc undefined\r\n    if (!file) {\r\n        return false;\r\n    }\r\n    // Lấy phần mở rộng của file\r\n    const fileExtension = file.name.split('.').pop().toLowerCase();\r\n    // Kiểm tra xem phần mở rộng có nằm trong danh sách hợp lệ hay không\r\n    return validExtensions.includes(fileExtension);\r\n}\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"chat-input-section p-3 p-lg-4 border-top mb-0 \" style={{position: \"relative\"}}>\r\n      {isVisible && (  <div className=\"modal-input-file\"  \r\n            style={{ padding: \"10px\",position: \"absolute\", top: -120, right: 50}}\r\n            >\r\n                    <Button \r\n                    onClick={handleVisible}\r\n                    style={{background: \"#e83e8c\", color: \"black\", position: \"absolute\", right: -20, top: -10} }>\r\n                    <i style={{color: \"black\", fontWeight: \"bold\"}} className=\"ri-close-line\"></i>\r\n                    </Button>\r\n\r\n                   {file  ? \r\n                    isImageFileByExtension(file) ? \r\n                    <div>\r\n                        <img alt=\"model\" className=\"img-load-file\" src={imgSrc} style={{width: \"90px\", height: \"90px\"}}/>\r\n                    </div>\r\n                    :\r\n                    <div style={{paddingRight: 30}}>\r\n\r\n                      {fileNameInput}\r\n                    </div>\r\n                   : null } \r\n\r\n\r\n            </div>)}\r\n          \r\n\r\n        <Form onSubmit={(e) => sendMessage(e)}>\r\n          <Row className=\"g-0\">\r\n            <Col>\r\n              <div>\r\n                <Input\r\n                  type=\"text\"\r\n                  value={content}\r\n                  onChange={(e) => setContent(e.target.value)}\r\n                  className=\"form-control form-control-lg bg-light border-light\"\r\n                  placeholder=\"Enter Message...\"\r\n                />\r\n              </div>\r\n            </Col>\r\n            <Col xs=\"auto\">\r\n              <div className=\"chat-input-links ms-md-2\">\r\n                <ul className=\"list-inline mb-0 ms-0\">\r\n                  <li className=\"list-inline-item\">\r\n                    <ButtonDropdown\r\n                      className=\"emoji-dropdown\"\r\n                      direction=\"up\"\r\n                      isOpen={isOpen}\r\n                      toggle={toggle}\r\n                    >\r\n                      <DropdownToggle\r\n                        id=\"emoji\"\r\n                        color=\"link\"\r\n                        className=\"text-decoration-none font-size-16 btn-lg waves-effect\"\r\n                      >\r\n                        <i className=\"ri-emotion-happy-line\"></i>\r\n                      </DropdownToggle>\r\n                      <DropdownMenu className=\"dropdown-menu-end\">\r\n                        <EmojiPicker onEmojiClick={onEmojiClick} />\r\n                      </DropdownMenu>\r\n                    </ButtonDropdown>\r\n                    <UncontrolledTooltip target=\"emoji\" placement=\"top\">\r\n                      Emoji\r\n                    </UncontrolledTooltip>\r\n                  </li>\r\n                  <li className=\"list-inline-item input-file\">\r\n                    <Label\r\n                      id=\"files\"\r\n                      className=\"btn btn-link text-decoration-none font-size-16 btn-lg waves-effect\"\r\n                    >\r\n                      <i className=\"ri-attachment-line\"></i>\r\n                      <Input\r\n                        onChange={(e) => handleFileChange(e)}\r\n                        type=\"file\"\r\n                        name=\"fileInput\"\r\n                        size=\"60\"\r\n                      />\r\n                    </Label>\r\n                    <UncontrolledTooltip target=\"files\" placement=\"top\">\r\n                      Attached File\r\n                    </UncontrolledTooltip>\r\n                  </li>\r\n                  <li className=\"list-inline-item\">\r\n                    <Button\r\n                      type=\"submit\"\r\n                      color=\"primary\"\r\n                      className=\"font-size-16 btn-lg chat-send waves-effect waves-light\"\r\n                    >\r\n                      <i className=\"ri-send-plane-2-fill\"></i>\r\n                    </Button>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default ChatInput;\r\n","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\dashboard\\Tabs\\Groups.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\dashboard\\Tabs\\Chats.js",["530","531","532"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { Input, InputGroup } from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\n\r\n// simplebar\r\nimport SimpleBar from \"simplebar-react\";\r\n\r\n// actions\r\nimport {\r\n  setconversationNameInOpenChat,\r\n  activeUser,\r\n} from \"../../../redux/actions\";\r\n\r\n// components\r\nimport OnlineUsers from \"./OnlineUsers\";\r\nimport { selectedMessage } from \"../../../redux/control/actions\";\r\n\r\nconst Chats = (props) => {\r\n  const [searchChat, setSearchChat] = useState(\"\");\r\n  const [recentChatList, setRecentChatList] = useState(props.recentChatList);\r\n  const dispatch = useDispatch();\r\n  const active_user = useSelector((state) => state.Chat.active_user);\r\n\r\n  useEffect(() => {\r\n    setRecentChatList(props.recentChatList);\r\n  }, [props.recentChatList]);\r\n\r\n  useEffect(() => {\r\n    const li = document.getElementById(\"conversation\" + active_user);\r\n    if (li) {\r\n      li.classList.add(\"active\");\r\n    }\r\n  }, [active_user]);\r\n\r\n  const handleChange = (e) => {\r\n    const value = e.target.value;\r\n    setSearchChat(value);\r\n\r\n    const filteredArray = props.recentChatList.filter((chat) =>\r\n      chat.name.toLowerCase().includes(value.toLowerCase())\r\n    );\r\n\r\n    setRecentChatList(value === \"\" ? props.recentChatList : filteredArray);\r\n  };\r\n\r\n  const openUserChat = (e, chat) => {\r\n    e.preventDefault();\r\n\r\n    // Find index of current chat in array\r\n    const index = props.recentChatList.indexOf(chat);\r\n\r\n    // Set activeUser\r\n    dispatch(activeUser(index));\r\n\r\n    const chatList = document.getElementById(\"chat-list\");\r\n    const clickedItem = e.target;\r\n\r\n    // Remove active class from other conversations\r\n    const liItems = chatList.getElementsByTagName(\"li\");\r\n    Array.from(liItems).forEach((li) => li.classList.remove(\"active\"));\r\n\r\n    // Activate clicked conversation user\r\n    const currentli = Array.from(liItems).find((li) =>\r\n      li.contains(clickedItem)\r\n    );\r\n    if (currentli) {\r\n      currentli.classList.add(\"active\");\r\n    }\r\n\r\n    const userChat = document.getElementsByClassName(\"user-chat\");\r\n    if (userChat.length > 0) {\r\n      userChat[0].classList.add(\"user-chat-show\");\r\n    }\r\n\r\n    // Remove unread badge if user clicks\r\n    const unread = document.getElementById(\"unRead\" + chat.id);\r\n    if (unread) {\r\n      unread.style.display = \"none\";\r\n    }\r\n  };\r\n\r\n  // Code new\r\n\r\n  // USE STATE\r\n\r\n  const [activeIndex, setActiveIndex] = useState(null);\r\n\r\n  \r\n\r\n  const messageState = useSelector((state) => state.Message.messages);\r\n  const profileState = useSelector((state) => state.Profile.profile);\r\n  const selectedState = useSelector((state)=> state.Control.otherId);\r\n\r\n\r\n  function countSentMessages(messages) {\r\n    return messages.filter((message) => message.status === \"sent\" && message.senderId !== profileState.userId).length;\r\n  }\r\n\r\n  const selectedChat = (e, chat) => {\r\n    e.preventDefault();\r\n    dispatch(selectedMessage(chat.conversation.otherId.userId))\r\n  };\r\n\r\n  function formatTimeDifference(dateString) {\r\n    const inputDate = new Date(dateString);\r\n    const currentDate = new Date();\r\n    const diffMs = currentDate - inputDate; // chênh lệch tính bằng milliseconds\r\n    // Chuyển đổi sang các đơn vị thời gian\r\n    const diffMinutes = Math.floor(diffMs / (1000 * 60));\r\n    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\r\n    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\r\n    // Kiểm tra điều kiện và trả về chuỗi tương ứng\r\n    if (diffMinutes < 60) {\r\n      return `${diffMinutes} minute ago`;\r\n    } else if (diffHours < 24) {\r\n      return `${diffHours} hour ago`;\r\n    } else if (diffDays < 5) {\r\n      return `${diffDays} day ago`;\r\n    } else {\r\n      // Nếu trên 5 ngày, trả về ngày tháng năm ban đầu\r\n      return inputDate.toLocaleDateString(\"vi-VN\", {\r\n        day: \"numeric\",\r\n        month: \"numeric\",\r\n        year: \"numeric\",\r\n      });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div>\r\n        <div className=\"px-4 pt-4\">\r\n          <h4 className=\"mb-4\">Chats</h4>\r\n          <div className=\"search-box chat-search-box\">\r\n            <InputGroup className=\"mb-3 rounded-3\">\r\n              <span\r\n                className=\"input-group-text text-muted bg-light pe-1 ps-3\"\r\n                id=\"basic-addon1\"\r\n              >\r\n                <i className=\"ri-search-line search-icon font-size-18\"></i>\r\n              </span>\r\n              <Input\r\n                type=\"text\"\r\n                value={searchChat}\r\n                onChange={handleChange}\r\n                className=\"form-control bg-light\"\r\n                placeholder=\"Search messages or users\"\r\n              />\r\n            </InputGroup>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Online users */}\r\n        <OnlineUsers />\r\n        {/* Start chat-message-list  */}\r\n        <div>\r\n          <h5 className=\"mb-3 px-3 font-size-16\">Recent</h5>\r\n          <SimpleBar className=\"chat-message-list\">\r\n            <ul\r\n              className=\"list-unstyled chat-list chat-user-list px-2\"\r\n              id=\"chat-list\"\r\n            >\r\n              {messageState &&\r\n                messageState.map((chat, key) => (\r\n                  <li\r\n                    key={key}\r\n                    id={\"conversation\" + key}\r\n\r\n                    className={chat?.conversation?.otherId?.userId  === activeIndex? \"active\" : \"\"}\r\n                    onClick={() => setActiveIndex(chat?.conversation?.otherId?.userId)}\r\n                  >\r\n                    <Link to=\"#\" onClick={(e) => selectedChat(e, chat)}>\r\n                      <div className=\"d-flex\">\r\n                        {chat.profilePicture === \"Null\" ? (\r\n                          <div\r\n                            className={\r\n                              \"chat-user-img \" +\r\n                              chat.status +\r\n                              \" align-self-center me-1 ms-0\"\r\n                            }\r\n                          >\r\n                            <div className=\"avatar-xs\">\r\n                              <span className=\"avatar-title rounded-circle bg-primary-subtle text-primary\">\r\n                                {chat.name.charAt(0)}\r\n                              </span>\r\n                            </div>\r\n                            {chat.status && (\r\n                              <span className=\"user-status\"></span>\r\n                            )}\r\n                          </div>\r\n                        ) : (\r\n                          <div\r\n                            className={\r\n                              \"chat-user-img \" +\r\n                              chat.status +\r\n                              \" align-self-center me-1 ms-0\"\r\n                            }\r\n                          >\r\n                            <img\r\n                              src={chat?.conversation?.otherId?.avatarUrl}\r\n                              className=\"rounded-circle avatar-xs\"\r\n                              alt=\"chatvia\"\r\n                            />\r\n                            {chat.status && (\r\n                              <span className=\"user-status\"></span>\r\n                            )}\r\n                          </div>\r\n                        )}\r\n\r\n                        <div className=\"flex-grow-1 overflow-hidden\">\r\n                          <h5 className=\"text-truncate font-size-15 mb-1 ms-3\">\r\n                            {chat.conversation?.otherId?.fullName}\r\n                          </h5>\r\n                          <p className=\"chat-user-message font-size-14 text-truncate mb-0 ms-3\" style={{color: \"black\"}}>\r\n                            {chat?.messages[chat.messages.length - 1]\r\n                              ?.senderId === profileState.userId\r\n                              ? chat?.messages[chat.messages.length - 1]\r\n                                  ?.messageType === \"file\"\r\n                                ? \"You have sent a file\"\r\n                                : chat?.messages[chat.messages.length - 1]\r\n                                    ?.messageType === \"image\"\r\n                                ? \"You have sent an image\"\r\n                                : \"You: \" +\r\n                                  chat?.messages[chat.messages.length - 1]\r\n                                    ?.content\r\n                              : chat?.messages[chat.messages.length - 1]\r\n                                  ?.content}\r\n\r\n                            {chat.isTyping ? (\r\n                              <>\r\n                                typing\r\n                                <span className=\"animate-typing\">\r\n                                  <span className=\"dot ms-1\"></span>\r\n                                  <span className=\"dot ms-1\"></span>\r\n                                  <span className=\"dot ms-1\"></span>\r\n                                </span>\r\n                              </>\r\n                            ) : (\r\n                              <>\r\n                                {chat.messages &&\r\n                                chat.messages.length > 0 &&\r\n                                chat.messages[chat.messages.length - 1]\r\n                                  .isImageMessage === true ? (\r\n                                  <i className=\"ri-image-fill align-middle me-1\"></i>\r\n                                ) : null}\r\n                                {chat.messages &&\r\n                                chat.messages.length > 0 &&\r\n                                chat.messages[chat.messages.length - 1]\r\n                                  .isFileMessage === true ? (\r\n                                  <i className=\"ri-file-text-fill align-middle me-1\"></i>\r\n                                ) : null}\r\n                                {chat.messages && chat.messages.length > 0\r\n                                  ? chat.messages[chat.messages.length - 1]\r\n                                      .message\r\n                                  : null}\r\n                              </>\r\n                            )}\r\n                          </p>\r\n                        </div>\r\n                        <div className=\"font-size-11\" style={{color: \"black\"}}>\r\n                          {chat?.messages[chat.messages.length - 1]?.sentAt &&\r\n                            formatTimeDifference(\r\n                              chat?.messages[chat.messages.length - 1]?.sentAt\r\n                            )}\r\n                        </div>\r\n                        {chat.unRead === 0 ? null : (\r\n                          <div\r\n                            className=\"unread-message\"\r\n                            id={\"unRead\" + chat.id}\r\n                          >\r\n                            <span className=\"badge badge-soft-danger rounded-pill\">\r\n                              {chat?.messages?.length > 0 &&\r\n                                countSentMessages(chat.messages) > 0 && countSentMessages(chat.messages)}\r\n                            </span>\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </Link>\r\n                  </li>\r\n                ))}\r\n            </ul>\r\n          </SimpleBar>\r\n        </div>\r\n        {/* End chat-message-list */}\r\n\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default connect(null, { setconversationNameInOpenChat, activeUser })(\r\n  Chats\r\n);\r\n","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\dashboard\\UserChat\\FileList.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\dashboard\\Tabs\\Settings.js",["533","534","535","536","537","538","539","540"],[],"﻿import React, { useState } from \"react\";\r\nimport {\r\n  Dropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n  Card,\r\n  Button,\r\n  UncontrolledDropdown,\r\n  Input,\r\n  Label,\r\n} from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport SimpleBar from \"simplebar-react\";\r\n\r\n//Import components\r\nimport CustomCollapse from \"../../../components/CustomCollapse\";\r\n\r\n//Import Images\r\nimport avatar1 from \"../../../assets/images/users/avatar-1.jpg\";\r\n\r\n//i18n\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { use } from \"i18next\";\r\nimport { fetchProfileRequest } from \"../../../redux/profile/actions\";\r\n\r\nfunction Settings(props) {\r\n  const [dropdownOpen, setDropdownOpen] = useState(false);\r\n  const [isOpen1, setIsOpen1] = useState(true);\r\n  const [isOpen2, setIsOpen2] = useState(false);\r\n  const [isOpen3, setIsOpen3] = useState(false);\r\n  const [isOpen4, setIsOpen4] = useState(false);\r\n\r\n  /* intilize t variable for multi language implementation */\r\n  const { t } = useTranslation();\r\n\r\n  const toggleCollapse1 = () => {\r\n    setIsOpen1(!isOpen1);\r\n    setIsOpen2(false);\r\n    setIsOpen3(false);\r\n    setIsOpen4(false);\r\n  };\r\n\r\n  const toggleCollapse2 = () => {\r\n    setIsOpen2(!isOpen2);\r\n    setIsOpen1(false);\r\n    setIsOpen3(false);\r\n    setIsOpen4(false);\r\n  };\r\n\r\n  const toggleCollapse3 = () => {\r\n    setIsOpen3(!isOpen3);\r\n    setIsOpen1(false);\r\n    setIsOpen2(false);\r\n    setIsOpen4(false);\r\n  };\r\n\r\n  const toggleCollapse4 = () => {\r\n    setIsOpen4(!isOpen4);\r\n    setIsOpen1(false);\r\n    setIsOpen3(false);\r\n    setIsOpen2(false);\r\n  };\r\n\r\n  const toggle = () => setDropdownOpen(!dropdownOpen);\r\n  const dispatch = useDispatch()\r\n\r\n  const profileState = useSelector((state) => state.Profile);\r\n\r\n  const [visiblePassword, setVisiblePassword] = useState(false);\r\n  const [visibleFullName, setVisibleFullname] = useState(false);\r\n  const [visibleUserName, setVisibleUserName] = useState(false)\r\n  const [userName, setUserName] = useState(\"\");\r\n  const [fullName, setFullName] = useState(\"\");\r\n  const [oldPass, setOldPass] = useState(\"\");\r\n  const [newPass, setNewPass] = useState(\"\");\r\n  const [rePass, setRePass] = useState(\"\");\r\n\r\n\r\n\r\n  async function updateUser(user) {\r\n    try {\r\n        const response = await fetch('https://localhost:7098/api/user/update', {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(user) // Convert the user object to JSON format\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! Status: ${response.status}`);\r\n        }\r\n\r\n        const result = await response.json();\r\n        alert(result.message)\r\n        window.location.href = \"/\";\r\n        return result;\r\n    } catch (error) {\r\n        alert(error)\r\n        throw error;\r\n    }\r\n}\r\n\r\n  const handleSubmitUsername = () => {\r\n        const user = profileState.profile;\r\n        if(userName !== \"\"){\r\n            user.userName = userName;\r\n            updateUser(user)\r\n        }\r\n  };\r\n  const handleSubmitFullName = () => {\r\n    const user = profileState.profile;\r\n    if(fullName !== \"\"){\r\n        user.fullName = fullName;\r\n        updateUser(user)\r\n    }\r\n  }\r\n\r\n  const handleSubmitPassword = () => {\r\n    const user = profileState.profile;\r\n\r\n    if(oldPass === user.passwordHash && newPass === rePass){\r\n        user.passwordHash = newPass;\r\n        updateUser(user)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div>\r\n        <div className=\"px-4 pt-4\">\r\n          <h4 className=\"mb-0\">{t(\"Settings\")}</h4>\r\n        </div>\r\n\r\n        <div className=\"text-center border-bottom p-4\">\r\n          <div className=\"mb-4 profile-user\">\r\n            <img\r\n              src={profileState.profile.avatarUrl}\r\n              className=\"rounded-circle avatar-lg img-thumbnail\"\r\n              alt=\"chatvia\"\r\n            />\r\n            <Button\r\n              type=\"button\"\r\n              color=\"light\"\r\n              className=\"avatar-xs p-0 rounded-circle profile-photo-edit\"\r\n            >\r\n              <i className=\"ri-pencil-fill\"></i>\r\n            </Button>\r\n          </div>\r\n\r\n          <h5 className=\"font-size-16 mb-1 text-truncate\">\r\n            {t(profileState.profile.fullName)}\r\n          </h5>\r\n          <Dropdown\r\n            isOpen={dropdownOpen}\r\n            toggle={toggle}\r\n            className=\"d-inline-block mb-1\"\r\n          >\r\n            <DropdownToggle tag=\"a\" className=\"text-muted pb-1 d-block\">\r\n              {t(\"Available\")} <i className=\"mdi mdi-chevron-down\"></i>\r\n            </DropdownToggle>\r\n\r\n            <DropdownMenu>\r\n              <DropdownItem>{t(\"Available\")}</DropdownItem>\r\n              <DropdownItem>{t(\"Busy\")}</DropdownItem>\r\n            </DropdownMenu>\r\n          </Dropdown>\r\n        </div>\r\n        {/* End profile user */}\r\n\r\n        {/* Start User profile description */}\r\n        <SimpleBar\r\n          style={{ maxHeight: \"100%\" }}\r\n          className=\"p-4 user-profile-desc\"\r\n        >\r\n          <div id=\"profile-setting-accordion\" className=\"custom-accordion\">\r\n            <Card className=\"accordion-item border mb-2\">\r\n              <CustomCollapse\r\n                title=\"Personal Info\"\r\n                isOpen={isOpen1}\r\n                toggleCollapse={toggleCollapse1}\r\n              >\r\n                <div>\r\n                  <p className=\"text-muted mb-1\">{t(\"UserName\")}</p>\r\n                  <h5 className=\"font-size-14\">\r\n                    {t(profileState.profile.userName)}\r\n                  </h5>\r\n\r\n                  {visibleUserName || (\r\n                    <Button\r\n                      onClick={() => {\r\n                        setVisibleUserName(true);\r\n                      }}\r\n                      style={{ marginTop: \"10px\", marginBottom: \"10px\" }}\r\n                    >\r\n                      Edit UserName\r\n                    </Button>\r\n                  )}\r\n\r\n\r\n                  {visibleUserName && (\r\n                     <div className=\"model-edit-fullName\">\r\n                     <Label>\r\n                       <Input\r\n                         placeholder=\"Enter User Name\"\r\n                         value={userName}\r\n                         onChange={(e) => setUserName(e.target.value)}\r\n                       ></Input>\r\n                     </Label>\r\n                     <div\r\n                       style={{\r\n                         display: \"flex\",\r\n                         padding: \"20px 10px\",\r\n                         gap: \"20px\",\r\n                       }}\r\n                     >\r\n                       <Button onClick={handleSubmitUsername}>Submit</Button>\r\n                       <Button onClick={() => setVisibleUserName(false)}>\r\n                         Cancel\r\n                       </Button>\r\n                     </div>\r\n                   </div>\r\n\r\n                  )}\r\n                </div>\r\n\r\n                <div className=\"mt-4\">\r\n                  <p className=\"text-muted mb-1\">{t(\"Email\")}</p>\r\n                  <h5 className=\"font-size-14\">\r\n                    {t(profileState.profile.email)}\r\n                  </h5>\r\n                </div>\r\n\r\n                <div className=\"mt-4\">\r\n                  <p className=\"text-muted mb-1\">{t(\"Time\")}</p>\r\n                  <h5 className=\"font-size-14\">\r\n                    {t(\r\n                      new Date(profileState.profile.createdAt).toLocaleString()\r\n                    )}\r\n                  </h5>\r\n                </div>\r\n                <div className=\"mt-4\">\r\n                  <p className=\"text-muted mb-1\">{t(\"Full Name\")}</p>\r\n\r\n                  {visibleFullName || (\r\n                    <Button\r\n                      onClick={() => {\r\n                        setVisibleFullname(true);\r\n                      }}\r\n                      style={{ marginTop: \"10px\", marginBottom: \"10px\" }}\r\n                    >\r\n                      Edit Full Name\r\n                    </Button>\r\n                  )}\r\n\r\n                  {visibleFullName && (\r\n                    <div className=\"model-edit-fullName\">\r\n                      <Label>\r\n                        <Input\r\n                          placeholder=\"Enter Full Name\"\r\n                          value={fullName}\r\n                          onChange={(e) => setFullName(e.target.value)}\r\n                        ></Input>\r\n                      </Label>\r\n                      <div\r\n                        style={{\r\n                          display: \"flex\",\r\n                          padding: \"20px 10px\",\r\n                          gap: \"20px\",\r\n                        }}\r\n                      >\r\n                        <Button onClick={handleSubmitFullName}>Submit</Button>\r\n                        <Button onClick={() => setVisibleFullname(false)}>\r\n                          Cancel\r\n                        </Button>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                <div className=\"mt-4\">\r\n                  <p className=\"text-muted mb-1\">{t(\"Location\")}</p>\r\n                  <h5 className=\"font-size-14 mb-0\">{t(\"Viet Nam\")}</h5>\r\n                </div>\r\n                <div className=\"mt-4\">\r\n                  <p className=\"text-muted mb-1\">{t(\"Password\")}</p>\r\n\r\n                  {visiblePassword || (\r\n                    <Button onClick={() => setVisiblePassword(true)}>\r\n                      Edit Password\r\n                    </Button>\r\n                  )}\r\n\r\n                  {visiblePassword && (\r\n                    <div className=\"modal-edit-password\">\r\n                      <Label>\r\n                        <p className=\"text-muted mb-1\">{t(\"Old Password\")}</p>\r\n                        <Input placeholder=\"Enter Old Password\"></Input>\r\n                      </Label>\r\n                      <p className=\"text-muted mb-1\">{t(\"New Password\")}</p>\r\n                      <Label>\r\n                        <Input placeholder=\"Enter new password\"></Input>\r\n                      </Label>\r\n                      <p className=\"text-muted mb-1\">{t(\"Re-New Password\")}</p>\r\n                      <Label>\r\n                        <Input placeholder=\"Re-Enter New Password\"></Input>\r\n                      </Label>\r\n                      <div\r\n                        style={{\r\n                          display: \"flex\",\r\n                          padding: \"20px 10px\",\r\n                          gap: \"20px\",\r\n                        }}\r\n                      >\r\n                        <Button\r\n                            onClick={handleSubmitPassword}\r\n                        >Submit</Button>\r\n                        <Button onClick={() => setVisiblePassword(false)}>\r\n                          Cancel\r\n                        </Button>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </CustomCollapse>\r\n            </Card>\r\n            {/* end profile card */}\r\n\r\n            <Card className=\"accordion-item border mb-2\">\r\n              <CustomCollapse\r\n                title=\"Privacy\"\r\n                isOpen={isOpen2}\r\n                toggleCollapse={toggleCollapse2}\r\n              >\r\n                <div className=\"py-3\">\r\n                  <div className=\"d-flex align-items-center\">\r\n                    <div className=\"flex-grow-1 overflow-hidden\">\r\n                      <h5 className=\"font-size-13 mb-0 text-truncate\">\r\n                        {t(\"Profile photo\")}\r\n                      </h5>\r\n                    </div>\r\n                    <UncontrolledDropdown className=\"ms-2\">\r\n                      <DropdownToggle\r\n                        className=\"btn btn-light btn-sm w-sm\"\r\n                        tag=\"button\"\r\n                      >\r\n                        {t(\"Everyone\")} <i className=\"mdi mdi-chevron-down\"></i>\r\n                      </DropdownToggle>\r\n                      <DropdownMenu className=\"dropdown-menu-end\">\r\n                        <DropdownItem>{t(\"Everyone\")}</DropdownItem>\r\n                        <DropdownItem>{t(\"selected\")}</DropdownItem>\r\n                        <DropdownItem>{t(\"Nobody\")}</DropdownItem>\r\n                      </DropdownMenu>\r\n                    </UncontrolledDropdown>\r\n                  </div>\r\n                </div>\r\n                <div className=\"py-3 border-top\">\r\n                  <div className=\"d-flex align-items-center\">\r\n                    <div className=\"flex-grow-1 overflow-hidden\">\r\n                      <h5 className=\"font-size-13 mb-0 text-truncate\">\r\n                        {t(\"Last seen\")}\r\n                      </h5>\r\n                    </div>\r\n                    <div className=\"ms-2\">\r\n                      <div className=\"form-check form-switch\">\r\n                        <Input\r\n                          type=\"checkbox\"\r\n                          className=\"form-check-input\"\r\n                          id=\"privacy-lastseenSwitch\"\r\n                          defaultChecked\r\n                        />\r\n                        <Label\r\n                          className=\"form-check-label\"\r\n                          htmlFor=\"privacy-lastseenSwitch\"\r\n                        ></Label>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"py-3 border-top\">\r\n                  <div className=\"d-flex align-items-center\">\r\n                    <div className=\"flex-grow-1 overflow-hidden\">\r\n                      <h5 className=\"font-size-13 mb-0 text-truncate\">\r\n                        {t(\"Status\")}\r\n                      </h5>\r\n                    </div>\r\n                    <UncontrolledDropdown className=\"ms-2\">\r\n                      <DropdownToggle\r\n                        className=\"btn btn-light btn-sm w-sm\"\r\n                        tag=\"button\"\r\n                      >\r\n                        {t(\"Everyone\")} <i className=\"mdi mdi-chevron-down\"></i>\r\n                      </DropdownToggle>\r\n                      <DropdownMenu className=\"dropdown-menu-end\">\r\n                        <DropdownItem>{t(\"Everyone\")}</DropdownItem>\r\n                        <DropdownItem>{t(\"selected\")}</DropdownItem>\r\n                        <DropdownItem>{t(\"Nobody\")}</DropdownItem>\r\n                      </DropdownMenu>\r\n                    </UncontrolledDropdown>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"py-3 border-top\">\r\n                  <div className=\"d-flex align-items-center\">\r\n                    <div className=\"flex-grow-1 overflow-hidden\">\r\n                      <h5 className=\"font-size-13 mb-0 text-truncate\">\r\n                        {t(\"Read receipts\")}\r\n                      </h5>\r\n                    </div>\r\n                    <div className=\"ms-2\">\r\n                      <div className=\"form-check form-switch\">\r\n                        <Input\r\n                          type=\"checkbox\"\r\n                          className=\"form-check-input\"\r\n                          id=\"privacy-readreceiptSwitch\"\r\n                          defaultChecked\r\n                        />\r\n                        <Label\r\n                          className=\"form-check-label\"\r\n                          htmlFor=\"privacy-readreceiptSwitch\"\r\n                        ></Label>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"py-3 border-top\">\r\n                  <div className=\"d-flex align-items-center\">\r\n                    <div className=\"flex-grow-1 overflow-hidden\">\r\n                      <h5 className=\"font-size-13 mb-0 text-truncate\">\r\n                        {t(\"Groups\")}\r\n                      </h5>\r\n                    </div>\r\n                    <UncontrolledDropdown className=\"ms-2\">\r\n                      <DropdownToggle\r\n                        className=\"btn btn-light btn-sm w-sm\"\r\n                        tag=\"button\"\r\n                      >\r\n                        {t(\"Everyone\")} <i className=\"mdi mdi-chevron-down\"></i>\r\n                      </DropdownToggle>\r\n                      <DropdownMenu className=\"dropdown-menu-end\">\r\n                        <DropdownItem>{t(\"Everyone\")}</DropdownItem>\r\n                        <DropdownItem>{t(\"selected\")}</DropdownItem>\r\n                        <DropdownItem>{t(\"Nobody\")}</DropdownItem>\r\n                      </DropdownMenu>\r\n                    </UncontrolledDropdown>\r\n                  </div>\r\n                </div>\r\n              </CustomCollapse>\r\n            </Card>\r\n            {/* end Privacy card */}\r\n\r\n            <Card className=\"accordion-item border mb-2\">\r\n              <CustomCollapse\r\n                title=\"Security\"\r\n                isOpen={isOpen3}\r\n                toggleCollapse={toggleCollapse3}\r\n              >\r\n                <div>\r\n                  <div className=\"d-flex align-items-center\">\r\n                    <div className=\"flex-grow-1 overflow-hidden\">\r\n                      <h5 className=\"font-size-13 mb-0 text-truncate\">\r\n                        {t(\"Show security notification\")}\r\n                      </h5>\r\n                    </div>\r\n                    <div className=\"ms-2 me-0\">\r\n                      <div className=\"form-check form-switch\">\r\n                        <Input\r\n                          type=\"checkbox\"\r\n                          className=\"form-check-input\"\r\n                          id=\"security-notificationswitch\"\r\n                        />\r\n                        <Label\r\n                          className=\"form-check-label\"\r\n                          htmlFor=\"security-notificationswitch\"\r\n                        ></Label>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </CustomCollapse>\r\n            </Card>\r\n            {/* end Security card */}\r\n\r\n            <Card className=\"accordion-item  border mb-2\">\r\n              <CustomCollapse\r\n                title=\"Help\"\r\n                isOpen={isOpen4}\r\n                toggleCollapse={toggleCollapse4}\r\n              >\r\n                <div>\r\n                  <div className=\"py-3\">\r\n                    <h5 className=\"font-size-13 mb-0\">\r\n                      <Link to=\"#\" className=\"text-body d-block\">\r\n                        {t(\"FAQs\")}\r\n                      </Link>\r\n                    </h5>\r\n                  </div>\r\n                  <div className=\"py-3 border-top\">\r\n                    <h5 className=\"font-size-13 mb-0\">\r\n                      <Link to=\"#\" className=\"text-body d-block\">\r\n                        {t(\"Contact\")}\r\n                      </Link>\r\n                    </h5>\r\n                  </div>\r\n                  <div className=\"py-3 border-top\">\r\n                    <h5 className=\"font-size-13 mb-0\">\r\n                      <Link to=\"#\" className=\"text-body d-block\">\r\n                        {t(\"Terms & Privacy policy\")}\r\n                      </Link>\r\n                    </h5>\r\n                  </div>\r\n                </div>\r\n              </CustomCollapse>\r\n            </Card>\r\n            {/* end Help card */}\r\n          </div>\r\n          {/* end profile-setting-accordion */}\r\n        </SimpleBar>\r\n        {/* End User profile description */}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Settings;\r\n","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\dashboard\\Tabs\\Contacts.js",["541","542","543","544"],[],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  UncontrolledTooltip,\r\n  Form,\r\n  Label,\r\n  Input,\r\n  InputGroup,\r\n  List,\r\n  Container,\r\n  Row,\r\n  Col,\r\n} from \"reactstrap\";\r\nimport SimpleBar from \"simplebar-react\";\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport { acceptContactRequest, cancelContactRequest, deleteContactRequest, inviteContactRequest, refuseContactRequest } from \"../../../redux/contact/action\";\r\nimport { selectedMessage } from \"../../../redux/control/actions\";\r\nimport { use } from \"i18next\";\r\nimport { updateMessageSuccess } from \"../../../redux/message/actions\";\r\nimport { fetchOtherProfileRequest } from \"../../../redux/profile/actions\";\r\nconst Contacts = ({ contacts: initialContacts, t }) => {\r\n  const [modal, setModal] = useState(false);\r\n  const [modalNoti, setModalNoti] = useState(false);\r\n  const [modelInvi, setModalInvi] = useState(false);\r\n\r\n  const toggle = () => setModal(!modal);\r\n  const toggleNoti = () => setModalNoti(!modalNoti);\r\n  const toggleInvi = () => setModalInvi(!modelInvi);\r\n\r\n  const [invite, setInvite] = useState(\"\");\r\n\r\n\r\n  // GET DATA IN REDUX\r\n  const contactState = useSelector((state) => state.Contact.contacts);\r\n\r\n  const profileState = useSelector((state)=> state.Profile.profile)\r\n  const dispatch = useDispatch();\r\n\r\n\r\n  function groupByFirstLetter(arr) {\r\n    if (Array.isArray(arr)) {\r\n      const result = [];\r\n      const groups = {};\r\n      arr.forEach((user) => {\r\n        const firstLetter = user.userName[0].toUpperCase();\r\n        if (!groups[firstLetter]) {\r\n          groups[firstLetter] = { group: firstLetter, children: [] };\r\n          result.push(groups[firstLetter]);\r\n        }\r\n        groups[firstLetter].children.push(user);\r\n      });\r\n      return result;\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  const contacts = contactState.contact?.contacts;\r\n\r\n  var result = groupByFirstLetter(contacts ? contacts :contactState.contact);\r\n\r\n\r\n  const contactRequests = contactState.contact?.contactRequests;\r\n  const contactPendings = contactState.contact?.contactPendings;\r\n  \r\n  const messageState  = useSelector((state)=> state.Message.messages);\r\n  const otherProfile = useSelector((state)=> state.Profile.otherProfile);\r\n  const profile = useSelector((state) => state.Profile.profile);\r\n  const selectedState = useSelector((state) => state.Control.otherId);\r\n\r\n\r\n\r\n\r\n\r\n\r\n  // // OPEN USER CHAT IN CONTACT LIST\r\n  // const handleOpenChat = (e, userId) => {\r\n\r\n  //   e.preventDefault();\r\n  //   dispatch(fetchOtherProfileRequest(userId))\r\n\r\n  //   const hasMissingUserId = messageState.some(item => {\r\n  //     return item?.conversation?.otherId?.userId === userId;\r\n  //   });\r\n\r\n  //   if(!hasMissingUserId){\r\n    \r\n  //     const newMessage = {\r\n  //       conversation: {\r\n  //           userId: profile?.userId,\r\n  //           otherId: {\r\n  //               avatarUrl: otherProfile?.avatarUrl,\r\n  //               bio: otherProfile?.bio,\r\n  //               createdAt: otherProfile?.createdAt,\r\n  //               email: otherProfile?.email,\r\n  //               fullName: otherProfile?.fullName,\r\n  //               permission: otherProfile?.permission,\r\n  //               userId: otherProfile?.userId,\r\n  //               userName: otherProfile?.userName\r\n  //           }\r\n  //       },\r\n  //       messages: []\r\n  //   };\r\n  //         const updatedMessages = [...messageState, newMessage];\r\n  //   dispatch(updateMessageSuccess(updatedMessages));\r\n  //   }\r\n\r\n\r\n  //   document.querySelector('#pills-chat-tab').click();\r\n    \r\n  //   dispatch(selectedMessage(userId))\r\n  // };\r\n\r\n  const handleOpenChat = (e, userId) => {\r\n    e.preventDefault();\r\n    dispatch(fetchOtherProfileRequest(userId));\r\n    \r\n    // Click vào tab chat\r\n    document.querySelector('#pills-chat-tab').click();\r\n  \r\n    // Cập nhật trạng thái người dùng đã chọn\r\n    dispatch(selectedMessage(userId));\r\n  };\r\n  \r\n  // Theo dõi sự thay đổi của otherProfile và thêm hội thoại mới nếu cần\r\n  useEffect(() => {\r\n    if (otherProfile && selectedState) {\r\n      const hasMissingUserId = messageState.some(item => \r\n        item?.conversation?.otherId?.userId === selectedState\r\n      );\r\n  \r\n      if (!hasMissingUserId) {\r\n        const newMessage = {\r\n          conversation: {\r\n            userId: profile?.userId,\r\n            otherId: {\r\n              avatarUrl: otherProfile.avatarUrl,\r\n              bio: otherProfile.bio,\r\n              createdAt: otherProfile.createdAt,\r\n              email: otherProfile.email,\r\n              fullName: otherProfile.fullName,\r\n              permission: otherProfile.permission,\r\n              userId: otherProfile.userId,\r\n              userName: otherProfile.userName,\r\n            },\r\n          },\r\n          messages: [],\r\n        };\r\n        \r\n        const updatedMessages = [...messageState, newMessage];\r\n        dispatch(updateMessageSuccess(updatedMessages));\r\n      }\r\n    }\r\n  }, [otherProfile, selectedState, messageState, dispatch]);\r\n\r\n\r\n\r\n  // HANDLE INVITE CONTACT\r\n  const handleInviteContact = (e) => {\r\n    e.preventDefault();\r\n    dispatch(inviteContactRequest(invite))\r\n    setInvite(\"\");\r\n    console.log(invite);\r\n  };\r\n\r\n\r\n  // HANDLE ACCEPT CONTACT\r\n  const handleAcceptContact =  (e, userId)  => {\r\n    e.preventDefault();\r\n\r\n    dispatch(acceptContactRequest(userId));\r\n  }\r\n\r\n\r\n  // HANDLE REFUSE CONTACT\r\n  const handleRefuseContact = (e,userId) => {\r\n    e.preventDefault();\r\n    dispatch(refuseContactRequest(userId))\r\n    console.log(userId);\r\n  }\r\n\r\n  const handleCancelContact = (e, userId) => {\r\n    e.preventDefault();\r\n    dispatch(cancelContactRequest(userId));\r\n  }\r\n\r\n  const handleDeleteContact = (e, userId) => {\r\n      // e.preventDefault();\r\n      e.stopPropagation();\r\n      dispatch(deleteContactRequest(userId))\r\n      console.log(\"delete\", userId)\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div>\r\n        <div className=\"p-4\">\r\n          <div className=\"user-chat-nav float-end\">\r\n            <div id=\"add-contact\">\r\n              {/* Button trigger modal */}\r\n              <Button\r\n                type=\"button\"\r\n                color=\"link\"\r\n                onClick={toggle}\r\n                className=\"text-decoration-none text-muted font-size-18 py-0\"\r\n              >\r\n                <i className=\"ri-user-add-line\"></i>\r\n              </Button>\r\n            </div>\r\n            <UncontrolledTooltip target=\"add-contact\" placement=\"bottom\">\r\n              Add Contact\r\n            </UncontrolledTooltip>\r\n          </div>\r\n          <div className=\"user-chat-nav float-end\">\r\n            <div id=\"notification\">\r\n              {/* Button trigger modal */}\r\n              <Button\r\n                type=\"button\"\r\n                color=\"link\"\r\n                onClick={toggleNoti}\r\n                className=\"text-decoration-none text-muted font-size-18 py-0\"\r\n              >\r\n                <i className=\"ri-user-received-line\"></i>\r\n              </Button>\r\n            </div>\r\n            <UncontrolledTooltip target=\"notification\" placement=\"bottom\">\r\n              Notification\r\n            </UncontrolledTooltip>\r\n          </div>\r\n          <div className=\"user-chat-nav float-end\">\r\n            <div id=\"invitaionsent\">\r\n              {/* Button trigger modal */}\r\n              <Button\r\n                type=\"button\"\r\n                color=\"link\"\r\n                onClick={toggleInvi}\r\n                className=\"text-decoration-none text-muted font-size-18 py-0\"\r\n              >\r\n                <i className=\"ri-user-shared-2-line\"></i>\r\n              </Button>\r\n            </div>\r\n            <UncontrolledTooltip target=\"invitaionsent\" placement=\"bottom\">\r\n                Invitation Sent\r\n            </UncontrolledTooltip>\r\n          </div>\r\n          <h4 className=\"mb-4\">Contacts</h4>\r\n\r\n\r\n          {/* Start Invitaion Modal */}\r\n          <Modal isOpen={modelInvi} centered toggle={toggleInvi}>\r\n            <ModalHeader tag=\"h5\" className=\"font-size-16\" toggle={toggleInvi}>\r\n              {t(\"Invitation Sent\")}\r\n            </ModalHeader>\r\n            <ModalBody className=\"p-4\">\r\n              <Form>\r\n                <div>\r\n                  <List\r\n                    type=\"unstyled\"\r\n                    style={{\r\n                      maxHeight: \"200px\",\r\n                      overflowY: \"auto\",\r\n                      overflowX: \"hidden\",\r\n                    }}\r\n                  >\r\n                    {contactPendings &&\r\n                      contactPendings.map((child, key) => (\r\n                        <li key={key} style={{ marginBottom: \"10px\" }}>\r\n                          <Row xs=\"2\">\r\n                            <Col>\r\n                              <h4 style={{ overflowX: \"hidden\" }}>{child.userName}</h4>\r\n                            </Col>\r\n                            <Col>\r\n\r\n                              <Button \r\n                              onClick={(e)=> handleCancelContact(e,child.userId)}\r\n                              color=\"danger\"\r\n                              >{\"Cancel\"}</Button>\r\n                            </Col>\r\n                          </Row>\r\n                        </li>\r\n                      ))}\r\n                  </List>\r\n                </div>\r\n              </Form>\r\n            </ModalBody>\r\n            <ModalFooter>\r\n              <Button type=\"button\" color=\"primary\" onClick={toggleInvi}>\r\n                Close\r\n              </Button>\r\n            </ModalFooter>\r\n          </Modal>\r\n          {/* End Invitation Modal */}\r\n\r\n\r\n          {/* Start Notification Modal */}\r\n          <Modal isOpen={modalNoti} centered toggle={toggleNoti}>\r\n            <ModalHeader tag=\"h5\" className=\"font-size-16\" toggle={toggleNoti}>\r\n              {t(\"Notification\")}\r\n            </ModalHeader>\r\n            <ModalBody className=\"p-4\">\r\n              <Form>\r\n                <div>\r\n                  <List\r\n                    type=\"unstyled\"\r\n                    style={{\r\n                      maxHeight: \"200px\",\r\n                      overflowY: \"auto\",\r\n                      overflowX: \"hidden\",\r\n                    }}\r\n                  >\r\n                    {contactRequests &&\r\n                      contactRequests.map((child, key) => (\r\n                        <li key={key} style={{ marginBottom: \"10px\" }}>\r\n                          <Row xs=\"2\">\r\n                            <Col>\r\n                              <h4 style={{ overflowX: \"hidden\" }}>{child.userName}</h4>\r\n                            </Col>\r\n                            <Col>\r\n                              <Button\r\n                                style={{ marginRight: \"10px\" }}\r\n                                color=\"success\"\r\n                                onClick={(e)=>handleAcceptContact(e,child.userId)}\r\n                              >\r\n                                {\"Accept\"}\r\n                              </Button>\r\n                              <Button \r\n                              onClick={(e)=> handleRefuseContact(e,child.userId)}\r\n                              color=\"danger\"\r\n                              >{\"Refuse\"}</Button>\r\n                            </Col>\r\n                          </Row>\r\n                        </li>\r\n                      ))}\r\n                  </List>\r\n                </div>\r\n              </Form>\r\n            </ModalBody>\r\n            <ModalFooter>\r\n              <Button type=\"button\" color=\"primary\" onClick={toggleNoti}>\r\n                Close\r\n              </Button>\r\n            </ModalFooter>\r\n          </Modal>\r\n          {/* End Notification Modal */}\r\n\r\n          {/* Start Add contact Modal */}\r\n          <Modal isOpen={modal} centered toggle={toggle}>\r\n            <ModalHeader tag=\"h5\" className=\"font-size-16\" toggle={toggle}>\r\n              {t(\"Add Contact\")}\r\n            </ModalHeader>\r\n            <ModalBody className=\"p-4\">\r\n              <Form>\r\n                <div className=\"mb-4\">\r\n                  <Label className=\"form-label\" htmlFor=\"addcontactemail-input\">\r\n                    {t(\"UserName\")}\r\n                  </Label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    id=\"addcontactemail-input\"\r\n                    placeholder=\"Enter UserName\"\r\n                    value={invite}\r\n                    onChange={(e) => setInvite(e.target.value)}\r\n                  />\r\n                </div>\r\n              </Form>\r\n            </ModalBody>\r\n            <ModalFooter>\r\n              <Button type=\"button\" color=\"link\" onClick={toggle}>\r\n                Close\r\n              </Button>\r\n              <Button\r\n                type=\"button\"\r\n                color=\"primary\"\r\n                onClick={(e) => handleInviteContact(e)}\r\n              >\r\n                Invite Contact\r\n              </Button>\r\n            </ModalFooter>\r\n          </Modal>\r\n          {/* End Add contact Modal */}\r\n\r\n          <div className=\"search-box chat-search-box\">\r\n            <InputGroup size=\"lg\" className=\"bg-light rounded-lg\">\r\n              <Button\r\n                color=\"link\"\r\n                className=\"text-decoration-none text-muted pr-1\"\r\n                type=\"button\"\r\n              >\r\n                <i className=\"ri-search-line search-icon font-size-18\"></i>\r\n              </Button>\r\n              <Input\r\n                type=\"text\"\r\n                className=\"form-control bg-light\"\r\n                placeholder={t(\"Search users..\")}\r\n              />\r\n            </InputGroup>\r\n          </div>\r\n          {/* End search-box */}\r\n        </div>\r\n        {/* end p-4 */}\r\n\r\n        {/* Start contact lists */}\r\n        <SimpleBar\r\n          style={{ maxHeight: \"100%\" }}\r\n          id=\"chat-room\"\r\n          className=\"p-4 chat-message-list chat-group-list\"\r\n        >\r\n          {result &&\r\n            result.map((contact, key) => (\r\n              <div key={key} className={key + 1 === 1 ? \"\" : \"mt-3\"}>\r\n                <div className=\"p-3 fw-bold text-primary\">{contact.group}</div>\r\n\r\n                <ul className=\"list-unstyled contact-list\">\r\n                  {contact.children.map((child, key) => (\r\n                    <li\r\n                      key={key}\r\n                      onClick={(e) => handleOpenChat(e, child.userId)}\r\n                    >\r\n                      <div className=\"d-flex align-items-center\">\r\n                        <div className=\"flex-grow-1\">\r\n                          <h5 className=\"font-size-14 m-0\">{child.userName}</h5>\r\n                        </div>\r\n                        <UncontrolledDropdown>\r\n                          <DropdownToggle tag=\"a\" className=\"text-muted\">\r\n                            <i className=\"ri-more-2-fill\"></i>\r\n                          </DropdownToggle>\r\n                          <DropdownMenu className=\"dropdown-menu-end\">\r\n                            <DropdownItem>\r\n                              {t(\"Share\")}{\" \"}\r\n                              <i className=\"ri-share-line float-end text-muted\"></i>\r\n                            </DropdownItem>\r\n                            <DropdownItem>\r\n                              {t(\"Block\")}{\" \"}\r\n                              <i className=\"ri-forbid-line float-end text-muted\"></i>\r\n                            </DropdownItem>\r\n                            <DropdownItem   onClick={(e) => {\r\n            e.stopPropagation(); // Ngăn chặn nổi bọt tại đây\r\n            handleDeleteContact(e, child.userId);\r\n          }}>\r\n                              {t(\"Remove\")}{\" \"}\r\n                              <i className=\"ri-delete-bin-line float-end text-muted\"></i>\r\n                            </DropdownItem>\r\n                          </DropdownMenu>\r\n                        </UncontrolledDropdown>\r\n                      </div>\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              </div>\r\n            ))}\r\n        </SimpleBar>\r\n        {/* end contact lists */}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { contacts } = state.Chat;\r\n  return { contacts };\r\n};\r\n\r\n// export default Contacts;\r\nexport default connect(mapStateToProps, null)(withTranslation()(Contacts));\r\n","C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\dashboard\\UserChat\\ImageList.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\components\\CustomCollapse.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\components\\AttachedFiles.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\pages\\dashboard\\Tabs\\OnlineUsers.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\admin\\actions.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\redux\\admin\\types.js",[],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\layouts\\AdminLayout\\AdminLayout.js",["545","546","547"],[],"C:\\Users\\Administrator\\Desktop\\ChatBF\\ChatviaFE\\src\\routes\\adminRoutes\\AdminRoutes.js",[],[],{"ruleId":"548","severity":1,"message":"549","line":3,"column":8,"nodeType":"550","messageId":"551","endLine":3,"endColumn":13},{"ruleId":"548","severity":1,"message":"552","line":4,"column":28,"nodeType":"550","messageId":"551","endLine":4,"endColumn":36},{"ruleId":"548","severity":1,"message":"553","line":5,"column":73,"nodeType":"550","messageId":"551","endLine":5,"endColumn":93},{"ruleId":"548","severity":1,"message":"554","line":8,"column":10,"nodeType":"550","messageId":"551","endLine":8,"endColumn":15},{"ruleId":"548","severity":1,"message":"549","line":21,"column":8,"nodeType":"550","messageId":"551","endLine":21,"endColumn":13},{"ruleId":"548","severity":1,"message":"555","line":156,"column":15,"nodeType":"550","messageId":"551","endLine":156,"endColumn":19},{"ruleId":"548","severity":1,"message":"556","line":25,"column":5,"nodeType":"550","messageId":"551","endLine":25,"endColumn":24},{"ruleId":"548","severity":1,"message":"557","line":26,"column":5,"nodeType":"550","messageId":"551","endLine":26,"endColumn":20},{"ruleId":"548","severity":1,"message":"558","line":27,"column":5,"nodeType":"550","messageId":"551","endLine":27,"endColumn":20},{"ruleId":"548","severity":1,"message":"559","line":126,"column":28,"nodeType":"550","messageId":"551","endLine":126,"endColumn":32},{"ruleId":"548","severity":1,"message":"560","line":126,"column":34,"nodeType":"550","messageId":"551","endLine":126,"endColumn":41},{"ruleId":"548","severity":1,"message":"561","line":24,"column":7,"nodeType":"550","messageId":"551","endLine":24,"endColumn":12},{"ruleId":"548","severity":1,"message":"562","line":1,"column":10,"nodeType":"550","messageId":"551","endLine":1,"endColumn":13},{"ruleId":"548","severity":1,"message":"563","line":2,"column":28,"nodeType":"550","messageId":"551","endLine":2,"endColumn":50},{"ruleId":"548","severity":1,"message":"564","line":2,"column":5,"nodeType":"550","messageId":"551","endLine":2,"endColumn":15},{"ruleId":"548","severity":1,"message":"565","line":5,"column":5,"nodeType":"550","messageId":"551","endLine":5,"endColumn":24},{"ruleId":"548","severity":1,"message":"566","line":6,"column":5,"nodeType":"550","messageId":"551","endLine":6,"endColumn":18},{"ruleId":"548","severity":1,"message":"567","line":15,"column":5,"nodeType":"550","messageId":"551","endLine":15,"endColumn":28},{"ruleId":"548","severity":1,"message":"568","line":16,"column":5,"nodeType":"550","messageId":"551","endLine":16,"endColumn":28},{"ruleId":"548","severity":1,"message":"569","line":4,"column":61,"nodeType":"550","messageId":"551","endLine":4,"endColumn":66},{"ruleId":"548","severity":1,"message":"570","line":3,"column":23,"nodeType":"550","messageId":"551","endLine":3,"endColumn":38},{"ruleId":"548","severity":1,"message":"571","line":5,"column":15,"nodeType":"550","messageId":"551","endLine":5,"endColumn":24},{"ruleId":"548","severity":1,"message":"572","line":5,"column":37,"nodeType":"550","messageId":"551","endLine":5,"endColumn":42},{"ruleId":"548","severity":1,"message":"569","line":5,"column":44,"nodeType":"550","messageId":"551","endLine":5,"endColumn":49},{"ruleId":"548","severity":1,"message":"573","line":5,"column":51,"nodeType":"550","messageId":"551","endLine":5,"endColumn":57},{"ruleId":"548","severity":1,"message":"574","line":5,"column":59,"nodeType":"550","messageId":"551","endLine":5,"endColumn":67},{"ruleId":"548","severity":1,"message":"575","line":5,"column":69,"nodeType":"550","messageId":"551","endLine":5,"endColumn":81},{"ruleId":"548","severity":1,"message":"576","line":5,"column":83,"nodeType":"550","messageId":"551","endLine":5,"endColumn":95},{"ruleId":"548","severity":1,"message":"577","line":1,"column":17,"nodeType":"550","messageId":"551","endLine":1,"endColumn":26},{"ruleId":"548","severity":1,"message":"578","line":2,"column":10,"nodeType":"550","messageId":"551","endLine":2,"endColumn":17},{"ruleId":"548","severity":1,"message":"579","line":2,"column":32,"nodeType":"550","messageId":"551","endLine":2,"endColumn":43},{"ruleId":"548","severity":1,"message":"580","line":4,"column":8,"nodeType":"550","messageId":"551","endLine":4,"endColumn":18},{"ruleId":"548","severity":1,"message":"581","line":6,"column":10,"nodeType":"550","messageId":"551","endLine":6,"endColumn":19},{"ruleId":"548","severity":1,"message":"582","line":7,"column":13,"nodeType":"550","messageId":"551","endLine":7,"endColumn":16},{"ruleId":"548","severity":1,"message":"583","line":23,"column":10,"nodeType":"550","messageId":"551","endLine":23,"endColumn":22},{"ruleId":"548","severity":1,"message":"552","line":23,"column":24,"nodeType":"550","messageId":"551","endLine":23,"endColumn":32},{"ruleId":"548","severity":1,"message":"584","line":43,"column":9,"nodeType":"550","messageId":"551","endLine":43,"endColumn":17},{"ruleId":"548","severity":1,"message":"577","line":1,"column":17,"nodeType":"550","messageId":"551","endLine":1,"endColumn":26},{"ruleId":"548","severity":1,"message":"585","line":3,"column":16,"nodeType":"550","messageId":"551","endLine":3,"endColumn":24},{"ruleId":"548","severity":1,"message":"581","line":6,"column":10,"nodeType":"550","messageId":"551","endLine":6,"endColumn":19},{"ruleId":"548","severity":1,"message":"582","line":7,"column":13,"nodeType":"550","messageId":"551","endLine":7,"endColumn":16},{"ruleId":"548","severity":1,"message":"586","line":8,"column":86,"nodeType":"550","messageId":"551","endLine":8,"endColumn":98},{"ruleId":"548","severity":1,"message":"587","line":3,"column":10,"nodeType":"550","messageId":"551","endLine":3,"endColumn":19},{"ruleId":"588","severity":1,"message":"589","line":156,"column":6,"nodeType":"590","endLine":156,"endColumn":34,"suggestions":"591"},{"ruleId":"548","severity":1,"message":"579","line":2,"column":10,"nodeType":"550","messageId":"551","endLine":2,"endColumn":21},{"ruleId":"548","severity":1,"message":"592","line":10,"column":20,"nodeType":"550","messageId":"551","endLine":10,"endColumn":29},{"ruleId":"548","severity":1,"message":"593","line":22,"column":18,"nodeType":"550","messageId":"551","endLine":22,"endColumn":27},{"ruleId":"548","severity":1,"message":"594","line":9,"column":10,"nodeType":"550","messageId":"551","endLine":9,"endColumn":24},{"ruleId":"548","severity":1,"message":"595","line":10,"column":10,"nodeType":"550","messageId":"551","endLine":10,"endColumn":21},{"ruleId":"548","severity":1,"message":"596","line":5,"column":10,"nodeType":"550","messageId":"551","endLine":5,"endColumn":15},{"ruleId":"548","severity":1,"message":"597","line":5,"column":17,"nodeType":"550","messageId":"551","endLine":5,"endColumn":26},{"ruleId":"548","severity":1,"message":"598","line":5,"column":28,"nodeType":"550","messageId":"551","endLine":5,"endColumn":39},{"ruleId":"548","severity":1,"message":"599","line":57,"column":9,"nodeType":"550","messageId":"551","endLine":57,"endColumn":24},{"ruleId":"548","severity":1,"message":"600","line":7,"column":10,"nodeType":"550","messageId":"551","endLine":7,"endColumn":34},{"ruleId":"548","severity":1,"message":"601","line":10,"column":10,"nodeType":"550","messageId":"551","endLine":10,"endColumn":29},{"ruleId":"548","severity":1,"message":"587","line":11,"column":10,"nodeType":"550","messageId":"551","endLine":11,"endColumn":19},{"ruleId":"548","severity":1,"message":"585","line":13,"column":10,"nodeType":"550","messageId":"551","endLine":13,"endColumn":18},{"ruleId":"548","severity":1,"message":"602","line":15,"column":10,"nodeType":"550","messageId":"551","endLine":15,"endColumn":30},{"ruleId":"548","severity":1,"message":"603","line":16,"column":10,"nodeType":"550","messageId":"551","endLine":16,"endColumn":25},{"ruleId":"548","severity":1,"message":"604","line":16,"column":27,"nodeType":"550","messageId":"551","endLine":16,"endColumn":46},{"ruleId":"548","severity":1,"message":"605","line":16,"column":48,"nodeType":"550","messageId":"551","endLine":16,"endColumn":66},{"ruleId":"548","severity":1,"message":"606","line":28,"column":10,"nodeType":"550","messageId":"551","endLine":28,"endColumn":20},{"ruleId":"548","severity":1,"message":"607","line":28,"column":22,"nodeType":"550","messageId":"551","endLine":28,"endColumn":35},{"ruleId":"588","severity":1,"message":"608","line":67,"column":6,"nodeType":"590","endLine":67,"endColumn":15,"suggestions":"609"},{"ruleId":"588","severity":1,"message":"608","line":79,"column":6,"nodeType":"590","endLine":79,"endColumn":15,"suggestions":"610"},{"ruleId":"588","severity":1,"message":"608","line":92,"column":6,"nodeType":"590","endLine":92,"endColumn":15,"suggestions":"611"},{"ruleId":"548","severity":1,"message":"612","line":1,"column":17,"nodeType":"550","messageId":"551","endLine":1,"endColumn":23},{"ruleId":"548","severity":1,"message":"577","line":1,"column":25,"nodeType":"550","messageId":"551","endLine":1,"endColumn":34},{"ruleId":"548","severity":1,"message":"613","line":1,"column":36,"nodeType":"550","messageId":"551","endLine":1,"endColumn":44},{"ruleId":"548","severity":1,"message":"579","line":2,"column":19,"nodeType":"550","messageId":"551","endLine":2,"endColumn":30},{"ruleId":"614","severity":1,"message":"615","line":35,"column":13,"nodeType":"590","messageId":"616","endLine":52,"endColumn":8},{"ruleId":"614","severity":1,"message":"615","line":60,"column":13,"nodeType":"590","messageId":"616","endLine":77,"endColumn":8},{"ruleId":"614","severity":1,"message":"615","line":84,"column":13,"nodeType":"590","messageId":"616","endLine":101,"endColumn":8},{"ruleId":"548","severity":1,"message":"563","line":1,"column":28,"nodeType":"550","messageId":"551","endLine":1,"endColumn":50},{"ruleId":"548","severity":1,"message":"576","line":4,"column":3,"nodeType":"550","messageId":"551","endLine":4,"endColumn":15},{"ruleId":"548","severity":1,"message":"575","line":5,"column":3,"nodeType":"550","messageId":"551","endLine":5,"endColumn":15},{"ruleId":"548","severity":1,"message":"617","line":6,"column":3,"nodeType":"550","messageId":"551","endLine":6,"endColumn":17},{"ruleId":"548","severity":1,"message":"618","line":7,"column":3,"nodeType":"550","messageId":"551","endLine":7,"endColumn":23},{"ruleId":"548","severity":1,"message":"619","line":25,"column":8,"nodeType":"550","messageId":"551","endLine":25,"endColumn":17},{"ruleId":"548","severity":1,"message":"620","line":27,"column":8,"nodeType":"550","messageId":"551","endLine":27,"endColumn":16},{"ruleId":"548","severity":1,"message":"621","line":34,"column":8,"nodeType":"550","messageId":"551","endLine":34,"endColumn":15},{"ruleId":"548","severity":1,"message":"622","line":47,"column":11,"nodeType":"550","messageId":"551","endLine":47,"endColumn":12},{"ruleId":"548","severity":1,"message":"623","line":138,"column":9,"nodeType":"550","messageId":"551","endLine":138,"endColumn":22},{"ruleId":"548","severity":1,"message":"624","line":148,"column":9,"nodeType":"550","messageId":"551","endLine":148,"endColumn":18},{"ruleId":"548","severity":1,"message":"625","line":20,"column":8,"nodeType":"550","messageId":"551","endLine":20,"endColumn":12},{"ruleId":"548","severity":1,"message":"605","line":21,"column":10,"nodeType":"550","messageId":"551","endLine":21,"endColumn":28},{"ruleId":"548","severity":1,"message":"626","line":64,"column":9,"nodeType":"550","messageId":"551","endLine":64,"endColumn":17},{"ruleId":"548","severity":1,"message":"627","line":112,"column":13,"nodeType":"550","messageId":"551","endLine":112,"endColumn":18},{"ruleId":"548","severity":1,"message":"621","line":15,"column":8,"nodeType":"550","messageId":"551","endLine":15,"endColumn":15},{"ruleId":"548","severity":1,"message":"628","line":17,"column":3,"nodeType":"550","messageId":"551","endLine":17,"endColumn":18},{"ruleId":"548","severity":1,"message":"629","line":25,"column":23,"nodeType":"550","messageId":"551","endLine":25,"endColumn":37},{"ruleId":"548","severity":1,"message":"630","line":26,"column":20,"nodeType":"550","messageId":"551","endLine":26,"endColumn":31},{"ruleId":"548","severity":1,"message":"631","line":27,"column":19,"nodeType":"550","messageId":"551","endLine":27,"endColumn":29},{"ruleId":"548","severity":1,"message":"632","line":30,"column":10,"nodeType":"550","messageId":"551","endLine":30,"endColumn":18},{"ruleId":"548","severity":1,"message":"633","line":30,"column":20,"nodeType":"550","messageId":"551","endLine":30,"endColumn":31},{"ruleId":"548","severity":1,"message":"634","line":45,"column":9,"nodeType":"550","messageId":"551","endLine":45,"endColumn":17},{"ruleId":"548","severity":1,"message":"635","line":21,"column":10,"nodeType":"550","messageId":"551","endLine":21,"endColumn":24},{"ruleId":"548","severity":1,"message":"636","line":47,"column":9,"nodeType":"550","messageId":"551","endLine":47,"endColumn":21},{"ruleId":"548","severity":1,"message":"637","line":93,"column":9,"nodeType":"550","messageId":"551","endLine":93,"endColumn":22},{"ruleId":"638","severity":1,"message":"639","line":1,"column":1,"nodeType":"640","messageId":"641","fix":"642"},{"ruleId":"548","severity":1,"message":"621","line":21,"column":8,"nodeType":"550","messageId":"551","endLine":21,"endColumn":15},{"ruleId":"548","severity":1,"message":"643","line":27,"column":10,"nodeType":"550","messageId":"551","endLine":27,"endColumn":13},{"ruleId":"548","severity":1,"message":"644","line":28,"column":10,"nodeType":"550","messageId":"551","endLine":28,"endColumn":29},{"ruleId":"548","severity":1,"message":"626","line":69,"column":9,"nodeType":"550","messageId":"551","endLine":69,"endColumn":17},{"ruleId":"548","severity":1,"message":"645","line":78,"column":19,"nodeType":"550","messageId":"551","endLine":78,"endColumn":29},{"ruleId":"548","severity":1,"message":"646","line":79,"column":19,"nodeType":"550","messageId":"551","endLine":79,"endColumn":29},{"ruleId":"548","severity":1,"message":"647","line":80,"column":18,"nodeType":"550","messageId":"551","endLine":80,"endColumn":27},{"ruleId":"548","severity":1,"message":"571","line":18,"column":3,"nodeType":"550","messageId":"551","endLine":18,"endColumn":12},{"ruleId":"548","severity":1,"message":"643","line":27,"column":10,"nodeType":"550","messageId":"551","endLine":27,"endColumn":13},{"ruleId":"548","severity":1,"message":"648","line":45,"column":9,"nodeType":"550","messageId":"551","endLine":45,"endColumn":21},{"ruleId":"588","severity":1,"message":"649","line":163,"column":6,"nodeType":"590","endLine":163,"endColumn":59,"suggestions":"650"},{"ruleId":"548","severity":1,"message":"651","line":5,"column":7,"nodeType":"550","messageId":"551","endLine":5,"endColumn":16},{"ruleId":"548","severity":1,"message":"652","line":6,"column":7,"nodeType":"550","messageId":"551","endLine":6,"endColumn":16},{"ruleId":"548","severity":1,"message":"653","line":7,"column":7,"nodeType":"550","messageId":"551","endLine":7,"endColumn":15},"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'apiError' is defined but never used.","'acceptContactSuccess' is defined but never used.","'Alert' is defined but never used.","'data' is assigned a value but never used.","'fetchMessageRequest' is defined but never used.","'sendFileFailure' is defined but never used.","'sendFileSuccess' is defined but never used.","'file' is assigned a value but never used.","'isgroup' is assigned a value but never used.","'Admin' is assigned a value but never used.","'act' is defined but never used.","'SEND_STREAM_VIDEO_CALL' is defined but never used.","'LOGIN_USER' is defined but never used.","'LOGOUT_USER_SUCCESS' is defined but never used.","'REGISTER_USER' is defined but never used.","'FORGET_PASSWORD_SUCCESS' is defined but never used.","'FORGET_PASSWORD_FAILURE' is defined but never used.","'Input' is defined but never used.","'useSearchParams' is defined but never used.","'Container' is defined but never used.","'Label' is defined but never used.","'Button' is defined but never used.","'Dropdown' is defined but never used.","'DropdownItem' is defined but never used.","'DropdownMenu' is defined but never used.","'useEffect' is defined but never used.","'connect' is defined but never used.","'useSelector' is defined but never used.","'withRouter' is defined but never used.","'useFormik' is defined but never used.","'Yup' is defined but never used.","'registerUser' is defined but never used.","'navigate' is assigned a value but never used.","'Navigate' is defined but never used.","'FormFeedback' is defined but never used.","'loginUser' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'myMeeting'. Either include it or remove the dependency array.","ArrayExpression",["654"],"'setIsCall' is assigned a value but never used.","'setAPP_ID' is assigned a value but never used.","'recentMessages' is assigned a value but never used.","'onlineUsers' is assigned a value but never used.","'thead' is defined but never used.","'blockUser' is defined but never used.","'dbBlockUser' is defined but never used.","'openUpdateModal' is assigned a value but never used.","'fetchConversationRequest' is defined but never used.","'loginProfileRequest' is defined but never used.","'HubConnectionBuilder' is defined but never used.","'selectedMessage' is defined but never used.","'sendStreamVideoCall' is defined but never used.","'sendValueVideoCall' is defined but never used.","'connection' is assigned a value but never used.","'setConnection' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'userId'. Either include it or remove the dependency array.",["655"],["656"],["657"],"'useRef' is defined but never used.","'useState' is defined but never used.","no-sparse-arrays","Unexpected comma in middle of array.","unexpectedSparseArray","'DropdownToggle' is defined but never used.","'UncontrolledDropdown' is defined but never used.","'ImageList' is defined but never used.","'FileList' is defined but never used.","'avatar1' is defined but never used.","'t' is assigned a value but never used.","'deleteMessage' is assigned a value but never used.","'dataArray' is assigned a value but never used.","'user' is defined but never used.","'dispatch' is assigned a value but never used.","'token' is assigned a value but never used.","'sendFileRequest' is defined but never used.","'setMessageType' is assigned a value but never used.","'setMediaUrl' is assigned a value but never used.","'setIsGroup' is assigned a value but never used.","'receiver' is assigned a value but never used.","'setReceiver' is assigned a value but never used.","'senderId' is assigned a value but never used.","'recentChatList' is assigned a value but never used.","'openUserChat' is assigned a value but never used.","'selectedState' is assigned a value but never used.","unicode-bom","Unexpected Unicode BOM (Byte Order Mark).","Program","unexpected",{"range":"658","text":"659"},"'use' is defined but never used.","'fetchProfileRequest' is defined but never used.","'setOldPass' is assigned a value but never used.","'setNewPass' is assigned a value but never used.","'setRePass' is assigned a value but never used.","'profileState' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'profile?.userId'. Either include it or remove the dependency array.",["660"],"'Dashboard' is assigned a value but never used.","'UserGroup' is assigned a value but never used.","'Messages' is assigned a value but never used.",{"desc":"661","fix":"662"},{"desc":"663","fix":"664"},{"desc":"663","fix":"665"},{"desc":"663","fix":"666"},[-1,0],"",{"desc":"667","fix":"668"},"Update the dependencies array to be: [callType, roomId, navigate, myMeeting]",{"range":"669","text":"670"},"Update the dependencies array to be: [onEvent, userId]",{"range":"671","text":"672"},{"range":"673","text":"672"},{"range":"674","text":"672"},"Update the dependencies array to be: [otherProfile, selectedState, messageState, dispatch, profile?.userId]",{"range":"675","text":"676"},[4416,4444],"[callType, roomId, navigate, myMeeting]",[2186,2195],"[onEvent, userId]",[2524,2533],[2867,2876],[5140,5193],"[otherProfile, selectedState, messageState, dispatch, profile?.userId]"]