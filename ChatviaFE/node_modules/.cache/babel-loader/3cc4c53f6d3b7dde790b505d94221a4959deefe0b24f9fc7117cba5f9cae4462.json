{"ast":null,"code":"// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { AccessTokenHttpClient } from \"./AccessTokenHttpClient\";\nimport { DefaultHttpClient } from \"./DefaultHttpClient\";\nimport { AggregateErrors, DisabledTransportError, FailedToNegotiateWithServerError, FailedToStartTransportError, HttpError, UnsupportedTransportError, AbortError } from \"./Errors\";\nimport { LogLevel } from \"./ILogger\";\nimport { HttpTransportType, TransferFormat } from \"./ITransport\";\nimport { LongPollingTransport } from \"./LongPollingTransport\";\nimport { ServerSentEventsTransport } from \"./ServerSentEventsTransport\";\nimport { Arg, createLogger, getUserAgentHeader, Platform } from \"./Utils\";\nimport { WebSocketTransport } from \"./WebSocketTransport\";\nconst MAX_REDIRECTS = 100;\n/** @private */\nexport class HttpConnection {\n  constructor(url, options = {}) {\n    this._stopPromiseResolver = () => {};\n    this.features = {};\n    this._negotiateVersion = 1;\n    Arg.isRequired(url, \"url\");\n    this._logger = createLogger(options.logger);\n    this.baseUrl = this._resolveUrl(url);\n    options = options || {};\n    options.logMessageContent = options.logMessageContent === undefined ? false : options.logMessageContent;\n    if (typeof options.withCredentials === \"boolean\" || options.withCredentials === undefined) {\n      options.withCredentials = options.withCredentials === undefined ? true : options.withCredentials;\n    } else {\n      throw new Error(\"withCredentials option was not a 'boolean' or 'undefined' value\");\n    }\n    options.timeout = options.timeout === undefined ? 100 * 1000 : options.timeout;\n    let webSocketModule = null;\n    let eventSourceModule = null;\n    if (Platform.isNode && typeof require !== \"undefined\") {\n      // In order to ignore the dynamic require in webpack builds we need to do this magic\n      // @ts-ignore: TS doesn't know about these names\n      const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\n      webSocketModule = requireFunc(\"ws\");\n      eventSourceModule = requireFunc(\"eventsource\");\n    }\n    if (!Platform.isNode && typeof WebSocket !== \"undefined\" && !options.WebSocket) {\n      options.WebSocket = WebSocket;\n    } else if (Platform.isNode && !options.WebSocket) {\n      if (webSocketModule) {\n        options.WebSocket = webSocketModule;\n      }\n    }\n    if (!Platform.isNode && typeof EventSource !== \"undefined\" && !options.EventSource) {\n      options.EventSource = EventSource;\n    } else if (Platform.isNode && !options.EventSource) {\n      if (typeof eventSourceModule !== \"undefined\") {\n        options.EventSource = eventSourceModule;\n      }\n    }\n    this._httpClient = new AccessTokenHttpClient(options.httpClient || new DefaultHttpClient(this._logger), options.accessTokenFactory);\n    this._connectionState = \"Disconnected\" /* ConnectionState.Disconnected */;\n    this._connectionStarted = false;\n    this._options = options;\n    this.onreceive = null;\n    this.onclose = null;\n  }\n  async start(transferFormat) {\n    transferFormat = transferFormat || TransferFormat.Binary;\n    Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\n    this._logger.log(LogLevel.Debug, `Starting connection with transfer format '${TransferFormat[transferFormat]}'.`);\n    if (this._connectionState !== \"Disconnected\" /* ConnectionState.Disconnected */) {\n      return Promise.reject(new Error(\"Cannot start an HttpConnection that is not in the 'Disconnected' state.\"));\n    }\n    this._connectionState = \"Connecting\" /* ConnectionState.Connecting */;\n    this._startInternalPromise = this._startInternal(transferFormat);\n    await this._startInternalPromise;\n    // The TypeScript compiler thinks that connectionState must be Connecting here. The TypeScript compiler is wrong.\n    if (this._connectionState === \"Disconnecting\" /* ConnectionState.Disconnecting */) {\n      // stop() was called and transitioned the client into the Disconnecting state.\n      const message = \"Failed to start the HttpConnection before stop() was called.\";\n      this._logger.log(LogLevel.Error, message);\n      // We cannot await stopPromise inside startInternal since stopInternal awaits the startInternalPromise.\n      await this._stopPromise;\n      return Promise.reject(new AbortError(message));\n    } else if (this._connectionState !== \"Connected\" /* ConnectionState.Connected */) {\n      // stop() was called and transitioned the client into the Disconnecting state.\n      const message = \"HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!\";\n      this._logger.log(LogLevel.Error, message);\n      return Promise.reject(new AbortError(message));\n    }\n    this._connectionStarted = true;\n  }\n  send(data) {\n    if (this._connectionState !== \"Connected\" /* ConnectionState.Connected */) {\n      return Promise.reject(new Error(\"Cannot send data if the connection is not in the 'Connected' State.\"));\n    }\n    if (!this._sendQueue) {\n      this._sendQueue = new TransportSendQueue(this.transport);\n    }\n    // Transport will not be null if state is connected\n    return this._sendQueue.send(data);\n  }\n  async stop(error) {\n    if (this._connectionState === \"Disconnected\" /* ConnectionState.Disconnected */) {\n      this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnected state.`);\n      return Promise.resolve();\n    }\n    if (this._connectionState === \"Disconnecting\" /* ConnectionState.Disconnecting */) {\n      this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\n      return this._stopPromise;\n    }\n    this._connectionState = \"Disconnecting\" /* ConnectionState.Disconnecting */;\n    this._stopPromise = new Promise(resolve => {\n      // Don't complete stop() until stopConnection() completes.\n      this._stopPromiseResolver = resolve;\n    });\n    // stopInternal should never throw so just observe it.\n    await this._stopInternal(error);\n    await this._stopPromise;\n  }\n  async _stopInternal(error) {\n    // Set error as soon as possible otherwise there is a race between\n    // the transport closing and providing an error and the error from a close message\n    // We would prefer the close message error.\n    this._stopError = error;\n    try {\n      await this._startInternalPromise;\n    } catch (e) {\n      // This exception is returned to the user as a rejected Promise from the start method.\n    }\n    // The transport's onclose will trigger stopConnection which will run our onclose event.\n    // The transport should always be set if currently connected. If it wasn't set, it's likely because\n    // stop was called during start() and start() failed.\n    if (this.transport) {\n      try {\n        await this.transport.stop();\n      } catch (e) {\n        this._logger.log(LogLevel.Error, `HttpConnection.transport.stop() threw error '${e}'.`);\n        this._stopConnection();\n      }\n      this.transport = undefined;\n    } else {\n      this._logger.log(LogLevel.Debug, \"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.\");\n    }\n  }\n  async _startInternal(transferFormat) {\n    // Store the original base url and the access token factory since they may change\n    // as part of negotiating\n    let url = this.baseUrl;\n    this._accessTokenFactory = this._options.accessTokenFactory;\n    this._httpClient._accessTokenFactory = this._accessTokenFactory;\n    try {\n      if (this._options.skipNegotiation) {\n        if (this._options.transport === HttpTransportType.WebSockets) {\n          // No need to add a connection ID in this case\n          this.transport = this._constructTransport(HttpTransportType.WebSockets);\n          // We should just call connect directly in this case.\n          // No fallback or negotiate in this case.\n          await this._startTransport(url, transferFormat);\n        } else {\n          throw new Error(\"Negotiation can only be skipped when using the WebSocket transport directly.\");\n        }\n      } else {\n        let negotiateResponse = null;\n        let redirects = 0;\n        do {\n          negotiateResponse = await this._getNegotiationResponse(url);\n          // the user tries to stop the connection when it is being started\n          if (this._connectionState === \"Disconnecting\" /* ConnectionState.Disconnecting */ || this._connectionState === \"Disconnected\" /* ConnectionState.Disconnected */) {\n            throw new AbortError(\"The connection was stopped during negotiation.\");\n          }\n          if (negotiateResponse.error) {\n            throw new Error(negotiateResponse.error);\n          }\n          if (negotiateResponse.ProtocolVersion) {\n            throw new Error(\"Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.\");\n          }\n          if (negotiateResponse.url) {\n            url = negotiateResponse.url;\n          }\n          if (negotiateResponse.accessToken) {\n            // Replace the current access token factory with one that uses\n            // the returned access token\n            const accessToken = negotiateResponse.accessToken;\n            this._accessTokenFactory = () => accessToken;\n            // set the factory to undefined so the AccessTokenHttpClient won't retry with the same token, since we know it won't change until a connection restart\n            this._httpClient._accessToken = accessToken;\n            this._httpClient._accessTokenFactory = undefined;\n          }\n          redirects++;\n        } while (negotiateResponse.url && redirects < MAX_REDIRECTS);\n        if (redirects === MAX_REDIRECTS && negotiateResponse.url) {\n          throw new Error(\"Negotiate redirection limit exceeded.\");\n        }\n        await this._createTransport(url, this._options.transport, negotiateResponse, transferFormat);\n      }\n      if (this.transport instanceof LongPollingTransport) {\n        this.features.inherentKeepAlive = true;\n      }\n      if (this._connectionState === \"Connecting\" /* ConnectionState.Connecting */) {\n        // Ensure the connection transitions to the connected state prior to completing this.startInternalPromise.\n        // start() will handle the case when stop was called and startInternal exits still in the disconnecting state.\n        this._logger.log(LogLevel.Debug, \"The HttpConnection connected successfully.\");\n        this._connectionState = \"Connected\" /* ConnectionState.Connected */;\n      }\n      // stop() is waiting on us via this.startInternalPromise so keep this.transport around so it can clean up.\n      // This is the only case startInternal can exit in neither the connected nor disconnected state because stopConnection()\n      // will transition to the disconnected state. start() will wait for the transition using the stopPromise.\n    } catch (e) {\n      this._logger.log(LogLevel.Error, \"Failed to start the connection: \" + e);\n      this._connectionState = \"Disconnected\" /* ConnectionState.Disconnected */;\n      this.transport = undefined;\n      // if start fails, any active calls to stop assume that start will complete the stop promise\n      this._stopPromiseResolver();\n      return Promise.reject(e);\n    }\n  }\n  async _getNegotiationResponse(url) {\n    const headers = {};\n    const [name, value] = getUserAgentHeader();\n    headers[name] = value;\n    const negotiateUrl = this._resolveNegotiateUrl(url);\n    this._logger.log(LogLevel.Debug, `Sending negotiation request: ${negotiateUrl}.`);\n    try {\n      const response = await this._httpClient.post(negotiateUrl, {\n        content: \"\",\n        headers: {\n          ...headers,\n          ...this._options.headers\n        },\n        timeout: this._options.timeout,\n        withCredentials: this._options.withCredentials\n      });\n      if (response.statusCode !== 200) {\n        return Promise.reject(new Error(`Unexpected status code returned from negotiate '${response.statusCode}'`));\n      }\n      const negotiateResponse = JSON.parse(response.content);\n      if (!negotiateResponse.negotiateVersion || negotiateResponse.negotiateVersion < 1) {\n        // Negotiate version 0 doesn't use connectionToken\n        // So we set it equal to connectionId so all our logic can use connectionToken without being aware of the negotiate version\n        negotiateResponse.connectionToken = negotiateResponse.connectionId;\n      }\n      if (negotiateResponse.useStatefulReconnect && this._options._useStatefulReconnect !== true) {\n        return Promise.reject(new FailedToNegotiateWithServerError(\"Client didn't negotiate Stateful Reconnect but the server did.\"));\n      }\n      return negotiateResponse;\n    } catch (e) {\n      let errorMessage = \"Failed to complete negotiation with the server: \" + e;\n      if (e instanceof HttpError) {\n        if (e.statusCode === 404) {\n          errorMessage = errorMessage + \" Either this is not a SignalR endpoint or there is a proxy blocking the connection.\";\n        }\n      }\n      this._logger.log(LogLevel.Error, errorMessage);\n      return Promise.reject(new FailedToNegotiateWithServerError(errorMessage));\n    }\n  }\n  _createConnectUrl(url, connectionToken) {\n    if (!connectionToken) {\n      return url;\n    }\n    return url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + `id=${connectionToken}`;\n  }\n  async _createTransport(url, requestedTransport, negotiateResponse, requestedTransferFormat) {\n    let connectUrl = this._createConnectUrl(url, negotiateResponse.connectionToken);\n    if (this._isITransport(requestedTransport)) {\n      this._logger.log(LogLevel.Debug, \"Connection was provided an instance of ITransport, using that directly.\");\n      this.transport = requestedTransport;\n      await this._startTransport(connectUrl, requestedTransferFormat);\n      this.connectionId = negotiateResponse.connectionId;\n      return;\n    }\n    const transportExceptions = [];\n    const transports = negotiateResponse.availableTransports || [];\n    let negotiate = negotiateResponse;\n    for (const endpoint of transports) {\n      const transportOrError = this._resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat, (negotiate === null || negotiate === void 0 ? void 0 : negotiate.useStatefulReconnect) === true);\n      if (transportOrError instanceof Error) {\n        // Store the error and continue, we don't want to cause a re-negotiate in these cases\n        transportExceptions.push(`${endpoint.transport} failed:`);\n        transportExceptions.push(transportOrError);\n      } else if (this._isITransport(transportOrError)) {\n        this.transport = transportOrError;\n        if (!negotiate) {\n          try {\n            negotiate = await this._getNegotiationResponse(url);\n          } catch (ex) {\n            return Promise.reject(ex);\n          }\n          connectUrl = this._createConnectUrl(url, negotiate.connectionToken);\n        }\n        try {\n          await this._startTransport(connectUrl, requestedTransferFormat);\n          this.connectionId = negotiate.connectionId;\n          return;\n        } catch (ex) {\n          this._logger.log(LogLevel.Error, `Failed to start the transport '${endpoint.transport}': ${ex}`);\n          negotiate = undefined;\n          transportExceptions.push(new FailedToStartTransportError(`${endpoint.transport} failed: ${ex}`, HttpTransportType[endpoint.transport]));\n          if (this._connectionState !== \"Connecting\" /* ConnectionState.Connecting */) {\n            const message = \"Failed to select transport before stop() was called.\";\n            this._logger.log(LogLevel.Debug, message);\n            return Promise.reject(new AbortError(message));\n          }\n        }\n      }\n    }\n    if (transportExceptions.length > 0) {\n      return Promise.reject(new AggregateErrors(`Unable to connect to the server with any of the available transports. ${transportExceptions.join(\" \")}`, transportExceptions));\n    }\n    return Promise.reject(new Error(\"None of the transports supported by the client are supported by the server.\"));\n  }\n  _constructTransport(transport) {\n    switch (transport) {\n      case HttpTransportType.WebSockets:\n        if (!this._options.WebSocket) {\n          throw new Error(\"'WebSocket' is not supported in your environment.\");\n        }\n        return new WebSocketTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options.logMessageContent, this._options.WebSocket, this._options.headers || {});\n      case HttpTransportType.ServerSentEvents:\n        if (!this._options.EventSource) {\n          throw new Error(\"'EventSource' is not supported in your environment.\");\n        }\n        return new ServerSentEventsTransport(this._httpClient, this._httpClient._accessToken, this._logger, this._options);\n      case HttpTransportType.LongPolling:\n        return new LongPollingTransport(this._httpClient, this._logger, this._options);\n      default:\n        throw new Error(`Unknown transport: ${transport}.`);\n    }\n  }\n  _startTransport(url, transferFormat) {\n    this.transport.onreceive = this.onreceive;\n    if (this.features.reconnect) {\n      this.transport.onclose = async e => {\n        let callStop = false;\n        if (this.features.reconnect) {\n          try {\n            this.features.disconnected();\n            await this.transport.connect(url, transferFormat);\n            await this.features.resend();\n          } catch {\n            callStop = true;\n          }\n        } else {\n          this._stopConnection(e);\n          return;\n        }\n        if (callStop) {\n          this._stopConnection(e);\n        }\n      };\n    } else {\n      this.transport.onclose = e => this._stopConnection(e);\n    }\n    return this.transport.connect(url, transferFormat);\n  }\n  _resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat, useStatefulReconnect) {\n    const transport = HttpTransportType[endpoint.transport];\n    if (transport === null || transport === undefined) {\n      this._logger.log(LogLevel.Debug, `Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\n      return new Error(`Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\n    } else {\n      if (transportMatches(requestedTransport, transport)) {\n        const transferFormats = endpoint.transferFormats.map(s => TransferFormat[s]);\n        if (transferFormats.indexOf(requestedTransferFormat) >= 0) {\n          if (transport === HttpTransportType.WebSockets && !this._options.WebSocket || transport === HttpTransportType.ServerSentEvents && !this._options.EventSource) {\n            this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it is not supported in your environment.'`);\n            return new UnsupportedTransportError(`'${HttpTransportType[transport]}' is not supported in your environment.`, transport);\n          } else {\n            this._logger.log(LogLevel.Debug, `Selecting transport '${HttpTransportType[transport]}'.`);\n            try {\n              this.features.reconnect = transport === HttpTransportType.WebSockets ? useStatefulReconnect : undefined;\n              return this._constructTransport(transport);\n            } catch (ex) {\n              return ex;\n            }\n          }\n        } else {\n          this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it does not support the requested transfer format '${TransferFormat[requestedTransferFormat]}'.`);\n          return new Error(`'${HttpTransportType[transport]}' does not support ${TransferFormat[requestedTransferFormat]}.`);\n        }\n      } else {\n        this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it was disabled by the client.`);\n        return new DisabledTransportError(`'${HttpTransportType[transport]}' is disabled by the client.`, transport);\n      }\n    }\n  }\n  _isITransport(transport) {\n    return transport && typeof transport === \"object\" && \"connect\" in transport;\n  }\n  _stopConnection(error) {\n    this._logger.log(LogLevel.Debug, `HttpConnection.stopConnection(${error}) called while in state ${this._connectionState}.`);\n    this.transport = undefined;\n    // If we have a stopError, it takes precedence over the error from the transport\n    error = this._stopError || error;\n    this._stopError = undefined;\n    if (this._connectionState === \"Disconnected\" /* ConnectionState.Disconnected */) {\n      this._logger.log(LogLevel.Debug, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is already in the disconnected state.`);\n      return;\n    }\n    if (this._connectionState === \"Connecting\" /* ConnectionState.Connecting */) {\n      this._logger.log(LogLevel.Warning, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is still in the connecting state.`);\n      throw new Error(`HttpConnection.stopConnection(${error}) was called while the connection is still in the connecting state.`);\n    }\n    if (this._connectionState === \"Disconnecting\" /* ConnectionState.Disconnecting */) {\n      // A call to stop() induced this call to stopConnection and needs to be completed.\n      // Any stop() awaiters will be scheduled to continue after the onclose callback fires.\n      this._stopPromiseResolver();\n    }\n    if (error) {\n      this._logger.log(LogLevel.Error, `Connection disconnected with error '${error}'.`);\n    } else {\n      this._logger.log(LogLevel.Information, \"Connection disconnected.\");\n    }\n    if (this._sendQueue) {\n      this._sendQueue.stop().catch(e => {\n        this._logger.log(LogLevel.Error, `TransportSendQueue.stop() threw error '${e}'.`);\n      });\n      this._sendQueue = undefined;\n    }\n    this.connectionId = undefined;\n    this._connectionState = \"Disconnected\" /* ConnectionState.Disconnected */;\n    if (this._connectionStarted) {\n      this._connectionStarted = false;\n      try {\n        if (this.onclose) {\n          this.onclose(error);\n        }\n      } catch (e) {\n        this._logger.log(LogLevel.Error, `HttpConnection.onclose(${error}) threw error '${e}'.`);\n      }\n    }\n  }\n  _resolveUrl(url) {\n    // startsWith is not supported in IE\n    if (url.lastIndexOf(\"https://\", 0) === 0 || url.lastIndexOf(\"http://\", 0) === 0) {\n      return url;\n    }\n    if (!Platform.isBrowser) {\n      throw new Error(`Cannot resolve '${url}'.`);\n    }\n    // Setting the url to the href propery of an anchor tag handles normalization\n    // for us. There are 3 main cases.\n    // 1. Relative path normalization e.g \"b\" -> \"http://localhost:5000/a/b\"\n    // 2. Absolute path normalization e.g \"/a/b\" -> \"http://localhost:5000/a/b\"\n    // 3. Networkpath reference normalization e.g \"//localhost:5000/a/b\" -> \"http://localhost:5000/a/b\"\n    const aTag = window.document.createElement(\"a\");\n    aTag.href = url;\n    this._logger.log(LogLevel.Information, `Normalizing '${url}' to '${aTag.href}'.`);\n    return aTag.href;\n  }\n  _resolveNegotiateUrl(url) {\n    const negotiateUrl = new URL(url);\n    if (negotiateUrl.pathname.endsWith('/')) {\n      negotiateUrl.pathname += \"negotiate\";\n    } else {\n      negotiateUrl.pathname += \"/negotiate\";\n    }\n    const searchParams = new URLSearchParams(negotiateUrl.searchParams);\n    if (!searchParams.has(\"negotiateVersion\")) {\n      searchParams.append(\"negotiateVersion\", this._negotiateVersion.toString());\n    }\n    if (searchParams.has(\"useStatefulReconnect\")) {\n      if (searchParams.get(\"useStatefulReconnect\") === \"true\") {\n        this._options._useStatefulReconnect = true;\n      }\n    } else if (this._options._useStatefulReconnect === true) {\n      searchParams.append(\"useStatefulReconnect\", \"true\");\n    }\n    negotiateUrl.search = searchParams.toString();\n    return negotiateUrl.toString();\n  }\n}\nfunction transportMatches(requestedTransport, actualTransport) {\n  return !requestedTransport || (actualTransport & requestedTransport) !== 0;\n}\n/** @private */\nexport class TransportSendQueue {\n  constructor(_transport) {\n    this._transport = _transport;\n    this._buffer = [];\n    this._executing = true;\n    this._sendBufferedData = new PromiseSource();\n    this._transportResult = new PromiseSource();\n    this._sendLoopPromise = this._sendLoop();\n  }\n  send(data) {\n    this._bufferData(data);\n    if (!this._transportResult) {\n      this._transportResult = new PromiseSource();\n    }\n    return this._transportResult.promise;\n  }\n  stop() {\n    this._executing = false;\n    this._sendBufferedData.resolve();\n    return this._sendLoopPromise;\n  }\n  _bufferData(data) {\n    if (this._buffer.length && typeof this._buffer[0] !== typeof data) {\n      throw new Error(`Expected data to be of type ${typeof this._buffer} but was of type ${typeof data}`);\n    }\n    this._buffer.push(data);\n    this._sendBufferedData.resolve();\n  }\n  async _sendLoop() {\n    while (true) {\n      await this._sendBufferedData.promise;\n      if (!this._executing) {\n        if (this._transportResult) {\n          this._transportResult.reject(\"Connection stopped.\");\n        }\n        break;\n      }\n      this._sendBufferedData = new PromiseSource();\n      const transportResult = this._transportResult;\n      this._transportResult = undefined;\n      const data = typeof this._buffer[0] === \"string\" ? this._buffer.join(\"\") : TransportSendQueue._concatBuffers(this._buffer);\n      this._buffer.length = 0;\n      try {\n        await this._transport.send(data);\n        transportResult.resolve();\n      } catch (error) {\n        transportResult.reject(error);\n      }\n    }\n  }\n  static _concatBuffers(arrayBuffers) {\n    const totalLength = arrayBuffers.map(b => b.byteLength).reduce((a, b) => a + b);\n    const result = new Uint8Array(totalLength);\n    let offset = 0;\n    for (const item of arrayBuffers) {\n      result.set(new Uint8Array(item), offset);\n      offset += item.byteLength;\n    }\n    return result.buffer;\n  }\n}\nclass PromiseSource {\n  constructor() {\n    this.promise = new Promise((resolve, reject) => [this._resolver, this._rejecter] = [resolve, reject]);\n  }\n  resolve() {\n    this._resolver();\n  }\n  reject(reason) {\n    this._rejecter(reason);\n  }\n}\n//# sourceMappingURL=HttpConnection.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}