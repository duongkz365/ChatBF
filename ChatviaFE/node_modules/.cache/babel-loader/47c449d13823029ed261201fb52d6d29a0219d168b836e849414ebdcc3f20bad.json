{"ast":null,"code":"// src/redux/message/actions.js\n\nimport { FETCH_MESSAGE_REQUEST, FETCH_MESSAGE_SUCCESS, FETCH_MESSAGE_FAILURE, COPY_MESSAGE_REQUEST, COPY_MESSAGE_SUCCESS, COPY_MESSAGE_FAILURE, SAVE_MESSAGE_REQUEST, SAVE_MESSAGE_SUCCESS, SAVE_MESSAGE_FAILURE, FORWARD_MESSAGE_REQUEST, FORWARD_MESSAGE_SUCCESS, FORWARD_MESSAGE_FAILURE, DELETE_MESSAGE_REQUEST, DELETE_MESSAGE_SUCCESS, DELETE_MESSAGE_FAILURE, SEND_MESSAGE_REQUEST, SEND_MESSAGE_SUCCESS, SEND_MESSAGE_FAILURE, SEEN_MESSAGE_REQUEST, SEEN_MESSAGE_SUCCESS, SEEN_MESSAGE_FAILURE, UPDATE_MESSAGE_SUCCES, UPLOAD_FILE_REQUEST, UPLOAD_FILE_SUCCESS, UPLOAD_FILE_FAILURE, SEND_FILE_REQUEST, SEND_FILE_SUCCESS, SEND_FILE_FAILURE } from \"../actionTypes\";\n\n// Actions cho việc fetch\nexport const fetchMessageRequest = () => ({\n  type: FETCH_MESSAGE_REQUEST\n});\nexport const fetchMessageSuccess = messages => ({\n  type: FETCH_MESSAGE_SUCCESS,\n  payload: messages\n});\nexport const fetchMessageFailure = error => ({\n  type: FETCH_MESSAGE_FAILURE,\n  payload: error\n});\n\n// Actions cho các thao tác message với request, success, failure\nexport const copyMessageRequest = messageId => ({\n  type: COPY_MESSAGE_REQUEST,\n  payload: messageId\n});\nexport const copyMessageSuccess = messageId => ({\n  type: COPY_MESSAGE_SUCCESS,\n  payload: messageId\n});\nexport const copyMessageFailure = error => ({\n  type: COPY_MESSAGE_FAILURE,\n  payload: error\n});\n\n// SEND MESSAGE\n\nexport const saveMessageRequest = (senderId, receiverId, messageType, content, mediaUrl, isGroup) => ({\n  type: SAVE_MESSAGE_REQUEST,\n  payload: {\n    senderId,\n    receiverId,\n    messageType,\n    content,\n    mediaUrl,\n    isGroup\n  }\n});\nexport const saveMessageSuccess = messageId => ({\n  type: SAVE_MESSAGE_SUCCESS,\n  payload: messageId\n});\nexport const saveMessageFailure = error => ({\n  type: SAVE_MESSAGE_FAILURE,\n  payload: error\n});\nexport const forwardMessageRequest = messageId => ({\n  type: FORWARD_MESSAGE_REQUEST,\n  payload: messageId\n});\nexport const forwardMessageSuccess = messageId => ({\n  type: FORWARD_MESSAGE_SUCCESS,\n  payload: messageId\n});\nexport const forwardMessageFailure = error => ({\n  type: FORWARD_MESSAGE_FAILURE,\n  payload: error\n});\nexport const deleteMessageRequest = messageId => ({\n  type: DELETE_MESSAGE_REQUEST,\n  payload: messageId\n});\nexport const deleteMessageSuccess = messageId => ({\n  type: DELETE_MESSAGE_SUCCESS,\n  payload: messageId\n});\nexport const deleteMessageFailure = error => ({\n  type: DELETE_MESSAGE_FAILURE,\n  payload: error\n});\nexport const sendMessageRequest = (receiverId, messageType, content, mediaUrl, isGroupMessage) => ({\n  type: SEND_MESSAGE_REQUEST,\n  payload: {\n    receiverId,\n    messageType,\n    content,\n    mediaUrl,\n    isGroupMessage\n  }\n});\nexport const sendMessageSuccess = messageId => ({\n  type: SEND_MESSAGE_SUCCESS,\n  payload: messageId\n});\nexport const sendMessageFailure = error => ({\n  type: SEND_MESSAGE_FAILURE,\n  payload: error\n});\nexport const seenMessageRequest = otherId => ({\n  type: SEEN_MESSAGE_REQUEST,\n  payload: {\n    otherId\n  }\n});\nexport const seenMessageSuccess = messageId => ({\n  type: SEEN_MESSAGE_SUCCESS,\n  payload: messageId\n});\nexport const seenMessageFailure = error => ({\n  type: SEEN_MESSAGE_FAILURE,\n  payload: error\n});\nexport const updateMessageSuccess = message => ({\n  type: UPDATE_MESSAGE_SUCCES,\n  payload: message\n});\nexport const uploadFileRequest = file => ({\n  type: UPLOAD_FILE_REQUEST,\n  payload: file\n});\nexport const uploadFileSuccess = response => ({\n  type: UPLOAD_FILE_SUCCESS,\n  payload: response\n});\nexport const uploadFileFailure = error => ({\n  type: UPLOAD_FILE_FAILURE,\n  payload: error\n});\nexport const sendFileRequest = () => ({\n  type: SEND_FILE_REQUEST\n});\nexport const sendFileSuccess = response => ({\n  type: SEND_FILE_SUCCESS,\n  payload: response\n});\nexport const sendFileFailure = error => ({\n  type: SEND_FILE_FAILURE,\n  payload: error\n});","map":{"version":3,"names":["FETCH_MESSAGE_REQUEST","FETCH_MESSAGE_SUCCESS","FETCH_MESSAGE_FAILURE","COPY_MESSAGE_REQUEST","COPY_MESSAGE_SUCCESS","COPY_MESSAGE_FAILURE","SAVE_MESSAGE_REQUEST","SAVE_MESSAGE_SUCCESS","SAVE_MESSAGE_FAILURE","FORWARD_MESSAGE_REQUEST","FORWARD_MESSAGE_SUCCESS","FORWARD_MESSAGE_FAILURE","DELETE_MESSAGE_REQUEST","DELETE_MESSAGE_SUCCESS","DELETE_MESSAGE_FAILURE","SEND_MESSAGE_REQUEST","SEND_MESSAGE_SUCCESS","SEND_MESSAGE_FAILURE","SEEN_MESSAGE_REQUEST","SEEN_MESSAGE_SUCCESS","SEEN_MESSAGE_FAILURE","UPDATE_MESSAGE_SUCCES","UPLOAD_FILE_REQUEST","UPLOAD_FILE_SUCCESS","UPLOAD_FILE_FAILURE","SEND_FILE_REQUEST","SEND_FILE_SUCCESS","SEND_FILE_FAILURE","fetchMessageRequest","type","fetchMessageSuccess","messages","payload","fetchMessageFailure","error","copyMessageRequest","messageId","copyMessageSuccess","copyMessageFailure","saveMessageRequest","senderId","receiverId","messageType","content","mediaUrl","isGroup","saveMessageSuccess","saveMessageFailure","forwardMessageRequest","forwardMessageSuccess","forwardMessageFailure","deleteMessageRequest","deleteMessageSuccess","deleteMessageFailure","sendMessageRequest","isGroupMessage","sendMessageSuccess","sendMessageFailure","seenMessageRequest","otherId","seenMessageSuccess","seenMessageFailure","updateMessageSuccess","message","uploadFileRequest","file","uploadFileSuccess","response","uploadFileFailure","sendFileRequest","sendFileSuccess","sendFileFailure"],"sources":["C:/Users/Administrator/Desktop/ChatBF/ChatviaFE/src/redux/message/actions.js"],"sourcesContent":["// src/redux/message/actions.js\r\n\r\nimport {\r\n    FETCH_MESSAGE_REQUEST,\r\n    FETCH_MESSAGE_SUCCESS,\r\n    FETCH_MESSAGE_FAILURE,\r\n    COPY_MESSAGE_REQUEST,\r\n    COPY_MESSAGE_SUCCESS,\r\n    COPY_MESSAGE_FAILURE,\r\n    SAVE_MESSAGE_REQUEST,\r\n    SAVE_MESSAGE_SUCCESS,\r\n    SAVE_MESSAGE_FAILURE,\r\n    FORWARD_MESSAGE_REQUEST,\r\n    FORWARD_MESSAGE_SUCCESS,\r\n    FORWARD_MESSAGE_FAILURE,\r\n    DELETE_MESSAGE_REQUEST,\r\n    DELETE_MESSAGE_SUCCESS,\r\n    DELETE_MESSAGE_FAILURE,\r\n    SEND_MESSAGE_REQUEST,\r\n    SEND_MESSAGE_SUCCESS,\r\n    SEND_MESSAGE_FAILURE,\r\n    SEEN_MESSAGE_REQUEST,\r\n    SEEN_MESSAGE_SUCCESS,\r\n    SEEN_MESSAGE_FAILURE,\r\n    UPDATE_MESSAGE_SUCCES,\r\n    UPLOAD_FILE_REQUEST,\r\n    UPLOAD_FILE_SUCCESS,\r\n    UPLOAD_FILE_FAILURE,\r\n    SEND_FILE_REQUEST, SEND_FILE_SUCCESS, SEND_FILE_FAILURE\r\n} from \"../actionTypes\";\r\n\r\n// Actions cho việc fetch\r\nexport const fetchMessageRequest = () => ({\r\n    type: FETCH_MESSAGE_REQUEST,\r\n});\r\n\r\nexport const fetchMessageSuccess = (messages) => ({\r\n    type: FETCH_MESSAGE_SUCCESS,\r\n    payload: messages,\r\n});\r\n\r\nexport const fetchMessageFailure = (error) => ({\r\n    type: FETCH_MESSAGE_FAILURE,\r\n    payload: error,\r\n});\r\n\r\n// Actions cho các thao tác message với request, success, failure\r\nexport const copyMessageRequest = (messageId) => ({\r\n    type: COPY_MESSAGE_REQUEST,\r\n    payload: messageId,\r\n});\r\n\r\nexport const copyMessageSuccess = (messageId) => ({\r\n    type: COPY_MESSAGE_SUCCESS,\r\n    payload: messageId,\r\n});\r\n\r\nexport const copyMessageFailure = (error) => ({\r\n    type: COPY_MESSAGE_FAILURE,\r\n    payload: error,\r\n});\r\n\r\n\r\n// SEND MESSAGE\r\n\r\nexport const saveMessageRequest = (senderId, receiverId, messageType, content, mediaUrl, isGroup) => ({\r\n    type: SAVE_MESSAGE_REQUEST,\r\n    payload: {senderId, receiverId, messageType, content, mediaUrl, isGroup},\r\n});\r\n\r\nexport const saveMessageSuccess = (messageId) => ({\r\n    type: SAVE_MESSAGE_SUCCESS,\r\n    payload: messageId,\r\n});\r\n\r\nexport const saveMessageFailure = (error) => ({\r\n    type: SAVE_MESSAGE_FAILURE,\r\n    payload: error,\r\n});\r\n\r\nexport const forwardMessageRequest = (messageId) => ({\r\n    type: FORWARD_MESSAGE_REQUEST,\r\n    payload: messageId,\r\n});\r\n\r\nexport const forwardMessageSuccess = (messageId) => ({\r\n    type: FORWARD_MESSAGE_SUCCESS,\r\n    payload: messageId,\r\n});\r\n\r\nexport const forwardMessageFailure = (error) => ({\r\n    type: FORWARD_MESSAGE_FAILURE,\r\n    payload: error,\r\n});\r\n\r\nexport const deleteMessageRequest = (messageId) => ({\r\n    type: DELETE_MESSAGE_REQUEST,\r\n    payload: messageId,\r\n});\r\n\r\nexport const deleteMessageSuccess = (messageId) => ({\r\n    type: DELETE_MESSAGE_SUCCESS,\r\n    payload: messageId,\r\n});\r\n\r\nexport const deleteMessageFailure = (error) => ({\r\n    type: DELETE_MESSAGE_FAILURE,\r\n    payload: error,\r\n});\r\n\r\n\r\nexport const sendMessageRequest = ( receiverId, messageType, content, mediaUrl, isGroupMessage) => ({\r\n    type: SEND_MESSAGE_REQUEST,\r\n    payload: { receiverId, messageType, content, mediaUrl, isGroupMessage},\r\n});\r\n\r\nexport const sendMessageSuccess = (messageId) => ({\r\n    type: SEND_MESSAGE_SUCCESS,\r\n    payload: messageId,\r\n});\r\n\r\nexport const sendMessageFailure = (error) => ({\r\n    type: SEND_MESSAGE_FAILURE,\r\n    payload: error,\r\n});\r\n\r\n\r\nexport const seenMessageRequest = (otherId) => ({\r\n    type: SEEN_MESSAGE_REQUEST,\r\n    payload: {otherId},\r\n});\r\n\r\nexport const seenMessageSuccess = (messageId) => ({\r\n    type: SEEN_MESSAGE_SUCCESS,\r\n    payload: messageId,\r\n});\r\n\r\nexport const seenMessageFailure = (error) => ({\r\n    type: SEEN_MESSAGE_FAILURE,\r\n    payload: error,\r\n});\r\n\r\nexport const updateMessageSuccess = (message) => (\r\n    {\r\n        type: UPDATE_MESSAGE_SUCCES,\r\n        payload: message\r\n    }\r\n)\r\n\r\n\r\nexport const uploadFileRequest = (file) => ({\r\n    type: UPLOAD_FILE_REQUEST,\r\n    payload: file,\r\n  });\r\n  \r\n  export const uploadFileSuccess = (response) => ({\r\n    type: UPLOAD_FILE_SUCCESS,\r\n    payload: response,\r\n  });\r\n  \r\n  export const uploadFileFailure = (error) => ({\r\n    type: UPLOAD_FILE_FAILURE,\r\n    payload: error,\r\n  });\r\n\r\n\r\n\r\n  export const sendFileRequest = () => ({\r\n    type: SEND_FILE_REQUEST,\r\n});\r\n\r\nexport const sendFileSuccess = (response) => ({\r\n    type: SEND_FILE_SUCCESS,\r\n    payload: response,\r\n});\r\n\r\nexport const sendFileFailure = (error) => ({\r\n    type: SEND_FILE_FAILURE,\r\n    payload: error,\r\n});\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}