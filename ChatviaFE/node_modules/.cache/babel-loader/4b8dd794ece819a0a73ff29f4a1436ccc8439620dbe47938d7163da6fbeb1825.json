{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\Chatvia_React_v2.3.0\\\\Chatvia\\\\src\\\\components\\\\SelectContact.js\";\nimport React, { Component } from 'react';\nimport { Input, Label } from \"reactstrap\";\nimport { connect } from \"react-redux\";\n\n//use sortedContacts variable as global variable to sort contacts\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet sortedContacts = [{\n  group: \"A\",\n  children: [{\n    id: 0,\n    name: \"Demo\"\n  }]\n}];\nclass SelectContact extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      contacts: this.props.contacts\n    };\n    this.sortContact = this.sortContact.bind(this);\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps !== this.props) {\n      this.setState({\n        contacts: this.props.contacts\n      });\n    }\n  }\n  sortContact() {\n    let data = this.state.contacts.reduce((r, e) => {\n      try {\n        // get first letter of name of current element\n        let group = e.name[0];\n        // if there is no property in accumulator with this letter create it\n        if (!r[group]) r[group] = {\n          group,\n          children: [e]\n        };\n        // if there is push current element to children array for that letter\n        else r[group].children.push(e);\n      } catch (error) {\n        return sortedContacts;\n      }\n      // return accumulator\n      return r;\n    }, {});\n\n    // since data at this point is an object, to get array of values\n    // we use Object.values method\n    let result = Object.values(data);\n    this.setState({\n      contacts: result\n    });\n    sortedContacts = result;\n    return result;\n  }\n  componentDidMount() {\n    this.sortContact();\n  }\n  componentWillUnmount() {\n    this.sortContact();\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: sortedContacts.map((contact, key) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"``  \", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-3 font-weight-bold text-primary\",\n          children: contact.group\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 31\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"list-unstyled contact-list\",\n          children: contact.children.map((child, keyChild) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-check\",\n              children: [/*#__PURE__*/_jsxDEV(Input, {\n                type: \"checkbox\",\n                className: \"form-check-input\",\n                onChange: e => this.props.handleCheck(e, child.id),\n                id: \"memberCheck\" + child.id,\n                value: child.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(Label, {\n                className: \"form-check-label\",\n                htmlFor: \"memberCheck\" + child.id,\n                children: child.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 49\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 45\n            }, this)\n          }, keyChild, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 41\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 29\n        }, this)]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this);\n  }\n}\nconst mapStateToProps = state => {\n  const {\n    contacts\n  } = state.Chat;\n  return {\n    contacts\n  };\n};\nexport default connect(mapStateToProps, {})(SelectContact);","map":{"version":3,"names":["React","Component","Input","Label","connect","jsxDEV","_jsxDEV","sortedContacts","group","children","id","name","SelectContact","constructor","props","state","contacts","sortContact","bind","componentDidUpdate","prevProps","setState","data","reduce","r","e","push","error","result","Object","values","componentDidMount","componentWillUnmount","render","Fragment","map","contact","key","className","fileName","_jsxFileName","lineNumber","columnNumber","child","keyChild","type","onChange","handleCheck","value","htmlFor","mapStateToProps","Chat"],"sources":["C:/Users/Administrator/Desktop/Chatvia_React_v2.3.0/Chatvia/src/components/SelectContact.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport { Input, Label } from \"reactstrap\";\r\nimport { connect } from \"react-redux\";\r\n\r\n//use sortedContacts variable as global variable to sort contacts\r\nlet sortedContacts = [\r\n    {\r\n        group: \"A\",\r\n        children: [{ id: 0, name: \"Demo\" }]\r\n    }\r\n]\r\n\r\nclass SelectContact extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            contacts: this.props.contacts\r\n        }\r\n        this.sortContact = this.sortContact.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                contacts: this.props.contacts\r\n            });\r\n        }\r\n    }\r\n\r\n    sortContact() {\r\n        let data = this.state.contacts.reduce((r, e) => {\r\n            try {\r\n                // get first letter of name of current element\r\n                let group = e.name[0];\r\n                // if there is no property in accumulator with this letter create it\r\n                if (!r[group]) r[group] = { group, children: [e] }\r\n                // if there is push current element to children array for that letter\r\n                else r[group].children.push(e);\r\n            } catch (error) {\r\n                return sortedContacts;\r\n            }\r\n            // return accumulator\r\n            return r;\r\n        }, {})\r\n\r\n        // since data at this point is an object, to get array of values\r\n        // we use Object.values method\r\n        let result = Object.values(data);\r\n        this.setState({ contacts: result });\r\n        sortedContacts = result;\r\n        return result;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.sortContact();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.sortContact();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <React.Fragment>\r\n                {\r\n                    sortedContacts.map((contact, key) =>\r\n                        <div key={key}>\r\n                          ``  <div className=\"p-3 font-weight-bold text-primary\">\r\n                                {contact.group}\r\n                            </div>\r\n\r\n                            <ul className=\"list-unstyled contact-list\">\r\n                                {\r\n                                    contact.children.map((child, keyChild) =>\r\n\r\n                                        <li key={keyChild}>\r\n                                            <div className=\"form-check\">\r\n                                                <Input type=\"checkbox\" className=\"form-check-input\" onChange={(e) => this.props.handleCheck(e, child.id)} id={\"memberCheck\" + child.id} value={child.name} />\r\n                                                <Label className=\"form-check-label\" htmlFor={\"memberCheck\" + child.id}>{child.name}</Label>\r\n                                            </div>\r\n                                        </li>\r\n                                    )\r\n                                }\r\n                            </ul>\r\n                        </div>\r\n                    )\r\n                }\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    const { contacts } = state.Chat;\r\n    return { contacts };\r\n};\r\n\r\nexport default (connect(mapStateToProps, {})(SelectContact));"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}