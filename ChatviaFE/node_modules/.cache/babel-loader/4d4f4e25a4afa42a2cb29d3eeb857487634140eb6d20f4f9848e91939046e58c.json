{"ast":null,"code":"import jwtDecode from 'jwt-decode';\n\n/**\n * Checks if user is authenticated\n */\nconst isUserAuthenticated = () => {\n  const user = getLoggedInUser();\n  if (!user) {\n    return false;\n  }\n  try {\n    const decoded = jwtDecode(user.token);\n    const currentTime = Date.now() / 1000;\n    if (decoded.exp < currentTime) {\n      console.warn('access token expired');\n      return false;\n    } else {\n      return true;\n    }\n  } catch (e) {\n    console.warn('access token expired');\n    return false;\n  }\n};\n\n/**\n * Sets the logged in user\n */\nconst setLoggedInUser = user => {\n  localStorage.setItem('authUser', JSON.stringify(user));\n};\n\n/**\n * Returns the logged in user\n */\nconst getLoggedInUser = () => {\n  const user = localStorage.getItem('authUser');\n  return user ? typeof user == 'object' ? user : JSON.parse(user) : null;\n};\nexport { isUserAuthenticated, setLoggedInUser, getLoggedInUser };","map":{"version":3,"names":["jwtDecode","isUserAuthenticated","user","getLoggedInUser","decoded","token","currentTime","Date","now","exp","console","warn","e","setLoggedInUser","localStorage","setItem","JSON","stringify","getItem","parse"],"sources":["C:/Users/Administrator/Desktop/Chatvia_React_v2.3.0/Chatvia/src/helpers/authUtils.js"],"sourcesContent":["import jwtDecode from 'jwt-decode';\n\n/**\n * Checks if user is authenticated\n */\nconst isUserAuthenticated = () => {\n    const user = getLoggedInUser();\n    if (!user) {\n        return false;\n    }\n    \n    try {\n        const decoded = jwtDecode(user.token);\n        const currentTime = Date.now() / 1000;\n        if (decoded.exp < currentTime) {\n            console.warn('access token expired');\n            return false;\n        }\n        else {\n            return true;\n        }\n    } catch(e) {\n        console.warn('access token expired');\n        return false;\n    }\n}\n\n/**\n * Sets the logged in user\n */\nconst setLoggedInUser = (user) => {\n    localStorage.setItem('authUser', JSON.stringify(user));\n}\n\n/**\n * Returns the logged in user\n */\nconst getLoggedInUser = () => {\n    const user = localStorage.getItem('authUser');\n    return user ? (typeof (user) == 'object' ? user : JSON.parse(user)) : null;\n}\n\nexport { isUserAuthenticated, setLoggedInUser, getLoggedInUser };"],"mappings":"AAAA,OAAOA,SAAS,MAAM,YAAY;;AAElC;AACA;AACA;AACA,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EAC9B,MAAMC,IAAI,GAAGC,eAAe,CAAC,CAAC;EAC9B,IAAI,CAACD,IAAI,EAAE;IACP,OAAO,KAAK;EAChB;EAEA,IAAI;IACA,MAAME,OAAO,GAAGJ,SAAS,CAACE,IAAI,CAACG,KAAK,CAAC;IACrC,MAAMC,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI;IACrC,IAAIJ,OAAO,CAACK,GAAG,GAAGH,WAAW,EAAE;MAC3BI,OAAO,CAACC,IAAI,CAAC,sBAAsB,CAAC;MACpC,OAAO,KAAK;IAChB,CAAC,MACI;MACD,OAAO,IAAI;IACf;EACJ,CAAC,CAAC,OAAMC,CAAC,EAAE;IACPF,OAAO,CAACC,IAAI,CAAC,sBAAsB,CAAC;IACpC,OAAO,KAAK;EAChB;AACJ,CAAC;;AAED;AACA;AACA;AACA,MAAME,eAAe,GAAIX,IAAI,IAAK;EAC9BY,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEC,IAAI,CAACC,SAAS,CAACf,IAAI,CAAC,CAAC;AAC1D,CAAC;;AAED;AACA;AACA;AACA,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAC1B,MAAMD,IAAI,GAAGY,YAAY,CAACI,OAAO,CAAC,UAAU,CAAC;EAC7C,OAAOhB,IAAI,GAAI,OAAQA,IAAK,IAAI,QAAQ,GAAGA,IAAI,GAAGc,IAAI,CAACG,KAAK,CAACjB,IAAI,CAAC,GAAI,IAAI;AAC9E,CAAC;AAED,SAASD,mBAAmB,EAAEY,eAAe,EAAEV,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}