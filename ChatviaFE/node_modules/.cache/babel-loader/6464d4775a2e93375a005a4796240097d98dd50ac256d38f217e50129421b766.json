{"ast":null,"code":"import axios from 'axios';\nimport MockAdapter from 'axios-mock-adapter';\nconst token = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJjb2RlcnRoZW1lcyIsImlhdCI6MTU4NzM1NjY0OSwiZXhwIjoxOTAyODg5NDQ5LCJhdWQiOiJjb2RlcnRoZW1lcy5jb20iLCJzdWIiOiJzdXBwb3J0QGNvZGVydGhlbWVzLmNvbSIsImxhc3ROYW1lIjoiVGVzdCIsIkVtYWlsIjoic3VwcG9ydEBjb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4iLCJmaXJzdE5hbWUiOiJIeXBlciJ9.P27f7JNBF-vOaJFpkn-upfEh3zSprYfyhTOYhijykdI';\nlet users = [{\n  id: 1,\n  name: 'Chatvia',\n  username: 'themesbrand',\n  password: '123456',\n  email: 'admin@themesbrand.com',\n  role: 'role',\n  token: token\n}];\nconst fakeBackend = () => {\n  // This sets the mock adapter on the default instance\n  var mock = new MockAdapter(axios);\n  mock.onPost('/register').reply(function (config) {\n    const user = JSON.parse(config['data']);\n    user.id = users.length + 1;\n    users.push(user);\n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        resolve([200, user]);\n      });\n    });\n  });\n  mock.onPost('/login').reply(function (config) {\n    const user = JSON.parse(config['data']);\n    const validUser = users.filter(usr => usr.email === user.username && usr.password === user.password);\n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        if (validUser['length'] === 1) {\n          resolve([200, validUser[0]]);\n        } else {\n          reject({\n            \"message\": \"Username and password are invalid. Please enter correct username and password\"\n          });\n        }\n      });\n    });\n  });\n  mock.onPost('/forget-pwd').reply(function (config) {\n    // User needs to check that user is eXist or not and send mail for Reset New password\n\n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        resolve([200, \"Check your mail and reset your password.\"]);\n      });\n    });\n  });\n};\nexport default fakeBackend;","map":{"version":3,"names":["axios","MockAdapter","token","users","id","name","username","password","email","role","fakeBackend","mock","onPost","reply","config","user","JSON","parse","length","push","Promise","resolve","reject","setTimeout","validUser","filter","usr"],"sources":["C:/Users/Administrator/Desktop/Chatvia_React_v2.3.0/Chatvia/src/helpers/fake-backend.js"],"sourcesContent":["import axios from 'axios';\nimport MockAdapter from 'axios-mock-adapter';\n\nconst token = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJjb2RlcnRoZW1lcyIsImlhdCI6MTU4NzM1NjY0OSwiZXhwIjoxOTAyODg5NDQ5LCJhdWQiOiJjb2RlcnRoZW1lcy5jb20iLCJzdWIiOiJzdXBwb3J0QGNvZGVydGhlbWVzLmNvbSIsImxhc3ROYW1lIjoiVGVzdCIsIkVtYWlsIjoic3VwcG9ydEBjb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4iLCJmaXJzdE5hbWUiOiJIeXBlciJ9.P27f7JNBF-vOaJFpkn-upfEh3zSprYfyhTOYhijykdI';\n\nlet users = [\n    { id: 1, name: 'Chatvia', username: 'themesbrand', password: '123456', email: 'admin@themesbrand.com', role: 'role', token: token }\n];\n\nconst fakeBackend = () => {\n    // This sets the mock adapter on the default instance\n    var mock = new MockAdapter(axios);\n\n    mock.onPost('/register').reply(function (config) {\n\n        const user = JSON.parse(config['data']);\n        user.id = users.length + 1;\n        users.push(user);\n\n        return new Promise(function (resolve, reject) {\n            setTimeout(function () {\n                resolve([200, user]);\n            });\n        });\n    });\n\n    mock.onPost('/login').reply(function (config) {\n        const user = JSON.parse(config['data']);\n        const validUser = users.filter(usr => usr.email === user.username && usr.password === user.password);\n\n        return new Promise(function (resolve, reject) {\n            setTimeout(function () {\n                if (validUser['length'] === 1) {\n                    resolve([200, validUser[0]]);\n                } else {\n                    reject({\"message\": \"Username and password are invalid. Please enter correct username and password\"});\n                }\n            });\n        });\n    });\n\n    mock.onPost('/forget-pwd').reply(function (config) {\n        // User needs to check that user is eXist or not and send mail for Reset New password\n\n        return new Promise(function (resolve, reject) {\n            setTimeout(function () {\n                resolve([200, \"Check your mail and reset your password.\"]);\n            });\n        });\n\n    });\n\n}\n\nexport default fakeBackend;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW,MAAM,oBAAoB;AAE5C,MAAMC,KAAK,GAAG,2VAA2V;AAEzW,IAAIC,KAAK,GAAG,CACR;EAAEC,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE,SAAS;EAAEC,QAAQ,EAAE,aAAa;EAAEC,QAAQ,EAAE,QAAQ;EAAEC,KAAK,EAAE,uBAAuB;EAAEC,IAAI,EAAE,MAAM;EAAEP,KAAK,EAAEA;AAAM,CAAC,CACtI;AAED,MAAMQ,WAAW,GAAGA,CAAA,KAAM;EACtB;EACA,IAAIC,IAAI,GAAG,IAAIV,WAAW,CAACD,KAAK,CAAC;EAEjCW,IAAI,CAACC,MAAM,CAAC,WAAW,CAAC,CAACC,KAAK,CAAC,UAAUC,MAAM,EAAE;IAE7C,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,MAAM,CAAC,MAAM,CAAC,CAAC;IACvCC,IAAI,CAACX,EAAE,GAAGD,KAAK,CAACe,MAAM,GAAG,CAAC;IAC1Bf,KAAK,CAACgB,IAAI,CAACJ,IAAI,CAAC;IAEhB,OAAO,IAAIK,OAAO,CAAC,UAAUC,OAAO,EAAEC,MAAM,EAAE;MAC1CC,UAAU,CAAC,YAAY;QACnBF,OAAO,CAAC,CAAC,GAAG,EAAEN,IAAI,CAAC,CAAC;MACxB,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC,CAAC;EAEFJ,IAAI,CAACC,MAAM,CAAC,QAAQ,CAAC,CAACC,KAAK,CAAC,UAAUC,MAAM,EAAE;IAC1C,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,MAAM,CAAC,MAAM,CAAC,CAAC;IACvC,MAAMU,SAAS,GAAGrB,KAAK,CAACsB,MAAM,CAACC,GAAG,IAAIA,GAAG,CAAClB,KAAK,KAAKO,IAAI,CAACT,QAAQ,IAAIoB,GAAG,CAACnB,QAAQ,KAAKQ,IAAI,CAACR,QAAQ,CAAC;IAEpG,OAAO,IAAIa,OAAO,CAAC,UAAUC,OAAO,EAAEC,MAAM,EAAE;MAC1CC,UAAU,CAAC,YAAY;QACnB,IAAIC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;UAC3BH,OAAO,CAAC,CAAC,GAAG,EAAEG,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;QAChC,CAAC,MAAM;UACHF,MAAM,CAAC;YAAC,SAAS,EAAE;UAA+E,CAAC,CAAC;QACxG;MACJ,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC,CAAC;EAEFX,IAAI,CAACC,MAAM,CAAC,aAAa,CAAC,CAACC,KAAK,CAAC,UAAUC,MAAM,EAAE;IAC/C;;IAEA,OAAO,IAAIM,OAAO,CAAC,UAAUC,OAAO,EAAEC,MAAM,EAAE;MAC1CC,UAAU,CAAC,YAAY;QACnBF,OAAO,CAAC,CAAC,GAAG,EAAE,0CAA0C,CAAC,CAAC;MAC9D,CAAC,CAAC;IACN,CAAC,CAAC;EAEN,CAAC,CAAC;AAEN,CAAC;AAED,eAAeX,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}