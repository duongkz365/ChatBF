{"ast":null,"code":"// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { AbortController } from \"./AbortController\";\nimport { HttpError, TimeoutError } from \"./Errors\";\nimport { LogLevel } from \"./ILogger\";\nimport { TransferFormat } from \"./ITransport\";\nimport { Arg, getDataDetail, getUserAgentHeader, sendMessage } from \"./Utils\";\n// Not exported from 'index', this type is internal.\n/** @private */\nexport class LongPollingTransport {\n  // This is an internal type, not exported from 'index' so this is really just internal.\n  get pollAborted() {\n    return this._pollAbort.aborted;\n  }\n  constructor(httpClient, logger, options) {\n    this._httpClient = httpClient;\n    this._logger = logger;\n    this._pollAbort = new AbortController();\n    this._options = options;\n    this._running = false;\n    this.onreceive = null;\n    this.onclose = null;\n  }\n  async connect(url, transferFormat) {\n    Arg.isRequired(url, \"url\");\n    Arg.isRequired(transferFormat, \"transferFormat\");\n    Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\n    this._url = url;\n    this._logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting.\");\n    // Allow binary format on Node and Browsers that support binary content (indicated by the presence of responseType property)\n    if (transferFormat === TransferFormat.Binary && typeof XMLHttpRequest !== \"undefined\" && typeof new XMLHttpRequest().responseType !== \"string\") {\n      throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\n    }\n    const [name, value] = getUserAgentHeader();\n    const headers = {\n      [name]: value,\n      ...this._options.headers\n    };\n    const pollOptions = {\n      abortSignal: this._pollAbort.signal,\n      headers,\n      timeout: 100000,\n      withCredentials: this._options.withCredentials\n    };\n    if (transferFormat === TransferFormat.Binary) {\n      pollOptions.responseType = \"arraybuffer\";\n    }\n    // Make initial long polling request\n    // Server uses first long polling request to finish initializing connection and it returns without data\n    const pollUrl = `${url}&_=${Date.now()}`;\n    this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\n    const response = await this._httpClient.get(pollUrl, pollOptions);\n    if (response.statusCode !== 200) {\n      this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\n      // Mark running as false so that the poll immediately ends and runs the close logic\n      this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\n      this._running = false;\n    } else {\n      this._running = true;\n    }\n    this._receiving = this._poll(this._url, pollOptions);\n  }\n  async _poll(url, pollOptions) {\n    try {\n      while (this._running) {\n        try {\n          const pollUrl = `${url}&_=${Date.now()}`;\n          this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\n          const response = await this._httpClient.get(pollUrl, pollOptions);\n          if (response.statusCode === 204) {\n            this._logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server.\");\n            this._running = false;\n          } else if (response.statusCode !== 200) {\n            this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\n            // Unexpected status code\n            this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\n            this._running = false;\n          } else {\n            // Process the response\n            if (response.content) {\n              this._logger.log(LogLevel.Trace, `(LongPolling transport) data received. ${getDataDetail(response.content, this._options.logMessageContent)}.`);\n              if (this.onreceive) {\n                this.onreceive(response.content);\n              }\n            } else {\n              // This is another way timeout manifest.\n              this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\n            }\n          }\n        } catch (e) {\n          if (!this._running) {\n            // Log but disregard errors that occur after stopping\n            this._logger.log(LogLevel.Trace, `(LongPolling transport) Poll errored after shutdown: ${e.message}`);\n          } else {\n            if (e instanceof TimeoutError) {\n              // Ignore timeouts and reissue the poll.\n              this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\n            } else {\n              // Close the connection with the error as the result.\n              this._closeError = e;\n              this._running = false;\n            }\n          }\n        }\n      }\n    } finally {\n      this._logger.log(LogLevel.Trace, \"(LongPolling transport) Polling complete.\");\n      // We will reach here with pollAborted==false when the server returned a response causing the transport to stop.\n      // If pollAborted==true then client initiated the stop and the stop method will raise the close event after DELETE is sent.\n      if (!this.pollAborted) {\n        this._raiseOnClose();\n      }\n    }\n  }\n  async send(data) {\n    if (!this._running) {\n      return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\n    }\n    return sendMessage(this._logger, \"LongPolling\", this._httpClient, this._url, data, this._options);\n  }\n  async stop() {\n    this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stopping polling.\");\n    // Tell receiving loop to stop, abort any current request, and then wait for it to finish\n    this._running = false;\n    this._pollAbort.abort();\n    try {\n      await this._receiving;\n      // Send DELETE to clean up long polling on the server\n      this._logger.log(LogLevel.Trace, `(LongPolling transport) sending DELETE request to ${this._url}.`);\n      const headers = {};\n      const [name, value] = getUserAgentHeader();\n      headers[name] = value;\n      const deleteOptions = {\n        headers: {\n          ...headers,\n          ...this._options.headers\n        },\n        timeout: this._options.timeout,\n        withCredentials: this._options.withCredentials\n      };\n      let error;\n      try {\n        await this._httpClient.delete(this._url, deleteOptions);\n      } catch (err) {\n        error = err;\n      }\n      if (error) {\n        if (error instanceof HttpError) {\n          if (error.statusCode === 404) {\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) A 404 response was returned from sending a DELETE request.\");\n          } else {\n            this._logger.log(LogLevel.Trace, `(LongPolling transport) Error sending a DELETE request: ${error}`);\n          }\n        }\n      } else {\n        this._logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request accepted.\");\n      }\n    } finally {\n      this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stop finished.\");\n      // Raise close event here instead of in polling\n      // It needs to happen after the DELETE request is sent\n      this._raiseOnClose();\n    }\n  }\n  _raiseOnClose() {\n    if (this.onclose) {\n      let logMessage = \"(LongPolling transport) Firing onclose event.\";\n      if (this._closeError) {\n        logMessage += \" Error: \" + this._closeError;\n      }\n      this._logger.log(LogLevel.Trace, logMessage);\n      this.onclose(this._closeError);\n    }\n  }\n}\n//# sourceMappingURL=LongPollingTransport.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}